#!/usr/bin/env node

// src/routes/widgets.ts
import inquirer4 from "inquirer";
import { chdir, cwd } from "process";

// src/utils/misc/spinner.ts
import ora from "ora";
var Spinner = class {
  constructor() {
    this.spinner = ora();
  }
  updateSpinnerText(message) {
    if (this.spinner.isSpinning) {
      this.spinner.text = message;
      return;
    }
    this.spinner.start(message);
  }
  stopSpinner() {
    if (this.spinner.isSpinning) {
      this.spinner.stop();
    }
  }
  spinnerError(message) {
    if (this.spinner.isSpinning) {
      this.spinner.fail(message);
    }
  }
  spinnerSuccess(message) {
    if (this.spinner.isSpinning) {
      this.spinner.succeed(message);
    }
  }
  spinnerInfo(message) {
    this.spinner.info(message);
  }
};
var spinner_default = Spinner;

// src/utils/helpers/preset.ts
import os from "os";
import inquirer from "inquirer";
import fs3 from "fs";
import path2 from "path";
import util from "util";
import { exec as exec2 } from "child_process";

// src/utils/helpers/tailwind.ts
import fs2 from "fs";
import { exec } from "child_process";
import { Project, Node } from "ts-morph";

// src/utils/data/tailwind.json
var tailwind_default = {
  vite: {
    content: [
      '"./src/**/*.{js,jsx,ts,tsx}"',
      '"./index.html"',
      '"./src/**/*.{vue,js,ts,jsx,tsx}"'
    ],
    theme: {
      extend: {
        colors: {
          "primary-50": "rgb(var(--primary-50))",
          "primary-100": "rgb(var(--primary-100))",
          "primary-200": "rgb(var(--primary-200))",
          "primary-300": "rgb(var(--primary-300))",
          "primary-400": "rgb(var(--primary-400))",
          "primary-500": "rgb(var(--primary-500))",
          "primary-600": "rgb(var(--primary-600))",
          "primary-700": "rgb(var(--primary-700))",
          "primary-800": "rgb(var(--primary-800))",
          "primary-900": "rgb(var(--primary-900))",
          "primary-950": "rgb(var(--primary-950))",
          "surface-0": "rgb(var(--surface-0))",
          "surface-50": "rgb(var(--surface-50))",
          "surface-100": "rgb(var(--surface-100))",
          "surface-200": "rgb(var(--surface-200))",
          "surface-300": "rgb(var(--surface-300))",
          "surface-400": "rgb(var(--surface-400))",
          "surface-500": "rgb(var(--surface-500))",
          "surface-600": "rgb(var(--surface-600))",
          "surface-700": "rgb(var(--surface-700))",
          "surface-800": "rgb(var(--surface-800))",
          "surface-900": "rgb(var(--surface-900))",
          "surface-950": "rgb(var(--surface-950))"
        }
      }
    },
    root: {
      "--primary-50": "236 253 245",
      "--primary-100": "209 250 229",
      "--primary-200": "167 243 208",
      "--primary-300": "110 231 183",
      "--primary-400": "52 211 153",
      "--primary-500": "16 185 129",
      "--primary-600": "5 150 105",
      "--primary-700": "4 120 87",
      "--primary-800": "6 95 70",
      "--primary-900": "4 78 56",
      "--primary-950": "2 44 34",
      "--surface-0": "255 255 255",
      "--surface-50": "248 250 252",
      "--surface-100": "241 245 249",
      "--surface-200": "226 232 240",
      "--surface-300": "203 213 225",
      "--surface-400": " 148 163 184",
      "--surface-500": "100 116 139",
      "--surface-600": "71 85 105",
      "--surface-700": "45 55 72",
      "--surface-800": "30 41 59",
      "--surface-900": "15 23 42",
      "--surface-950": "3 6 23"
    }
  },
  nuxt: {
    content: [
      '"components/**/*.{js,vue,ts}"',
      '"layouts/**/*.vue"',
      '"pages/**/*.vue"',
      '"plugins/**/*.{js,ts}"',
      '"app.vue"',
      '"error.vue"'
    ],
    theme: {
      extend: {
        colors: {
          "primary-50": "rgb(var(--primary-50))",
          "primary-100": "rgb(var(--primary-100))",
          "primary-200": "rgb(var(--primary-200))",
          "primary-300": "rgb(var(--primary-300))",
          "primary-400": "rgb(var(--primary-400))",
          "primary-500": "rgb(var(--primary-500))",
          "primary-600": "rgb(var(--primary-600))",
          "primary-700": "rgb(var(--primary-700))",
          "primary-800": "rgb(var(--primary-800))",
          "primary-900": "rgb(var(--primary-900))",
          "primary-950": "rgb(var(--primary-950))",
          "surface-0": "rgb(var(--surface-0))",
          "surface-50": "rgb(var(--surface-50))",
          "surface-100": "rgb(var(--surface-100))",
          "surface-200": "rgb(var(--surface-200))",
          "surface-300": "rgb(var(--surface-300))",
          "surface-400": "rgb(var(--surface-400))",
          "surface-500": "rgb(var(--surface-500))",
          "surface-600": "rgb(var(--surface-600))",
          "surface-700": "rgb(var(--surface-700))",
          "surface-800": "rgb(var(--surface-800))",
          "surface-900": "rgb(var(--surface-900))",
          "surface-950": "rgb(var(--surface-950))"
        }
      }
    },
    root: {
      "--primary-50": "236 253 245",
      "--primary-100": "209 250 229",
      "--primary-200": "167 243 208",
      "--primary-300": "110 231 183",
      "--primary-400": "52 211 153",
      "--primary-500": "16 185 129",
      "--primary-600": "5 150 105",
      "--primary-700": "4 120 87",
      "--primary-800": "6 95 70",
      "--primary-900": "4 78 56",
      "--primary-950": "2 44 34",
      "--surface-0": "255 255 255",
      "--surface-50": "248 250 252",
      "--surface-100": "241 245 249",
      "--surface-200": "226 232 240",
      "--surface-300": "203 213 225",
      "--surface-400": " 148 163 184",
      "--surface-500": "100 116 139",
      "--surface-600": "71 85 105",
      "--surface-700": "45 55 72",
      "--surface-800": "30 41 59",
      "--surface-900": "15 23 42",
      "--surface-950": "3 6 23"
    }
  },
  directives: [
    "@tailwind base;",
    "@tailwind components;",
    "@tailwind utilities;"
  ]
};

// src/utils/helpers/project.ts
import fs from "fs";
import path from "path";
var hasDependency = (depName, packageJsonPath = "package.json") => {
  const dependency = getDependency(depName, packageJsonPath);
  return !!dependency;
};
var getDependency = (packageName, packageJsonPath = "package.json") => {
  let packageJson;
  try {
    packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
  } catch (error) {
    console.error("Error reading package.json file: ", error);
    return false;
  }
  const { dependencies, devDependencies } = packageJson;
  return dependencies[packageName] || devDependencies[packageName];
};
var getFramework = () => {
  if (hasDependency("vue")) {
    return "vue";
  } else if (hasDependency("@angular/core")) {
    return "angular";
  } else if (hasDependency("react")) {
    return "react";
  } else if (!hasDependency("react") && fs.existsSync("index.html")) {
    return "js";
  }
};
var checkProjectTypes = () => {
  const framework = getFramework();
  let subTypes = {
    nuxt: false,
    vite: false,
    typescript: false
  };
  if (framework === "vue") {
    subTypes = {
      nuxt: hasDependency("nuxt"),
      vite: hasDependency("vite"),
      typescript: hasDependency("typescript")
    };
  }
  return { framework, subTypes };
};
var getEngine = () => {
  const { subTypes } = checkProjectTypes();
  if (subTypes.vite) {
    return "vite" /* Vite */;
  } else {
    return "nuxt" /* Nuxt */;
  }
};
var calculateRelativeImport = (presetDirectory, srcFolderPath) => {
  const normalizedPresetDir = path.normalize(presetDirectory);
  const normalizedNuxtConfigPath = path.normalize(srcFolderPath);
  let relativePath = path.relative(
    normalizedNuxtConfigPath,
    normalizedPresetDir
  );
  relativePath = relativePath.replace(/\\/g, "/");
  const importPTValue = `./${relativePath}`;
  return importPTValue;
};
var checkBeta = () => {
  const isVite = hasDependency("vite");
  if (!isVite) {
    console.log("PrimeVue Beta is only available for Vite projects.");
    return false;
  }
  return true;
};
var checkPrimeVueV4 = () => {
  let primeVueVersion = getDependency("primevue");
  primeVueVersion = primeVueVersion.replace(/[^0-9.]/g, "");
  if (primeVueVersion && primeVueVersion.startsWith("4")) {
    return true;
  }
  return false;
};

// src/utils/helpers/tailwind.ts
async function installTailwind() {
  if (fs2.existsSync(`${process.cwd()}/tailwind.config.js`)) {
    console.log("Tailwind is already installed.");
    await tailwindConfiguration();
    return;
  }
  console.log("Installing Tailwind CSS...");
  await exec(
    `npm install tailwindcss postcss autoprefixer`,
    async (error, stdout, stderr) => {
      console.log("Tailwind installation completed successfully.");
    }
  );
  await exec(`npx tailwindcss init -p`, async (error, stdout, stderr) => {
    await tailwindConfiguration();
  });
}
async function getProjectTailwindContent(engine) {
  const content = tailwind_default[engine].content;
  return content;
}
async function getProjectTailwindTheme(engine) {
  const theme = tailwind_default[engine].theme;
  return theme;
}
async function modifyTailwindConfig(engine) {
  if (!engine) {
    console.log("Workspace information is missing.");
    return;
  }
  const project = new Project();
  const currentDir = process.cwd();
  const tailwindConfigPath = `${currentDir}/tailwind.config.js`;
  if (!fs2.existsSync(tailwindConfigPath)) {
    console.log("Tailwind config file not found.");
    return;
  }
  const sourceFile = project.addSourceFileAtPath(tailwindConfigPath);
  const content = await getProjectTailwindContent(engine);
  const theme = await getProjectTailwindTheme(engine);
  const themeString = JSON.stringify(theme);
  const contentString = content.join(",\n    ");
  const exportAssignment = sourceFile.getExportAssignment(() => true);
  const configObject = exportAssignment?.getExpression();
  if (configObject && Node.isObjectLiteralExpression(configObject)) {
    const contentProperty = configObject.getProperty("content");
    if (contentProperty && Node.isPropertyAssignment(contentProperty)) {
      const contentInitializer = contentProperty.getInitializer();
      if (Node.isArrayLiteralExpression(contentInitializer)) {
        const existingElements = contentInitializer.getElements().map((element) => element.getText());
        const uniqueElements = [
          .../* @__PURE__ */ new Set([...existingElements, ...content])
        ];
        contentInitializer.replaceWithText(
          `[${uniqueElements.join(", ")}]`
        );
      }
    } else {
      configObject.addPropertyAssignment({
        name: "content",
        initializer: `[${contentString}]`
      });
    }
    const themeProperty = configObject.getProperty("theme");
    if (themeProperty && Node.isPropertyAssignment(themeProperty)) {
      const themeInitializer = themeProperty.getInitializer();
      if (themeInitializer && Node.isObjectLiteralExpression(themeInitializer)) {
        const extendProperty = themeInitializer.getProperty("extend");
        if (extendProperty && Node.isPropertyAssignment(extendProperty)) {
          const extendInitializer = extendProperty.getInitializer();
          if (extendInitializer && Node.isObjectLiteralExpression(extendInitializer)) {
            const colorsProperty = extendInitializer.getProperty("colors");
            if (colorsProperty && Node.isPropertyAssignment(colorsProperty)) {
              const colorsInitializer = colorsProperty.getInitializer();
              if (colorsInitializer && Node.isObjectLiteralExpression(
                colorsInitializer
              )) {
                const newColors = Object.entries(
                  theme.extend.colors
                ).map(([key, value]) => {
                  key = JSON.stringify(key);
                  value = JSON.stringify(value);
                  const colorProperty = colorsInitializer.getProperty(key);
                  if (!colorProperty) {
                    return {
                      key,
                      value
                    };
                  }
                });
                newColors.forEach((color) => {
                  if (color) {
                    colorsInitializer.addPropertyAssignment(
                      {
                        name: color.key,
                        initializer: color.value
                      }
                    );
                  }
                });
              }
            } else {
              extendInitializer.addPropertyAssignment({
                name: "colors",
                initializer: JSON.stringify(theme.extend.colors)
              });
            }
          }
        } else {
          themeInitializer.addPropertyAssignment({
            name: "extend",
            initializer: JSON.stringify(theme.extend)
          });
        }
      }
    } else {
      configObject.addPropertyAssignment({
        name: "theme",
        initializer: themeString
      });
    }
  } else {
    console.log("Tailwind config file not found.");
    return;
  }
  await project.save();
  console.log("\u2705 Tailwind config updated successfully.");
}
async function updateViteMainCSS() {
  try {
    const project = new Project();
    const currentDir = process.cwd();
    const tailwindConfigPath = `${currentDir}/src/style.css`;
    if (!fs2.existsSync(tailwindConfigPath)) {
      console.log(
        "main css not found. Please add tailwind directives and root css options manually. Options:\n"
      );
      console.log(`${tailwind_default.directives.join("\n")}`);
      console.log(
        `:root {
 ${Object.entries(tailwind_default.vite.root).map(([key, value]) => `    ${key}: ${value};`).join("\n")}
}`
      );
      return;
    }
    const indexCssFile = project.addSourceFileAtPath(tailwindConfigPath);
    const root = tailwind_default.vite.root;
    const directives = tailwind_default.directives;
    const rootCssOptionsCode = Object.entries(root).filter(([key]) => !indexCssFile.getText().includes(key)).map(([key, value]) => `    ${key}: ${value};`).join("\n");
    const rootCssOptions = rootCssOptionsCode ? `
:root {
 ${rootCssOptionsCode}
}
` : "";
    const directivesCode = directives.filter((directive) => !indexCssFile.getText().includes(directive)).join("\n");
    if (!indexCssFile) {
      console.log(
        "main css not found. Please add tailwind directives and root css options manually.\n"
      );
      console.log(`${directivesCode}${rootCssOptionsCode}`);
      return;
    }
    indexCssFile.insertText(0, `${directivesCode}${rootCssOptions}`);
    await indexCssFile.save();
    console.log(
      "\u2705 Tailwind directives added to main css file successfully."
    );
  } catch (error) {
    console.log(error);
  }
}
async function nuxtConfiguration() {
  const project = new Project();
  const currentDir = process.cwd();
  const nuxtConfigPath = `${currentDir}/nuxt.config.ts`;
  const sourceFile = project.addSourceFileAtPath(nuxtConfigPath);
  const exportAssignment = sourceFile.getExportAssignment(() => true);
  const configObject = exportAssignment?.getExpression();
  if (configObject && Node.isCallExpression(configObject)) {
    const args = configObject.getArguments();
    if (args.length > 0 && Node.isObjectLiteralExpression(args[0])) {
      const configObjectLiteral = args[0];
      let postcssProperty = configObjectLiteral.getProperty("postcss");
      if (!postcssProperty) {
        postcssProperty = configObjectLiteral.addPropertyAssignment({
          name: "postcss",
          initializer: "{ plugins: {} }"
        });
      }
      const postcssInitializer = postcssProperty.getInitializer();
      if (postcssInitializer && Node.isObjectLiteralExpression(postcssInitializer)) {
        const pluginsProperty = postcssInitializer?.getProperty("plugins");
        const pluginsInitializer = pluginsProperty?.getInitializer();
        if (pluginsProperty && Node.isObjectLiteralExpression(pluginsInitializer)) {
          if (!pluginsInitializer.getProperty("tailwindcss")) {
            pluginsInitializer.addPropertyAssignment({
              name: "tailwindcss",
              initializer: "{}"
            });
          }
          if (!pluginsInitializer.getProperty("autoprefixer")) {
            pluginsInitializer.addPropertyAssignment({
              name: "autoprefixer",
              initializer: "{}"
            });
          }
        } else {
          postcssInitializer.addPropertyAssignment({
            name: "plugins",
            initializer: "{ tailwindcss: {}, autoprefixer: {} }"
          });
        }
      }
    }
  }
  await project.save();
}
async function updateNuxtMainCSS() {
  const project = new Project();
  const currentDir = process.cwd();
  const nuxtMainStylePath = `${currentDir}/assets/css/main.css`;
  if (!fs2.existsSync(nuxtMainStylePath)) {
    fs2.mkdirSync(`${currentDir}/assets/css`, { recursive: true });
    fs2.writeFileSync(nuxtMainStylePath, "");
  }
  const sourceFile = project.addSourceFileAtPath(nuxtMainStylePath);
  const root = tailwind_default.vite.root;
  const directives = tailwind_default.directives;
  const rootCssOptionsCode = Object.entries(root).filter(([key]) => !sourceFile.getText().includes(key)).map(([key, value]) => `    ${key}: ${value};`).join("\n");
  const rootCssOptions = rootCssOptionsCode ? `
:root {
 ${rootCssOptionsCode}
}
` : "";
  const directivesCode = directives.filter((directive) => !sourceFile.getText().includes(directive)).join("\n");
  sourceFile.insertText(0, `${directivesCode}${rootCssOptions}`);
  await sourceFile.save();
}
async function tailwindConfiguration() {
  const engine = await getEngine();
  if (!engine) {
    console.log("Workspace information is missing.");
    return;
  }
  if (engine === "vite" /* Vite */) {
    await updateViteMainCSS();
  } else if (engine === "nuxt" /* Nuxt */) {
    await nuxtConfiguration();
    await updateNuxtMainCSS();
  }
  await modifyTailwindConfig(engine);
}

// src/utils/helpers/preset.ts
async function exportPresets(preset, presetName, components, projectType = "vue") {
  const cacheDirectory = getCacheDirectory();
  const currentDir = process.cwd();
  const engine = getEngine();
  const engineBasedPath = engine === "vite" /* Vite */ ? "src" : "";
  const presetDir = path2.join(
    currentDir,
    engineBasedPath,
    "presets",
    presetName
  );
  await fs3.promises.mkdir(presetDir, { recursive: true });
  let indexContent = "import global from './global.js';\n";
  for (let component of components) {
    const filePath = path2.join(
      cacheDirectory,
      "presets",
      projectType,
      preset,
      component,
      "index.js"
    );
    if (!fs3.existsSync(filePath)) {
      continue;
    }
    const componentDir = path2.join(presetDir, component);
    await fs3.promises.mkdir(componentDir, { recursive: true });
    const fileContent = await fs3.promises.readFile(filePath, "utf-8");
    await fs3.promises.writeFile(
      path2.join(presetDir, component, "index.js"),
      fileContent
    );
    const presetData = {
      name: presetName,
      type: preset,
      source: `https://github.com/primefaces/primevue-tailwind/tree/main/presets/${preset}`,
      components
    };
    await fs3.promises.writeFile(
      path2.join(presetDir, "preset.config.json"),
      JSON.stringify(presetData, null, 2)
    );
    indexContent += `import ${component} from './${component}';
`;
  }
  const globalContent = await fs3.promises.readFile(
    path2.join(cacheDirectory, "presets", projectType, preset, "global.js"),
    "utf-8"
  );
  await fs3.promises.writeFile(
    path2.join(presetDir, "global.js"),
    globalContent
  );
  indexContent += "\nexport default {\n    global,\n    " + components.join(",\n    ") + "\n};";
  await fs3.promises.writeFile(path2.join(presetDir, "index.js"), indexContent);
  await addPresetToPrimeConfig({
    name: presetName,
    base: preset,
    path: presetDir
  });
  return presetDir;
}
async function presetSelection(projectType = "vue") {
  const cacheDirectory = getCacheDirectory();
  let builder;
  builder = JSON.parse(
    fs3.readFileSync(
      path2.join(cacheDirectory, "presets", projectType, "builder.json"),
      "utf-8"
    )
  );
  const componentChoices = Object.values(builder.data).flatMap(
    (category) => category.components.filter((component) => !component.disabled).map((component) => ({
      name: component.name,
      value: component.path,
      checked: !component.disabled,
      disabled: component.disabled
    }))
  );
  let presetCohices = builder.presets.map((preset) => ({
    name: preset.name,
    value: preset.value
  }));
  presetCohices = presetCohices.filter(
    (preset) => preset.value === "lara"
  );
  presetCohices.unshift({ name: "None", value: "none" });
  const presetAnswer = await inquirer.prompt({
    type: "list",
    name: "preset",
    message: "Which preset do you want to use?",
    choices: presetCohices
  });
  if (presetAnswer.preset === "none") {
    return { presetDir: "", name: "", components: "" };
  }
  const questions = [
    {
      type: "input",
      name: "name",
      message: "What is your preset name?",
      default: "myPreset"
    },
    {
      type: "checkbox",
      name: "components",
      message: "Which components do you want to use?",
      choices: componentChoices
    }
  ];
  let presetDir;
  const answers = await inquirer.prompt(questions);
  const { name, components } = answers;
  presetDir = await exportPresets(presetAnswer.preset, name, components);
  return { presetDir, name, components };
}
async function deleteFolderRecursive(folderPath) {
  if (fs3.existsSync(folderPath)) {
    for (const entry of await fs3.promises.readdir(folderPath, {
      withFileTypes: true
    })) {
      const currentPath = path2.join(folderPath, entry.name);
      if (entry.isDirectory()) {
        await deleteFolderRecursive(currentPath);
      } else {
        await fs3.promises.unlink(currentPath);
      }
    }
    await fs3.promises.rmdir(folderPath);
  }
}
async function updateBuilderJson(builderJsonPath, presetNames) {
  try {
    const builderData = JSON.parse(
      await fs3.promises.readFile(builderJsonPath, "utf8")
    );
    builderData.presets = presetNames.map((name) => ({
      name,
      value: name.toLowerCase()
    }));
    await fs3.promises.writeFile(
      builderJsonPath,
      JSON.stringify(builderData, null, 2)
    );
  } catch (error) {
    console.error("Error updating builder.json:", error);
  }
}
async function cloneAndFilterRepo(repoUrl, branchName, subFolderPath, outputPath, additionalFiles) {
  const cacheDirectory = getCacheDirectory();
  try {
    const execProm = util.promisify(exec2);
    const tempDir = path2.join(cacheDirectory, "temp-clone");
    console.log(`Clontoing the reposiry ${repoUrl}...`);
    await execProm(
      `git clone --depth 1 --branch ${branchName} ${repoUrl} "${tempDir}"`
    );
    await fs3.promises.mkdir(outputPath, { recursive: true });
    console.log(`Moving the folder ${subFolderPath}...`);
    const subFolderFullPath = path2.join(tempDir, subFolderPath);
    const subFolderContents = await fs3.promises.readdir(subFolderFullPath);
    for (const content of subFolderContents) {
      await fs3.promises.rename(
        path2.join(subFolderFullPath, content),
        path2.join(outputPath, content)
      );
    }
    try {
      const presetNames = await fs3.promises.readdir(
        path2.join(outputPath)
      );
      for (const file of additionalFiles) {
        const fullFilePath = path2.join(tempDir, file);
        const destFilePath = path2.join(outputPath, path2.basename(file));
        if (fs3.existsSync(fullFilePath)) {
          await fs3.promises.mkdir(outputPath, { recursive: true });
          await fs3.promises.copyFile(fullFilePath, destFilePath);
        }
      }
      const builderJsonPath = path2.join(outputPath, "builder.json");
      await updateBuilderJson(builderJsonPath, presetNames);
    } catch (error) {
      console.error("Error during additional file handling:", error);
      deleteCacheDirectory();
    }
    await deleteFolderRecursive(tempDir);
    console.log(
      `The '${subFolderPath}' folder and additional files have been successfully saved.`
    );
  } catch (error) {
    console.error("Error during repository clone and filter:", error);
    deleteCacheDirectory();
  }
}
function deleteCacheDirectory() {
  const cacheDirectory = getCacheDirectory();
  fs3.rm(cacheDirectory, { recursive: true }, (err) => {
    if (err) {
      console.error(`Error deleting cache directory: ${err.message}`);
    } else {
      console.log("Cache folder removed.");
    }
  });
}
function getCacheDirectory() {
  const homeDirectory = os.homedir();
  const cacheDirectory = path2.join(homeDirectory, ".prime-cli");
  if (!fs3.existsSync(cacheDirectory)) {
    fs3.mkdirSync(cacheDirectory, { recursive: true });
  }
  return cacheDirectory;
}
function arePresetsCached(cacheDirectory, subFolderPath) {
  const presetsPath = path2.join(cacheDirectory, subFolderPath);
  return fs3.existsSync(presetsPath);
}
async function handlePresets(projectName = "primevue") {
  const repoUrl = `https://github.com/primefaces/${projectName}-tailwind.git`;
  const branchName = "prod";
  const subFolderPath = `presets`;
  const folderPath = `presets/vue`;
  const additionalFiles = ["assets/data/builder.json", "package.json"];
  const cacheDirectory = getCacheDirectory();
  if (arePresetsCached(cacheDirectory, folderPath)) {
    console.log("Using cached presets.");
  } else {
    console.log("Downloading presets...");
    const outputPath = path2.join(cacheDirectory, folderPath);
    await cloneAndFilterRepo(
      repoUrl,
      branchName,
      subFolderPath,
      outputPath,
      additionalFiles
    );
    console.log("Presets downloaded and cached.");
  }
}
var downloadPresets = async () => {
  await handlePresets();
  return await presetSelection();
};
var updateCachedPresets = async () => {
  deleteCacheDirectory();
  await handlePresets();
};
var updateWorkspacePreset = async () => {
  const presetPathAnswer = await inquirer.prompt([
    {
      type: "input",
      name: "path",
      message: "What is your preset or presets path?",
      default: "myPreset"
    }
  ]);
  const presetPath = presetPathAnswer.path;
  const currentDir = process.cwd();
  const presetDir = path2.join(currentDir, presetPath);
  const presetConfigPath = path2.join(presetDir, "preset.config.json");
  const presetConfig = JSON.parse(fs3.readFileSync(presetConfigPath, "utf-8"));
  const { type, components } = presetConfig;
  await compareAndApplyUpdates(presetDir, type, components);
};
async function addPresetToPrimeConfig(presetDetails) {
  const primeConfigPath = path2.join(process.cwd(), "prime.config.json");
  let primeConfig = { presets: [] };
  if (fs3.existsSync(primeConfigPath)) {
    const configContents = await fs3.promises.readFile(
      primeConfigPath,
      "utf-8"
    );
    primeConfig = JSON.parse(configContents);
  }
  const existingPresetIndex = primeConfig.presets.findIndex(
    (p) => p.name === presetDetails.name
  );
  if (existingPresetIndex !== -1) {
    primeConfig.presets[existingPresetIndex] = presetDetails;
  } else {
    primeConfig.presets.push(presetDetails);
  }
  await fs3.promises.writeFile(
    primeConfigPath,
    JSON.stringify(primeConfig, null, 2)
  );
}
async function compareAndApplyUpdates(presetDir, preset, components) {
  const cachedPresetDir = path2.join(
    getCacheDirectory(),
    "presets",
    "vue",
    preset
  );
  try {
    for (const component of components) {
      await overwriteComponent(component, presetDir, cachedPresetDir);
    }
    console.log("\u2705 Project preset components updated!");
  } catch (error) {
    console.error("Error updating preset components:", error);
  }
}
async function overwriteComponent(component, projectPresetDir, cachedPresetDir) {
  console.log(`Updating component ${component}...`);
  const sourcePath = path2.join(cachedPresetDir, component, "index.js");
  const destinationPath = path2.join(projectPresetDir, component);
  if (!fs3.existsSync(sourcePath)) {
    console.error(`Source component ${component} not found in cache.`);
    return;
  }
  if (!fs3.existsSync(destinationPath)) {
    console.error(
      `Destination component ${component} not found in project.`
    );
    return;
  }
  const indexJsPath = path2.join(destinationPath, "index.js");
  if (fs3.existsSync(indexJsPath)) {
    fs3.unlinkSync(indexJsPath);
    console.log(`index.js removed from ${destinationPath}`);
  } else {
    console.error(`index.js not found in ${destinationPath}`);
  }
  await fs3.promises.copyFile(
    sourcePath,
    path2.join(destinationPath, "index.js")
  );
}

// src/utils/data/engines.json
var engines_default = {
  vue: [
    {
      name: "Nuxt",
      value: "nuxt"
    },
    {
      name: "Vite",
      value: "vite"
    }
  ],
  angular: [],
  react: []
};

// src/utils/helpers/vite.ts
import fs4 from "fs";
import path3 from "path";
import { exec as exec3, spawn } from "child_process";

// src/utils/helpers/answers.ts
import inquirer2 from "inquirer";
var pickStyledTheme = async () => {
  const styledAnswer = await inquirer2.prompt([
    {
      type: "list",
      name: "style",
      message: "Pick your path.",
      choices: [
        {
          name: "Styled",
          value: "styled"
        },
        {
          name: "Styled QuickStart",
          value: "styled-quickstart"
        },
        {
          name: "Unstyled",
          value: "unstyled"
        }
      ]
    }
  ]);
  return styledAnswer.style;
};
var pickPrimeIcons = async () => {
  const answers = await inquirer2.prompt([
    {
      type: "confirm",
      name: "installPrimeIcons",
      message: "Do you want to install PrimeIcons?"
    }
  ]);
  return answers.installPrimeIcons;
};

// src/utils/helpers/vite.ts
import inquirer3 from "inquirer";
var spinner = new spinner_default();
function sanitizePresetName(presetDirectory) {
  let presetName = presetDirectory.split(path3.sep).pop() || "";
  presetName = presetName.replace(/[^a-zA-Z0-9_$]/g, "_");
  if (!/^[a-zA-Z_$]/.test(presetName)) {
    presetName = "_" + presetName;
  }
  return presetName;
}
function addPrimeVuePresetOption(mainFileContent, mainFilePath, presetDirectory) {
  const presetName = sanitizePresetName(presetDirectory);
  const relativePresetPath = path3.relative(
    path3.dirname(mainFilePath),
    presetDirectory
  );
  const formattedRelativePath = relativePresetPath.replace(/\\/g, "/").startsWith(".") ? relativePresetPath.replace(/\\/g, "/") : `./${relativePresetPath.replace(/\\/g, "/")}`;
  const importStatement = `import ${presetName} from "${formattedRelativePath}";
`;
  if (!mainFileContent.includes(importStatement)) {
    mainFileContent = importStatement + mainFileContent;
  }
  const primeVueUseRegex = /(\.use\(PrimeVue)(, \{[^\}]*\})?\)/;
  mainFileContent = mainFileContent.replace(
    primeVueUseRegex,
    (match, primeVueUse, existingOptions) => {
      let updatedOptions;
      if (existingOptions) {
        if (/\bpt:/.test(existingOptions)) {
          updatedOptions = existingOptions.replace(
            /(pt:\s*)[^,}]+/,
            `$1${presetName}`
          );
        } else {
          updatedOptions = existingOptions.replace(
            /\{/,
            `{ pt: ${presetName}, `
          );
        }
      } else {
        updatedOptions = `, { pt: ${presetName} }`;
      }
      return `${primeVueUse}${updatedOptions})`;
    }
  );
  return mainFileContent;
}
async function setPresetForVite(projectPath, presetDirectory, preset) {
  const isTypescript = hasDependency("typescript");
  let fileType = isTypescript ? "ts" : "js";
  const mainFilePath = path3.join(projectPath, `src/main.${fileType}`);
  let mainFileContent = fs4.readFileSync(mainFilePath, "utf8");
  const lines = addPrimeVuePresetOption(
    mainFileContent,
    mainFilePath,
    presetDirectory
  ).split("\n");
  mainFileContent = lines.join("\n");
  fs4.writeFileSync(mainFilePath, mainFileContent, "utf8");
  await primeVueViteConfiguration(
    projectPath,
    mainFilePath,
    fileType,
    "PrimeVueUnstyled",
    preset
  );
}
async function createVueViteProject(projectName, typescript = false) {
  const isWindows = process.platform === "win32";
  const createCommand = (isWindows ? "npm " : "") + `create vite@latest ${projectName} -- --template ${typescript ? "vue-ts" : "vue"}`;
  const cmd = isWindows ? "cmd" : "npm";
  const args = isWindows ? ["/c"] : [];
  args.push(createCommand);
  return new Promise((resolve, reject) => {
    const vueCreate = spawn(cmd, args, { stdio: "inherit", shell: true });
    vueCreate.on("error", reject);
    vueCreate.on("close", async (code) => {
      if (code !== 0) {
        reject(new Error("Failed to create Vite project"));
      } else {
        process.chdir(projectName);
        await installPrimeVueViteV4();
        resolve(true);
      }
    });
  });
}
async function installPrimeVueViteV4(useConfiguration = true) {
  const installPrimeIcons = await pickPrimeIcons();
  await exec3(
    `npm install primevue@beta ${installPrimeIcons ? "&& npm install primeicons" : ""}`,
    async (error, stdout, stderr) => {
      spinner.spinnerSuccess(
        "PrimeVue installation completed successfully."
      );
      if (useConfiguration) {
        await configuration();
      }
      console.log("\u2705 PrimeVue setup completed successfully.");
    }
  );
}
async function selectStyledTheme() {
  const answers = await inquirer3.prompt([
    {
      type: "list",
      name: "selectedPreset",
      message: "Select a PrimeVue configuration",
      choices: [
        { name: "Aura", value: "aura" },
        { name: "Lara", value: "Lara" },
        { name: "Nora", value: "Nora" }
      ]
    }
  ]);
  return answers.selectedPreset;
}
async function advancedPrimeVueViteSetup(projectPath, selectedType, preset) {
  if (selectedType === "PrimeVue") {
    const selectedPreset = await selectStyledTheme();
    const presetName = selectedPreset;
    const pathName = presetName.toLowerCase();
    console.log(selectedPreset);
    return {
      options: `{ theme: { preset: ${presetName}, options: { prefix: "p", darkModeSelector: "system", cssLayer: false }} }`,
      imports: [
        {
          path: `import ${presetName} from 'primevue/themes/${pathName}';`,
          name: presetName
        }
      ]
    };
  } else if (selectedType === "PrimeVueUnstyled") {
    return {
      options: `{ unstyled: true }`,
      imports: []
    };
    const { presetDir, name } = preset ? preset : await presetSelection();
    const engineBasedPath = "src";
    const srcFolderPath = path3.join(projectPath, engineBasedPath);
    if (!fs4.existsSync(srcFolderPath)) {
      console.log("Invalid project path.");
    }
    if (!name || name === "") {
      console.log("Failed to download presets.");
    }
    const presetRelativePath = calculateRelativeImport(
      presetDir,
      srcFolderPath
    );
    const presetName = name.charAt(0).toUpperCase() + name.slice(1);
    const presetImport = `import ${presetName} from "${presetRelativePath}";`;
    const imports = presetImport && presetName ? [{ path: presetImport, name: presetName }] : [];
    await installTailwind();
    return {
      options: `{ unstyled: true, pt: ${presetName} }`,
      imports: []
    };
  } else {
    return {
      options: ``
    };
  }
}
async function importPrimeIcons(mainFilePath) {
  const packagePath = "primeicons/primeicons.css";
  const primeIconsCssPath = `import "${packagePath}"
`;
  const projectPath = process.cwd();
  if (!fs4.existsSync(mainFilePath)) {
    console.log("Main file not found. PrimeIcons import failed.");
    return;
  }
  let mainCssContent = fs4.readFileSync(mainFilePath, "utf8");
  if (!mainCssContent.includes(packagePath)) {
    mainCssContent = primeIconsCssPath + mainCssContent;
    fs4.writeFileSync(mainFilePath, mainCssContent);
    console.log("\u2705 PrimeIcons imported successfully.");
  }
}
async function primeVueViteConfiguration(projectPath, mainFilePath, fileType, selectedType, preset) {
  let options;
  let mainFileContent = fs4.readFileSync(mainFilePath, "utf8");
  let setup = await advancedPrimeVueViteSetup(
    projectPath,
    selectedType,
    preset
  );
  options = setup?.options;
  if (selectedType === "PrimeVue" || selectedType === "PrimeVueUnstyled") {
    let imports = setup?.imports;
    if (imports) {
      imports.forEach((importStatement) => {
        if (!isImported(importStatement.name, mainFileContent)) {
          mainFileContent = importStatement.path + "\n" + mainFileContent;
        }
      });
    }
  }
  const existingImportRegex = /import\s+(?:\w+,\s*)?{?\s*(.*?)\s*}?\s+from\s+['"]primevue\/config['"]/;
  const importMatch = mainFileContent.match(existingImportRegex);
  let existingType = null;
  if (importMatch) {
    const configImports = importMatch?.[1].split(",").map((name) => name.trim());
    if (configImports) {
      if (configImports.some(
        (importName) => importName === "PrimeVueUnstyled"
      )) {
        existingType = "PrimeVueUnstyled";
      } else if (configImports.some((importName) => importName === "PrimeVue")) {
        existingType = "PrimeVue";
      }
    }
  }
  if (existingType !== selectedType) {
    mainFileContent = importPrimeVueVite(
      mainFileContent,
      selectedType,
      existingType
    );
  }
  const isVariable = isCreateAppAssignedToVariable(mainFileContent);
  if (isVariable) {
    mainFileContent = addWithVariable4(
      mainFileContent,
      selectedType,
      options
    );
  } else {
    mainFileContent = addWithoutVariable4(
      mainFileContent,
      selectedType,
      options
    );
  }
  fs4.writeFileSync(
    path3.join(projectPath, `src/main.${fileType}`),
    mainFileContent
  );
  console.log(`\u2705 PrimeVue configured with ${selectedType}!`);
}
function removeUsePrimeVue(mainFileContent) {
  const usePattern = /\.use\(PrimeVue(?:Styled|Unstyled)?\s*[^)]*\)/gs;
  const outputCode = mainFileContent.replaceAll(usePattern, "");
  return outputCode;
}
function removeUsePrimeVueVariable(mainFileContent, variableName) {
  const usePrimeVueRegex = new RegExp(
    `${variableName}\\.use\\((PrimeVue|PrimeVueUnstyled), \\{[\\s\\S]*?\\}\\);`,
    "g"
  );
  const outputCode = mainFileContent.replaceAll(usePrimeVueRegex, "");
  return outputCode;
}
function isImported(importName, content) {
  const importRegex = new RegExp(
    `import\\s+(\\* as )?${importName}(,\\s*\\{[^}]*\\})?\\s+from\\s+['"][^'"]+['"];`,
    "g"
  );
  const namedImportRegex = new RegExp(
    `import\\s+\\{[^}]*${importName}[^}]*\\}\\s+from\\s+['"][^'"]+['"];`,
    "g"
  );
  return importRegex.test(content) || namedImportRegex.test(content);
}
function addWithoutVariable4(mainFileContent, selectedType = "PrimeVue", options) {
  mainFileContent = removeUsePrimeVue(mainFileContent);
  const createAppPattern = /createApp\(\s*(\w+)\s*\)/;
  const createAppMatch = mainFileContent.match(createAppPattern);
  if (createAppMatch) {
    const appName = createAppMatch[1];
    mainFileContent = mainFileContent.replace(
      `createApp(${appName})`,
      `createApp(${appName}).use(${selectedType}${options ? `, ${options}` : ""})`
    );
  } else {
    console.error("Cannot find a suitable createApp() call to modify.");
  }
  return mainFileContent;
}
function addWithVariable4(mainFileContent, selectedType = "PrimeVue", options) {
  const createAppPattern = /const\s+(\w+)\s*=\s*createApp\(\s*(\w+)\s*\)/;
  const createAppMatch = mainFileContent.match(createAppPattern);
  if (createAppMatch) {
    const appName = createAppMatch[2];
    const variableName = createAppMatch[1];
    mainFileContent = removeUsePrimeVueVariable(
      mainFileContent,
      variableName
    );
    mainFileContent = removeUsePrimeVue(mainFileContent);
    mainFileContent = mainFileContent.replace(
      `createApp(${appName})`,
      `createApp(${appName}).use(${selectedType}${options ? `, ${options}` : ""})`
    );
  } else {
    console.error("Cannot find a suitable createApp() call to modify.");
  }
  return mainFileContent;
}
function importPrimeVueVite(mainFileContent, selectedType, existingType) {
  const importStatement = `import ${selectedType} from 'primevue/config';
`;
  if (existingType && existingType !== selectedType) {
    mainFileContent = mainFileContent.replaceAll(
      existingType,
      selectedType
    );
    return mainFileContent;
  }
  mainFileContent = importStatement + mainFileContent;
  return mainFileContent;
}
async function configuration() {
  const answers = await inquirer3.prompt([
    {
      type: "list",
      name: "selectedType",
      message: "Select a PrimeVue configuration",
      choices: [
        { name: "Styled", value: "PrimeVue" },
        { name: "Unstyled", value: "PrimeVueUnstyled" }
      ]
    }
  ]);
  const projectPath = process.cwd();
  const isTypescript = hasDependency("typescript");
  const fileType = isTypescript ? "ts" : "js";
  const mainFilePath = path3.join(projectPath, `src/main.${fileType}`);
  const primeIconsInstalled = hasDependency("primeicons");
  if (primeIconsInstalled) {
    await importPrimeIcons(mainFilePath);
  }
  await primeVueViteConfiguration(
    projectPath,
    mainFilePath,
    fileType,
    answers.selectedType
  );
}
function isCreateAppAssignedToVariable(mainFileContent) {
  const createAppPattern = /(const\s+)?(\w+)?\s*=\s*createApp\((\w+)\)/;
  return createAppPattern.test(mainFileContent);
}

// src/utils/helpers/nuxt.ts
import { exec as exec4, spawn as spawn2 } from "child_process";
import { Project as Project2, Node as Node2, StructureKind } from "ts-morph";
import path4 from "path";
import fs5 from "fs";
var spinner2 = new spinner_default();
async function updateNuxtMainFile(nuxtConfigPath, installPrimeIcons = false) {
  const project = new Project2();
  const sourceFile = project.addSourceFileAtPath(
    nuxtConfigPath + "/nuxt.config.ts"
  );
  const exportAssignment = sourceFile.getExportAssignment(() => true);
  const configObject = exportAssignment?.getExpression();
  if (configObject && Node2.isCallExpression(configObject)) {
    const args = configObject.getArguments();
    if (args.length > 0 && Node2.isObjectLiteralExpression(args[0])) {
      const configObjectLiteral = args[0];
      const modulesProperty = configObjectLiteral.getProperty("modules");
      if (modulesProperty && Node2.isPropertyAssignment(modulesProperty)) {
        const initializer = modulesProperty.getInitializer();
        if (initializer && Node2.isArrayLiteralExpression(initializer)) {
          const elements = initializer.getElements();
          if (!elements.some(
            (e) => e.getText().includes("nuxt-primevue")
          )) {
            initializer.addElement("'nuxt-primevue'");
          }
        }
      } else {
        configObjectLiteral.addProperty({
          name: "modules",
          kind: StructureKind.PropertyAssignment,
          initializer: "['nuxt-primevue']"
        });
      }
      const cssProperty = configObjectLiteral.getProperty("css");
      if (cssProperty && Node2.isPropertyAssignment(cssProperty)) {
        const initializer = cssProperty.getInitializer();
        if (initializer && Node2.isArrayLiteralExpression(initializer)) {
          const elements = initializer.getElements();
          const primeIconsCssPath = "'primeicons/primeicons.css'";
          const primevueThemeElement = elements.find(
            (e) => e.getText().includes("primevue/resources/themes")
          );
          if (primevueThemeElement) {
            initializer.removeElement(primevueThemeElement);
          }
          if (installPrimeIcons && !elements.some(
            (e) => e.getText().includes("primeicons.css")
          )) {
            initializer.addElement(primeIconsCssPath);
          }
        }
      } else {
        if (installPrimeIcons) {
          configObjectLiteral.addProperty({
            name: "css",
            kind: StructureKind.PropertyAssignment,
            initializer: `['primeicons/primeicons.css']`
          });
        }
      }
      await project.save();
      const themeName = await pickStyledTheme();
      const installTheme = themeName !== "unstyled";
      const quickstart = themeName === "styled-quickstart";
      const oldPrimeVueProperty = configObjectLiteral.getProperty("primevue");
      if (oldPrimeVueProperty) {
        oldPrimeVueProperty.remove();
      }
      if (installTheme) {
        if (quickstart) {
          configObjectLiteral.addPropertyAssignment({
            name: "primevue",
            initializer: "{ usePrimeVue: true }"
          });
        } else {
          const primeonePathImport = sourceFile.getImportDeclaration(
            (declaration) => {
              const moduleSpecifier = declaration.getModuleSpecifier().getLiteralText();
              return moduleSpecifier === "primevue/themes/primeone";
            }
          );
          if (!primeonePathImport) {
            sourceFile.addImportDeclaration({
              defaultImport: "PrimeOne",
              moduleSpecifier: "primevue/themes/primeone"
            });
          }
          const auraPathImport = sourceFile.getImportDeclaration(
            (declaration) => {
              const moduleSpecifier = declaration.getModuleSpecifier().getLiteralText();
              return moduleSpecifier === "primevue/themes/primeone/aura";
            }
          );
          if (!auraPathImport) {
            sourceFile.addImportDeclaration({
              defaultImport: "Aura",
              moduleSpecifier: "primevue/themes/primeone/aura"
            });
          }
          configObjectLiteral.addPropertyAssignment({
            name: "primevue",
            initializer: '{ base: PrimeOne, preset: Aura, options: { prefix: "p", darkModeSelector: "system", cssLayer: false} }'
          });
        }
        await project.save();
      } else {
        const { presetDir } = await presetSelection();
        await setPresetForNuxt(nuxtConfigPath, presetDir, project);
        project.save();
        await installTailwind();
      }
      await project.save();
      console.log("\u2705 Nuxt config updated successfully.");
    }
  } else {
    console.log(
      "No config object found. Please check your nuxt config file."
    );
  }
}
function calculateRelativeImport2(presetDirectory, nuxtConfigPath) {
  const normalizedPresetDir = path4.normalize(presetDirectory);
  const normalizedNuxtConfigPath = path4.normalize(nuxtConfigPath);
  let relativePath = path4.relative(
    normalizedNuxtConfigPath,
    normalizedPresetDir
  );
  relativePath = relativePath.replace(/\\/g, "/");
  if (!relativePath.startsWith(".")) {
    relativePath = "./" + relativePath;
  }
  const importPTValue = `path.resolve(__dirname, '${relativePath}')`;
  return importPTValue;
}
async function setPresetForNuxt(nuxtConfigPath, presetDirectory, baseProject) {
  if (!fs5.existsSync(nuxtConfigPath) || !fs5.existsSync(presetDirectory)) {
    console.log("Nuxt config or preset directory not found.");
    return;
  }
  const project = baseProject ? baseProject : new Project2();
  const sourceFile = project.addSourceFileAtPath(
    nuxtConfigPath + "/nuxt.config.ts"
  );
  const exportAssignment = sourceFile.getExportAssignment(() => true);
  const configObject = exportAssignment?.getExpression();
  if (configObject && Node2.isCallExpression(configObject)) {
    const args = configObject.getArguments();
    const configObjectLiteral = args[0];
    if (args.length > 0 && Node2.isObjectLiteralExpression(configObjectLiteral)) {
      let formattedPath = calculateRelativeImport2(
        presetDirectory,
        nuxtConfigPath
      );
      let importPTValue = `from: "${formattedPath}"`;
      let pathImport = sourceFile.getImportDeclaration((declaration) => {
        const moduleSpecifier = declaration.getModuleSpecifier().getLiteralText();
        return moduleSpecifier === "path";
      });
      if (!pathImport) {
        sourceFile.addImportDeclaration({
          defaultImport: "path",
          moduleSpecifier: "path"
        });
      }
      configObjectLiteral.addPropertyAssignment({
        name: "primevue",
        initializer: `{ options: { unstyled: true, importPT: { ${importPTValue}}}}`
      });
      await project.save();
    }
  } else {
    console.log(
      "No config object found. Please check your Nuxt config file."
    );
  }
}
async function createNuxtVueProject(projectName) {
  const isWindows = process.platform === "win32";
  const cmd = isWindows ? "cmd" : "npx";
  const args = isWindows ? ["/c", `npx nuxi@latest init ${projectName}`] : [`npx nuxi@latest init ${projectName}`];
  return new Promise((resolve, reject) => {
    const vueCreate = spawn2(cmd, args, { stdio: "inherit", shell: true });
    vueCreate.on("error", reject);
    vueCreate.on("close", (code) => {
      if (code !== 0) {
        reject(new Error("Failed to create Nuxt Vue project"));
      } else {
        resolve(true);
      }
    });
  });
}
async function configureNuxtPrimeVue(unstyled = false) {
  const installPrimeIcons = await pickPrimeIcons();
  await updateNuxtMainFile(".", installPrimeIcons.unstyled);
}
async function installPrimeVueNuxt() {
  const primeIconsInstall = await pickPrimeIcons();
  spinner2.updateSpinnerText(
    "Installing PrimeVue and PrimeVue Nuxt module..."
  );
  await exec4(
    `npm install primevue@beta && npm install --save-dev nuxt-primevue@latest${primeIconsInstall ? "&& npm install primeicons" : ""}`,
    async (error, stdout, stderr) => {
      spinner2.spinnerSuccess(
        "PrimeVue and PrimeVue Nuxt module installed successfully."
      );
      if (error) {
        console.error(`Error installing nuxt-primevue: ${error}`);
        return;
      }
      await updateNuxtMainFile(".", primeIconsInstall);
    }
  );
}

// src/routes/widgets.ts
import { Command } from "commander";
var widgets = new Command("vue").description("PrimeVue CLI commands");
var spinner3 = new spinner_default();
widgets.command("preset").action(async () => {
  const presetConfig = await downloadPresets();
  let presetDir = presetConfig?.presetDir;
  let name = presetConfig?.name;
  if (!presetDir) {
    console.log("Failed to download presets.");
    return;
  }
  const setup = await inquirer4.prompt([
    {
      type: "confirm",
      name: "setup",
      message: "Would you like to set up your project with PrimeVue presets now?"
    }
  ]);
  if (!setup.setup) {
    return;
  }
  const primevueInstalled = hasDependency("primevue");
  const { subTypes } = checkProjectTypes();
  if (!primevueInstalled) {
    const installPrimeVue = await inquirer4.prompt([
      {
        type: "confirm",
        name: "installPrimeVue",
        message: "PrimeVue is not installed. Do you want to install PrimeVue?"
      }
    ]);
    if (!installPrimeVue.installPrimeVue) {
      console.log(
        "PrimeVue is not installed. Please install PrimeVue to use presets."
      );
      return;
    }
  }
  if (subTypes.vite) {
    if (!primevueInstalled || !checkPrimeVueV4()) {
      await installPrimeVueViteV4(false);
    }
    await setPresetForVite(cwd(), presetDir, { presetDir, name });
  } else if (subTypes.nuxt) {
    await setPresetForNuxt(cwd(), presetDir);
  }
  await installTailwind();
});
widgets.command("update-cached-presets").action(async () => {
  await updateCachedPresets();
});
widgets.command("create").action(async () => {
  try {
    const engineChoices = engines_default.vue.map((engine) => {
      return {
        ...engine
      };
    });
    const engineTypeAnswers = await inquirer4.prompt([
      {
        type: "list",
        name: "engineType",
        message: `Which engine do you want to use?`,
        choices: engineChoices
      }
    ]);
    const selectedEngine = engineTypeAnswers.engineType;
    const projectNameAnswers = await inquirer4.prompt([
      {
        type: "input",
        name: "projectName",
        default: "primevue-app",
        message: `What is your project name?`
      }
    ]);
    if (selectedEngine === "vite") {
      const typescriptAnswers = await inquirer4.prompt([
        {
          type: "confirm",
          name: "typescript",
          message: "Would you like to use TypeScript?"
        }
      ]);
      await createVueViteProject(
        projectNameAnswers.projectName,
        typescriptAnswers.typescript
      );
    } else {
      console.log("Nuxt is not supported for beta version.");
      return;
      await createNuxtVueProject(projectNameAnswers.projectName);
      await chdir("./" + projectNameAnswers.projectName);
      await installPrimeVueNuxt();
      console.log(
        "Nuxt and PrimeVue installation completed successfully. You're ready to code! Project directory: cd " + projectNameAnswers.projectName
      );
    }
  } catch (err) {
    console.error(err);
    spinner3.spinnerError("Failed to create Vue project");
  }
});
widgets.command("tw").action(async () => {
  const { framework, subTypes } = checkProjectTypes();
  if (framework !== "vue") {
    console.log(
      `You are using ${framework} framework. PrimeCLI will support other frameworks in the future.`
    );
    return;
  }
  modifyTailwindConfig(subTypes.vite ? "vite" /* Vite */ : "nuxt" /* Nuxt */);
});
widgets.command("configure").action(async () => {
  if (!hasDependency("nuxt")) {
    await configureNuxtPrimeVue();
  } else {
  }
});
widgets.command("update-preset").action(async () => {
  await updateCachedPresets();
  await updateWorkspacePreset();
});
widgets.command("clear-cache").action(async () => {
  await deleteCacheDirectory();
});
widgets.command("install").action(async () => {
  const { framework, subTypes } = checkProjectTypes();
  if (!checkBeta()) {
    process.exit(1);
  }
  if (framework !== "vue") {
    spinner3.spinnerInfo(
      `You are using ${framework} framework. PrimeCLI will support other frameworks in the future.`
    );
    return;
  }
  const selectedEngine = subTypes.vite ? "vite" : "nuxt";
  if (selectedEngine === "nuxt") {
    console.log("Nuxt is not supported for beta version.");
    return;
    await installPrimeVueNuxt();
  } else {
    await installPrimeVueViteV4();
  }
});

// src/index.ts
import { Command as Command2 } from "commander";

// src/utils/helpers/primeflex.ts
import inquirer5 from "inquirer";

// src/utils/helpers/twConverter.ts
import * as fs6 from "fs";
import * as path5 from "path";

// src/utils/data/translationDict.json
var translationDict_default = {
  grid: "grid grid-cols-12 gap-4",
  "grid-nogutter": "",
  "col-1": "col-span-1",
  "col-2": "col-span-2",
  "col-3": "col-span-3",
  "col-4": "col-span-4",
  "col-5": "col-span-5",
  "col-6": "col-span-6",
  "col-7": "col-span-7",
  "col-8": "col-span-8",
  "col-9": "col-span-9",
  "col-10": "col-span-10",
  "col-11": "col-span-11",
  "col-12": "col-span-12",
  "sm:col-1": "sm:col-span-1",
  "sm:col-2": "sm:col-span-2",
  "sm:col-3": "sm:col-span-3",
  "sm:col-4": "sm:col-span-4",
  "sm:col-5": "sm:col-span-5",
  "sm:col-6": "sm:col-span-6",
  "sm:col-7": "sm:col-span-7",
  "sm:col-8": "sm:col-span-8",
  "sm:col-9": "sm:col-span-9",
  "sm:col-10": "sm:col-span-10",
  "sm:col-11": "sm:col-span-11",
  "sm:col-12": "sm:col-span-12",
  "md:col-1": "md:col-span-1",
  "md:col-2": "md:col-span-2",
  "md:col-3": "md:col-span-3",
  "md:col-4": "md:col-span-4",
  "md:col-5": "md:col-span-5",
  "md:col-6": "md:col-span-6",
  "md:col-7": "md:col-span-7",
  "md:col-8": "md:col-span-8",
  "md:col-9": "md:col-span-9",
  "md:col-10": "md:col-span-10",
  "md:col-11": "md:col-span-11",
  "md:col-12": "md:col-span-12",
  "lg:col-1": "lg:col-span-1",
  "lg:col-2": "lg:col-span-2",
  "lg:col-3": "lg:col-span-3",
  "lg:col-4": "lg:col-span-4",
  "lg:col-5": "lg:col-span-5",
  "lg:col-6": "lg:col-span-6",
  "lg:col-7": "lg:col-span-7",
  "lg:col-8": "lg:col-span-8",
  "lg:col-9": "lg:col-span-9",
  "lg:col-10": "lg:col-span-10",
  "lg:col-11": "lg:col-span-11",
  "lg:col-12": "lg:col-span-12",
  "xl:col-1": "xl:col-span-1",
  "xl:col-2": "xl:col-span-2",
  "xl:col-3": "xl:col-span-3",
  "xl:col-4": "xl:col-span-4",
  "xl:col-5": "xl:col-span-5",
  "xl:col-6": "xl:col-span-6",
  "xl:col-7": "xl:col-span-7",
  "xl:col-8": "xl:col-span-8",
  "xl:col-9": "xl:col-span-9",
  "xl:col-10": "xl:col-span-10",
  "xl:col-11": "xl:col-span-11",
  "xl:col-12": "xl:col-span-12",
  "col-offset-0": "col-start-1",
  "col-offset-1": "col-start-2",
  "col-offset-2": "col-start-3",
  "col-offset-3": "col-start-4",
  "col-offset-4": "col-start-5",
  "col-offset-5": "col-start-6",
  "col-offset-6": "col-start-7",
  "col-offset-7": "col-start-8",
  "col-offset-8": "col-start-9",
  "col-offset-9": "col-start-10",
  "col-offset-10": "col-start-11",
  "col-offset-11": "col-start-12",
  "col-offset-12": "col-start-13",
  "sm:col-offset-0": "sm:col-start-1",
  "sm:col-offset-1": "sm:col-start-2",
  "sm:col-offset-2": "sm:col-start-3",
  "sm:col-offset-3": "sm:col-start-4",
  "sm:col-offset-4": "sm:col-start-5",
  "sm:col-offset-5": "sm:col-start-6",
  "sm:col-offset-6": "sm:col-start-7",
  "sm:col-offset-7": "sm:col-start-8",
  "sm:col-offset-8": "sm:col-start-9",
  "sm:col-offset-9": "sm:col-start-10",
  "sm:col-offset-10": "sm:col-start-11",
  "sm:col-offset-11": "sm:col-start-12",
  "sm:col-offset-12": "sm:col-start-13",
  "md:col-offset-0": "md:col-start-1",
  "md:col-offset-1": "md:col-start-2",
  "md:col-offset-2": "md:col-start-3",
  "md:col-offset-3": "md:col-start-4",
  "md:col-offset-4": "md:col-start-5",
  "md:col-offset-5": "md:col-start-6",
  "md:col-offset-6": "md:col-start-7",
  "md:col-offset-7": "md:col-start-8",
  "md:col-offset-8": "md:col-start-9",
  "md:col-offset-9": "md:col-start-10",
  "md:col-offset-10": "md:col-start-11",
  "md:col-offset-11": "md:col-start-12",
  "md:col-offset-12": "md:col-start-13",
  "lg:col-offset-0": "lg:col-start-1",
  "lg:col-offset-1": "lg:col-start-2",
  "lg:col-offset-2": "lg:col-start-3",
  "lg:col-offset-3": "lg:col-start-4",
  "lg:col-offset-4": "lg:col-start-5",
  "lg:col-offset-5": "lg:col-start-6",
  "lg:col-offset-6": "lg:col-start-7",
  "lg:col-offset-7": "lg:col-start-8",
  "lg:col-offset-8": "lg:col-start-9",
  "lg:col-offset-9": "lg:col-start-10",
  "lg:col-offset-10": "lg:col-start-11",
  "lg:col-offset-11": "lg:col-start-12",
  "lg:col-offset-12": "lg:col-start-13",
  "xl:col-offset-0": "xl:col-start-1",
  "xl:col-offset-1": "xl:col-start-2",
  "xl:col-offset-2": "xl:col-start-3",
  "xl:col-offset-3": "xl:col-start-4",
  "xl:col-offset-4": "xl:col-start-5",
  "xl:col-offset-5": "xl:col-start-6",
  "xl:col-offset-6": "xl:col-start-7",
  "xl:col-offset-7": "xl:col-start-8",
  "xl:col-offset-8": "xl:col-start-9",
  "xl:col-offset-9": "xl:col-start-10",
  "xl:col-offset-10": "xl:col-start-11",
  "xl:col-offset-11": "xl:col-start-12",
  "xl:col-offset-12": "xl:col-start-13",
  "text-0": "text-surface-0 dark:text-surface-900",
  "text-50": "text-surface-50 dark:text-surface-800",
  "text-100": "text-surface-100 dark:text-surface-700",
  "text-200": "text-surface-200 dark:text-surface-600",
  "text-300": "text-surface-300 dark:text-surface-500",
  "text-400": "text-surface-400 dark:text-surface-400",
  "text-500": "text-surface-500 dark:text-surface-300",
  "text-600": "text-surface-600 dark:text-surface-200",
  "text-700": "text-surface-700 dark:text-surface-100",
  "text-800": "text-surface-800 dark:text-surface-50",
  "text-900": "text-surface-900 dark:text-surface-0",
  "focus:text-0": "focus:text-surface-0 dark:focus:text-surface-900",
  "focus:text-50": "focus:text-surface-50 dark:focus:text-surface-800",
  "focus:text-100": "focus:text-surface-100 dark:focus:text-surface-700",
  "focus:text-200": "focus:text-surface-200 dark:focus:text-surface-600",
  "focus:text-300": "focus:text-surface-300 dark:focus:text-surface-500",
  "focus:text-400": "focus:text-surface-400 dark:focus:text-surface-400",
  "focus:text-500": "focus:text-surface-500 dark:focus:text-surface-300",
  "focus:text-600": "focus:text-surface-600 dark:focus:text-surface-200",
  "focus:text-700": "focus:text-surface-700 dark:focus:text-surface-100",
  "focus:text-800": "focus:text-surface-800 dark:focus:text-surface-50",
  "focus:text-900": "focus:text-surface-900 dark:focus:text-surface-0",
  "hover:text-0": "hover:text-surface-0 dark:hover:text-surface-900",
  "hover:text-50": "hover:text-surface-50 dark:hover:text-surface-800",
  "hover:text-100": "hover:text-surface-100 dark:hover:text-surface-700",
  "hover:text-200": "hover:text-surface-200 dark:hover:text-surface-600",
  "hover:text-300": "hover:text-surface-300 dark:hover:text-surface-500",
  "hover:text-400": "hover:text-surface-400 dark:hover:text-surface-400",
  "hover:text-500": "hover:text-surface-500 dark:hover:text-surface-300",
  "hover:text-600": "hover:text-surface-600 dark:hover:text-surface-200",
  "hover:text-700": "hover:text-surface-700 dark:hover:text-surface-100",
  "hover:text-800": "hover:text-surface-800 dark:hover:text-surface-50",
  "hover:text-900": "hover:text-surface-900 dark:hover:text-surface-0",
  "active:text-0": "active:text-surface-0 dark:active:text-surface-900",
  "active:text-50": "active:text-surface-50 dark:active:text-surface-800",
  "active:text-100": "active:text-surface-100 dark:active:text-surface-700",
  "active:text-200": "active:text-surface-200 dark:active:text-surface-600",
  "active:text-300": "active:text-surface-300 dark:active:text-surface-500",
  "active:text-400": "active:text-surface-400 dark:active:text-surface-400",
  "active:text-500": "active:text-surface-500 dark:active:text-surface-300",
  "active:text-600": "active:text-surface-600 dark:active:text-surface-200",
  "active:text-700": "active:text-surface-700 dark:active:text-surface-100",
  "active:text-800": "active:text-surface-800 dark:active:text-surface-50",
  "active:text-900": "active:text-surface-900 dark:active:text-surface-0",
  "surface-0": "bg-surface-0 dark:bg-surface-900",
  "surface-50": "bg-surface-50 dark:bg-surface-800",
  "surface-100": "bg-surface-100 dark:bg-surface-700",
  "surface-200": "bg-surface-200 dark:bg-surface-600",
  "surface-300": "bg-surface-300 dark:bg-surface-500",
  "surface-400": "bg-surface-400 dark:bg-surface-400",
  "surface-500": "bg-surface-500 dark:bg-surface-300",
  "surface-600": "bg-surface-600 dark:bg-surface-200",
  "surface-700": "bg-surface-700 dark:bg-surface-100",
  "surface-800": "bg-surface-800 dark:bg-surface-50",
  "surface-900": "bg-surface-900 dark:bg-surface-0",
  "focus:surface-0": "focus:bg-surface-0 dark:focus:bg-surface-900",
  "focus:surface-50": "focus:bg-surface-50 dark:focus:bg-surface-800",
  "focus:surface-100": "focus:bg-surface-100 dark:focus:bg-surface-700",
  "focus:surface-200": "focus:bg-surface-200 dark:focus:bg-surface-600",
  "focus:surface-300": "focus:bg-surface-300 dark:focus:bg-surface-500",
  "focus:surface-400": "focus:bg-surface-400 dark:focus:bg-surface-400",
  "focus:surface-500": "focus:bg-surface-500 dark:focus:bg-surface-300",
  "focus:surface-600": "focus:bg-surface-600 dark:focus:bg-surface-200",
  "focus:surface-700": "focus:bg-surface-700 dark:focus:bg-surface-100",
  "focus:surface-800": "focus:bg-surface-800 dark:focus:bg-surface-50",
  "focus:surface-900": "focus:bg-surface-900 dark:focus:bg-surface-0",
  "hover:surface-0": "hover:bg-surface-0 dark:hover:bg-surface-900",
  "hover:surface-50": "hover:bg-surface-50 dark:hover:bg-surface-800",
  "hover:surface-100": "hover:bg-surface-100 dark:hover:bg-surface-700",
  "hover:surface-200": "hover:bg-surface-200 dark:hover:bg-surface-600",
  "hover:surface-300": "hover:bg-surface-300 dark:hover:bg-surface-500",
  "hover:surface-400": "hover:bg-surface-400 dark:hover:bg-surface-400",
  "hover:surface-500": "hover:bg-surface-500 dark:hover:bg-surface-300",
  "hover:surface-600": "hover:bg-surface-600 dark:hover:bg-surface-200",
  "hover:surface-700": "hover:bg-surface-700 dark:hover:bg-surface-100",
  "hover:surface-800": "hover:bg-surface-800 dark:hover:bg-surface-50",
  "hover:surface-900": "hover:bg-surface-900 dark:hover:bg-surface-0",
  "active:surface-0": "active:bg-surface-0 dark:active:bg-surface-900",
  "active:surface-50": "active:bg-surface-50 dark:active:bg-surface-800",
  "active:surface-100": "active:bg-surface-100 dark:active:bg-surface-700",
  "active:surface-200": "active:bg-surface-200 dark:active:bg-surface-600",
  "active:surface-300": "active:bg-surface-300 dark:active:bg-surface-500",
  "active:surface-400": "active:bg-surface-400 dark:active:bg-surface-400",
  "active:surface-500": "active:bg-surface-500 dark:active:bg-surface-300",
  "active:surface-600": "active:bg-surface-600 dark:active:bg-surface-200",
  "active:surface-700": "active:bg-surface-700 dark:active:bg-surface-100",
  "active:surface-800": "active:bg-surface-800 dark:active:bg-surface-50",
  "active:surface-900": "active:bg-surface-900 dark:active:bg-surface-0",
  "border-0": "border-surface-0 dark:border-surface-900",
  "border-50": "border-surface-50 dark:border-surface-800",
  "border-100": "border-surface-100 dark:border-surface-700",
  "border-200": "border-surface-200 dark:border-surface-600",
  "border-300": "border-surface-300 dark:border-surface-500",
  "border-400": "border-surface-400 dark:border-surface-400",
  "border-500": "border-surface-500 dark:border-surface-300",
  "border-600": "border-surface-600 dark:border-surface-200",
  "border-700": "border-surface-700 dark:border-surface-100",
  "border-800": "border-surface-800 dark:border-surface-50",
  "border-900": "border-surface-900 dark:border-surface-0",
  "focus:border-0": "focus:border-surface-0 dark:focus:border-surface-900",
  "focus:border-50": "focus:border-surface-50 dark:focus:border-surface-800",
  "focus:border-100": "focus:border-surface-100 dark:focus:border-surface-700",
  "focus:border-200": "focus:border-surface-200 dark:focus:border-surface-600",
  "focus:border-300": "focus:border-surface-300 dark:focus:border-surface-500",
  "focus:border-400": "focus:border-surface-400 dark:focus:border-surface-400",
  "focus:border-500": "focus:border-surface-500 dark:focus:border-surface-300",
  "focus:border-600": "focus:border-surface-600 dark:focus:border-surface-200",
  "focus:border-700": "focus:border-surface-700 dark:focus:border-surface-100",
  "focus:border-800": "focus:border-surface-800 dark:focus:border-surface-50",
  "focus:border-900": "focus:border-surface-900 dark:focus:border-surface-0",
  "hover:border-0": "hover:border-surface-0 dark:hover:border-surface-900",
  "hover:border-50": "hover:border-surface-50 dark:hover:border-surface-800",
  "hover:border-100": "hover:border-surface-100 dark:hover:border-surface-700",
  "hover:border-200": "hover:border-surface-200 dark:hover:border-surface-600",
  "hover:border-300": "hover:border-surface-300 dark:hover:border-surface-500",
  "hover:border-400": "hover:border-surface-400 dark:hover:border-surface-400",
  "hover:border-500": "hover:border-surface-500 dark:hover:border-surface-300",
  "hover:border-600": "hover:border-surface-600 dark:hover:border-surface-200",
  "hover:border-700": "hover:border-surface-700 dark:hover:border-surface-100",
  "hover:border-800": "hover:border-surface-800 dark:hover:border-surface-50",
  "hover:border-900": "hover:border-surface-900 dark:hover:border-surface-0",
  "active:border-0": "active:border-surface-0 dark:active:border-surface-900",
  "active:border-50": "active:border-surface-50 dark:active:border-surface-800",
  "active:border-100": "active:border-surface-100 dark:active:border-surface-700",
  "active:border-200": "active:border-surface-200 dark:active:border-surface-600",
  "active:border-300": "active:border-surface-300 dark:active:border-surface-500",
  "active:border-400": "active:border-surface-400 dark:active:border-surface-400",
  "active:border-500": "active:border-surface-500 dark:active:border-surface-300",
  "active:border-600": "active:border-surface-600 dark:active:border-surface-200",
  "active:border-700": "active:border-surface-700 dark:active:border-surface-100",
  "active:border-800": "active:border-surface-800 dark:active:border-surface-50",
  "active:border-900": "active:border-surface-900 dark:active:border-surface-0",
  "bg-bluegray-50": "bg-slate-50",
  "bg-bluegray-100": "bg-slate-100",
  "bg-bluegray-200": "bg-slate-200",
  "bg-bluegray-300": "bg-slate-300",
  "bg-bluegray-400": "bg-slate-400",
  "bg-bluegray-500": "bg-slate-500",
  "bg-bluegray-600": "bg-slate-600",
  "bg-bluegray-700": "bg-slate-700",
  "bg-bluegray-800": "bg-slate-800",
  "bg-bluegray-900": "bg-slate-900",
  "text-bluegray-50": "text-slate-50",
  "text-bluegray-100": "text-slate-100",
  "text-bluegray-200": "text-slate-200",
  "text-bluegray-300": "text-slate-300",
  "text-bluegray-400": "text-slate-400",
  "text-bluegray-500": "text-slate-500",
  "text-bluegray-600": "text-slate-600",
  "text-bluegray-700": "text-slate-700",
  "text-bluegray-800": "text-slate-800",
  "text-bluegray-900": "text-slate-900",
  "border-bluegray-50": "border-slate-50",
  "border-bluegray-100": "border-slate-100",
  "border-bluegray-200": "border-slate-200",
  "border-bluegray-300": "border-slate-300",
  "border-bluegray-400": "border-slate-400",
  "border-bluegray-500": "border-slate-500",
  "border-bluegray-600": "border-slate-600",
  "border-bluegray-700": "border-slate-700",
  "border-bluegray-800": "border-slate-800",
  "border-bluegray-900": "border-slate-900",
  "focus:bg-bluegray-50": "focus:bg-slate-50",
  "focus:bg-bluegray-100": "focus:bg-slate-100",
  "focus:bg-bluegray-200": "focus:bg-slate-200",
  "focus:bg-bluegray-300": "focus:bg-slate-300",
  "focus:bg-bluegray-400": "focus:bg-slate-400",
  "focus:bg-bluegray-500": "focus:bg-slate-500",
  "focus:bg-bluegray-600": "focus:bg-slate-600",
  "focus:bg-bluegray-700": "focus:bg-slate-700",
  "focus:bg-bluegray-800": "focus:bg-slate-800",
  "focus:bg-bluegray-900": "focus:bg-slate-900",
  "focus:text-bluegray-50": "focus:text-slate-50",
  "focus:text-bluegray-100": "focus:text-slate-100",
  "focus:text-bluegray-200": "focus:text-slate-200",
  "focus:text-bluegray-300": "focus:text-slate-300",
  "focus:text-bluegray-400": "focus:text-slate-400",
  "focus:text-bluegray-500": "focus:text-slate-500",
  "focus:text-bluegray-600": "focus:text-slate-600",
  "focus:text-bluegray-700": "focus:text-slate-700",
  "focus:text-bluegray-800": "focus:text-slate-800",
  "focus:text-bluegray-900": "focus:text-slate-900",
  "focus:border-bluegray-50": "focus:border-slate-50",
  "focus:border-bluegray-100": "focus:border-slate-100",
  "focus:border-bluegray-200": "focus:border-slate-200",
  "focus:border-bluegray-300": "focus:border-slate-300",
  "focus:border-bluegray-400": "focus:border-slate-400",
  "focus:border-bluegray-500": "focus:border-slate-500",
  "focus:border-bluegray-600": "focus:border-slate-600",
  "focus:border-bluegray-700": "focus:border-slate-700",
  "focus:border-bluegray-800": "focus:border-slate-800",
  "focus:border-bluegray-900": "focus:border-slate-900",
  "hover:bg-bluegray-50": "hover:bg-slate-50",
  "hover:bg-bluegray-100": "hover:bg-slate-100",
  "hover:bg-bluegray-200": "hover:bg-slate-200",
  "hover:bg-bluegray-300": "hover:bg-slate-300",
  "hover:bg-bluegray-400": "hover:bg-slate-400",
  "hover:bg-bluegray-500": "hover:bg-slate-500",
  "hover:bg-bluegray-600": "hover:bg-slate-600",
  "hover:bg-bluegray-700": "hover:bg-slate-700",
  "hover:bg-bluegray-800": "hover:bg-slate-800",
  "hover:bg-bluegray-900": "hover:bg-slate-900",
  "hover:text-bluegray-50": "hover:text-slate-50",
  "hover:text-bluegray-100": "hover:text-slate-100",
  "hover:text-bluegray-200": "hover:text-slate-200",
  "hover:text-bluegray-300": "hover:text-slate-300",
  "hover:text-bluegray-400": "hover:text-slate-400",
  "hover:text-bluegray-500": "hover:text-slate-500",
  "hover:text-bluegray-600": "hover:text-slate-600",
  "hover:text-bluegray-700": "hover:text-slate-700",
  "hover:text-bluegray-800": "hover:text-slate-800",
  "hover:text-bluegray-900": "hover:text-slate-900",
  "hover:border-bluegray-50": "hover:border-slate-50",
  "hover:border-bluegray-100": "hover:border-slate-100",
  "hover:border-bluegray-200": "hover:border-slate-200",
  "hover:border-bluegray-300": "hover:border-slate-300",
  "hover:border-bluegray-400": "hover:border-slate-400",
  "hover:border-bluegray-500": "hover:border-slate-500",
  "hover:border-bluegray-600": "hover:border-slate-600",
  "hover:border-bluegray-700": "hover:border-slate-700",
  "hover:border-bluegray-800": "hover:border-slate-800",
  "hover:border-bluegray-900": "hover:border-slate-900",
  "active:bg-bluegray-50": "active:bg-slate-50",
  "active:bg-bluegray-100": "active:bg-slate-100",
  "active:bg-bluegray-200": "active:bg-slate-200",
  "active:bg-bluegray-300": "active:bg-slate-300",
  "active:bg-bluegray-400": "active:bg-slate-400",
  "active:bg-bluegray-500": "active:bg-slate-500",
  "active:bg-bluegray-600": "active:bg-slate-600",
  "active:bg-bluegray-700": "active:bg-slate-700",
  "active:bg-bluegray-800": "active:bg-slate-800",
  "active:bg-bluegray-900": "active:bg-slate-900",
  "active:text-bluegray-50": "active:text-slate-50",
  "active:text-bluegray-100": "active:text-slate-100",
  "active:text-bluegray-200": "active:text-slate-200",
  "active:text-bluegray-300": "active:text-slate-300",
  "active:text-bluegray-400": "active:text-slate-400",
  "active:text-bluegray-500": "active:text-slate-500",
  "active:text-bluegray-600": "active:text-slate-600",
  "active:text-bluegray-700": "active:text-slate-700",
  "active:text-bluegray-800": "active:text-slate-800",
  "active:text-bluegray-900": "active:text-slate-900",
  "active:border-bluegray-50": "active:border-slate-50",
  "active:border-bluegray-100": "active:border-slate-100",
  "active:border-bluegray-200": "active:border-slate-200",
  "active:border-bluegray-300": "active:border-slate-300",
  "active:border-bluegray-400": "active:border-slate-400",
  "active:border-bluegray-500": "active:border-slate-500",
  "active:border-bluegray-600": "active:border-slate-600",
  "active:border-bluegray-700": "active:border-slate-700",
  "active:border-bluegray-800": "active:border-slate-800",
  "active:border-bluegray-900": "active:border-slate-900",
  "bg-white-alpha-10": "bg-white/10",
  "bg-white-alpha-20": "bg-white/20",
  "bg-white-alpha-30": "bg-white/30",
  "bg-white-alpha-40": "bg-white/40",
  "bg-white-alpha-50": "bg-white/50",
  "bg-white-alpha-60": "bg-white/60",
  "bg-white-alpha-70": "bg-white/70",
  "bg-white-alpha-80": "bg-white/80",
  "bg-white-alpha-90": "bg-white/90",
  "text-white-alpha-10": "text-white/10",
  "text-white-alpha-20": "text-white/20",
  "text-white-alpha-30": "text-white/30",
  "text-white-alpha-40": "text-white/40",
  "text-white-alpha-50": "text-white/50",
  "text-white-alpha-60": "text-white/60",
  "text-white-alpha-70": "text-white/70",
  "text-white-alpha-80": "text-white/80",
  "text-white-alpha-90": "text-white/90",
  "border-white-alpha-10": "border-white/10",
  "border-white-alpha-20": "border-white/20",
  "border-white-alpha-30": "border-white/30",
  "border-white-alpha-40": "border-white/40",
  "border-white-alpha-50": "border-white/50",
  "border-white-alpha-60": "border-white/60",
  "border-white-alpha-70": "border-white/70",
  "border-white-alpha-80": "border-white/80",
  "border-white-alpha-90": "border-white/90",
  "focus:bg-white-alpha-10": "focus:bg-white/10",
  "focus:bg-white-alpha-20": "focus:bg-white/20",
  "focus:bg-white-alpha-30": "focus:bg-white/30",
  "focus:bg-white-alpha-40": "focus:bg-white/40",
  "focus:bg-white-alpha-50": "focus:bg-white/50",
  "focus:bg-white-alpha-60": "focus:bg-white/60",
  "focus:bg-white-alpha-70": "focus:bg-white/70",
  "focus:bg-white-alpha-80": "focus:bg-white/80",
  "focus:bg-white-alpha-90": "focus:bg-white/90",
  "focus:text-white-alpha-10": "focus:text-white/10",
  "focus:text-white-alpha-20": "focus:text-white/20",
  "focus:text-white-alpha-30": "focus:text-white/30",
  "focus:text-white-alpha-40": "focus:text-white/40",
  "focus:text-white-alpha-50": "focus:text-white/50",
  "focus:text-white-alpha-60": "focus:text-white/60",
  "focus:text-white-alpha-70": "focus:text-white/70",
  "focus:text-white-alpha-80": "focus:text-white/80",
  "focus:text-white-alpha-90": "focus:text-white/90",
  "focus:border-white-alpha-10": "focus:border-white/10",
  "focus:border-white-alpha-20": "focus:border-white/20",
  "focus:border-white-alpha-30": "focus:border-white/30",
  "focus:border-white-alpha-40": "focus:border-white/40",
  "focus:border-white-alpha-50": "focus:border-white/50",
  "focus:border-white-alpha-60": "focus:border-white/60",
  "focus:border-white-alpha-70": "focus:border-white/70",
  "focus:border-white-alpha-80": "focus:border-white/80",
  "focus:border-white-alpha-90": "focus:border-white/90",
  "hover:bg-white-alpha-10": "hover:bg-white/10",
  "hover:bg-white-alpha-20": "hover:bg-white/20",
  "hover:bg-white-alpha-30": "hover:bg-white/30",
  "hover:bg-white-alpha-40": "hover:bg-white/40",
  "hover:bg-white-alpha-50": "hover:bg-white/50",
  "hover:bg-white-alpha-60": "hover:bg-white/60",
  "hover:bg-white-alpha-70": "hover:bg-white/70",
  "hover:bg-white-alpha-80": "hover:bg-white/80",
  "hover:bg-white-alpha-90": "hover:bg-white/90",
  "hover:text-white-alpha-10": "hover:text-white/10",
  "hover:text-white-alpha-20": "hover:text-white/20",
  "hover:text-white-alpha-30": "hover:text-white/30",
  "hover:text-white-alpha-40": "hover:text-white/40",
  "hover:text-white-alpha-50": "hover:text-white/50",
  "hover:text-white-alpha-60": "hover:text-white/60",
  "hover:text-white-alpha-70": "hover:text-white/70",
  "hover:text-white-alpha-80": "hover:text-white/80",
  "hover:text-white-alpha-90": "hover:text-white/90",
  "hover:border-white-alpha-10": "hover:border-white/10",
  "hover:border-white-alpha-20": "hover:border-white/20",
  "hover:border-white-alpha-30": "hover:border-white/30",
  "hover:border-white-alpha-40": "hover:border-white/40",
  "hover:border-white-alpha-50": "hover:border-white/50",
  "hover:border-white-alpha-60": "hover:border-white/60",
  "hover:border-white-alpha-70": "hover:border-white/70",
  "hover:border-white-alpha-80": "hover:border-white/80",
  "hover:border-white-alpha-90": "hover:border-white/90",
  "active:bg-white-alpha-10": "active:bg-white/10",
  "active:bg-white-alpha-20": "active:bg-white/20",
  "active:bg-white-alpha-30": "active:bg-white/30",
  "active:bg-white-alpha-40": "active:bg-white/40",
  "active:bg-white-alpha-50": "active:bg-white/50",
  "active:bg-white-alpha-60": "active:bg-white/60",
  "active:bg-white-alpha-70": "active:bg-white/70",
  "active:bg-white-alpha-80": "active:bg-white/80",
  "active:bg-white-alpha-90": "active:bg-white/90",
  "active:text-white-alpha-10": "active:text-white/10",
  "active:text-white-alpha-20": "active:text-white/20",
  "active:text-white-alpha-30": "active:text-white/30",
  "active:text-white-alpha-40": "active:text-white/40",
  "active:text-white-alpha-50": "active:text-white/50",
  "active:text-white-alpha-60": "active:text-white/60",
  "active:text-white-alpha-70": "active:text-white/70",
  "active:text-white-alpha-80": "active:text-white/80",
  "active:text-white-alpha-90": "active:text-white/90",
  "active:border-white-alpha-10": "active:border-white/10",
  "active:border-white-alpha-20": "active:border-white/20",
  "active:border-white-alpha-30": "active:border-white/30",
  "active:border-white-alpha-40": "active:border-white/40",
  "active:border-white-alpha-50": "active:border-white/50",
  "active:border-white-alpha-60": "active:border-white/60",
  "active:border-white-alpha-70": "active:border-white/70",
  "active:border-white-alpha-80": "active:border-white/80",
  "active:border-white-alpha-90": "active:border-white/90",
  "bg-black-alpha-10": "bg-black/10",
  "bg-black-alpha-20": "bg-black/20",
  "bg-black-alpha-30": "bg-black/30",
  "bg-black-alpha-40": "bg-black/40",
  "bg-black-alpha-50": "bg-black/50",
  "bg-black-alpha-60": "bg-black/60",
  "bg-black-alpha-70": "bg-black/70",
  "bg-black-alpha-80": "bg-black/80",
  "bg-black-alpha-90": "bg-black/90",
  "text-black-alpha-10": "text-black/10",
  "text-black-alpha-20": "text-black/20",
  "text-black-alpha-30": "text-black/30",
  "text-black-alpha-40": "text-black/40",
  "text-black-alpha-50": "text-black/50",
  "text-black-alpha-60": "text-black/60",
  "text-black-alpha-70": "text-black/70",
  "text-black-alpha-80": "text-black/80",
  "text-black-alpha-90": "text-black/90",
  "border-black-alpha-10": "border-black/10",
  "border-black-alpha-20": "border-black/20",
  "border-black-alpha-30": "border-black/30",
  "border-black-alpha-40": "border-black/40",
  "border-black-alpha-50": "border-black/50",
  "border-black-alpha-60": "border-black/60",
  "border-black-alpha-70": "border-black/70",
  "border-black-alpha-80": "border-black/80",
  "border-black-alpha-90": "border-black/90",
  "focus:bg-black-alpha-10": "focus:bg-black/10",
  "focus:bg-black-alpha-20": "focus:bg-black/20",
  "focus:bg-black-alpha-30": "focus:bg-black/30",
  "focus:bg-black-alpha-40": "focus:bg-black/40",
  "focus:bg-black-alpha-50": "focus:bg-black/50",
  "focus:bg-black-alpha-60": "focus:bg-black/60",
  "focus:bg-black-alpha-70": "focus:bg-black/70",
  "focus:bg-black-alpha-80": "focus:bg-black/80",
  "focus:bg-black-alpha-90": "focus:bg-black/90",
  "focus:text-black-alpha-10": "focus:text-black/10",
  "focus:text-black-alpha-20": "focus:text-black/20",
  "focus:text-black-alpha-30": "focus:text-black/30",
  "focus:text-black-alpha-40": "focus:text-black/40",
  "focus:text-black-alpha-50": "focus:text-black/50",
  "focus:text-black-alpha-60": "focus:text-black/60",
  "focus:text-black-alpha-70": "focus:text-black/70",
  "focus:text-black-alpha-80": "focus:text-black/80",
  "focus:text-black-alpha-90": "focus:text-black/90",
  "focus:border-black-alpha-10": "focus:border-black/10",
  "focus:border-black-alpha-20": "focus:border-black/20",
  "focus:border-black-alpha-30": "focus:border-black/30",
  "focus:border-black-alpha-40": "focus:border-black/40",
  "focus:border-black-alpha-50": "focus:border-black/50",
  "focus:border-black-alpha-60": "focus:border-black/60",
  "focus:border-black-alpha-70": "focus:border-black/70",
  "focus:border-black-alpha-80": "focus:border-black/80",
  "focus:border-black-alpha-90": "focus:border-black/90",
  "hover:bg-black-alpha-10": "hover:bg-black/10",
  "hover:bg-black-alpha-20": "hover:bg-black/20",
  "hover:bg-black-alpha-30": "hover:bg-black/30",
  "hover:bg-black-alpha-40": "hover:bg-black/40",
  "hover:bg-black-alpha-50": "hover:bg-black/50",
  "hover:bg-black-alpha-60": "hover:bg-black/60",
  "hover:bg-black-alpha-70": "hover:bg-black/70",
  "hover:bg-black-alpha-80": "hover:bg-black/80",
  "hover:bg-black-alpha-90": "hover:bg-black/90",
  "hover:text-black-alpha-10": "hover:text-black/10",
  "hover:text-black-alpha-20": "hover:text-black/20",
  "hover:text-black-alpha-30": "hover:text-black/30",
  "hover:text-black-alpha-40": "hover:text-black/40",
  "hover:text-black-alpha-50": "hover:text-black/50",
  "hover:text-black-alpha-60": "hover:text-black/60",
  "hover:text-black-alpha-70": "hover:text-black/70",
  "hover:text-black-alpha-80": "hover:text-black/80",
  "hover:text-black-alpha-90": "hover:text-black/90",
  "hover:border-black-alpha-10": "hover:border-black/10",
  "hover:border-black-alpha-20": "hover:border-black/20",
  "hover:border-black-alpha-30": "hover:border-black/30",
  "hover:border-black-alpha-40": "hover:border-black/40",
  "hover:border-black-alpha-50": "hover:border-black/50",
  "hover:border-black-alpha-60": "hover:border-black/60",
  "hover:border-black-alpha-70": "hover:border-black/70",
  "hover:border-black-alpha-80": "hover:border-black/80",
  "hover:border-black-alpha-90": "hover:border-black/90",
  "active:bg-black-alpha-10": "active:bg-black/10",
  "active:bg-black-alpha-20": "active:bg-black/20",
  "active:bg-black-alpha-30": "active:bg-black/30",
  "active:bg-black-alpha-40": "active:bg-black/40",
  "active:bg-black-alpha-50": "active:bg-black/50",
  "active:bg-black-alpha-60": "active:bg-black/60",
  "active:bg-black-alpha-70": "active:bg-black/70",
  "active:bg-black-alpha-80": "active:bg-black/80",
  "active:bg-black-alpha-90": "active:bg-black/90",
  "active:text-black-alpha-10": "active:text-black/10",
  "active:text-black-alpha-20": "active:text-black/20",
  "active:text-black-alpha-30": "active:text-black/30",
  "active:text-black-alpha-40": "active:text-black/40",
  "active:text-black-alpha-50": "active:text-black/50",
  "active:text-black-alpha-60": "active:text-black/60",
  "active:text-black-alpha-70": "active:text-black/70",
  "active:text-black-alpha-80": "active:text-black/80",
  "active:text-black-alpha-90": "active:text-black/90",
  "active:border-black-alpha-10": "active:border-black/10",
  "active:border-black-alpha-20": "active:border-black/20",
  "active:border-black-alpha-30": "active:border-black/30",
  "active:border-black-alpha-40": "active:border-black/40",
  "active:border-black-alpha-50": "active:border-black/50",
  "active:border-black-alpha-60": "active:border-black/60",
  "active:border-black-alpha-70": "active:border-black/70",
  "active:border-black-alpha-80": "active:border-black/80",
  "active:border-black-alpha-90": "active:border-black/90",
  "bg-primary": "bg-primary text-primary-contrast",
  "focus:bg-primary": "focus:bg-primary focus:text-primary-contrast",
  "hover:bg-primary": "hover:bg-primary hover:text-primary-contrast",
  "active:bg-primary": "active:bg-primary active:text-primary-contrast",
  "bg-primary-reverse": "text-primary bg-primary-contrast",
  "focus:bg-primary-reverse": "focus:text-primary focus:bg-primary-contrast",
  "hover:bg-primary-reverse": "hover:text-primary hover:bg-primary-contrast",
  "active:bg-primary-reverse": "active:text-primary active:bg-primary-contrast",
  "text-color-secondary": "text-muted-color",
  "focus:text-color-secondary": "focus:text-muted-color",
  "hover:text-color-secondary": "hover:text-muted-color",
  "active:text-color-secondary": "active:text-muted-color",
  "surface-ground": "bg-surface-50 dark:bg-surface-950",
  "focus:surface-ground": "focus:bg-surface-50 dark:focus:bg-surface-950",
  "hover:surface-ground": "hover:bg-surface-50 dark:hover:bg-surface-950",
  "active:surface-ground": "active:bg-surface-50 dark:active:bg-surface-950",
  "surface-section": "bg-surface-0 dark:bg-surface-950",
  "focus:surface-section": "focus:bg-surface-0 dark:focus:bg-surface-950",
  "hover:surface-section": "hover:bg-surface-0 dark:hover:bg-surface-950",
  "active:surface-section": "active:bg-surface-0 dark:active:bg-surface-950",
  "surface-card": "bg-surface-0 dark:bg-surface-900",
  "focus:surface-card": "focus:bg-surface-0 dark:focus:bg-surface-900",
  "hover:surface-card": "hover:bg-surface-0 dark:hover:bg-surface-900",
  "active:surface-card": "active:bg-surface-0 dark:active:bg-surface-900",
  "surface-overlay": "bg-surface-0 dark:bg-surface-900",
  "focus:surface-overlay": "focus:bg-surface-0 dark:focus:bg-surface-900",
  "hover:surface-overlay": "hover:bg-surface-0 dark:hover:bg-surface-900",
  "active:surface-overlay": "active:bg-surface-0 dark:active:bg-surface-900",
  "surface-hover": "bg-emphasis",
  "focus:surface-hover": "focus:bg-emphasis",
  "hover:surface-hover": "hover:bg-emphasis",
  "active:surface-hover": "active:bg-emphasis",
  "surface-border": "border-surface",
  "focus::surface-border": "focus:border-surface",
  "hover:surface-border": "hover:border-surface",
  "active:surface-border": "active:border-surface",
  "sm:bg-primary": "sm:bg-primary sm:text-primary-contrast",
  "sm:focus:bg-primary": "sm:focus:bg-primary sm:focus:text-primary-contrast",
  "sm:hover:bg-primary": "sm:hover:bg-primary sm:hover:text-primary-contrast",
  "sm:active:bg-primary": "sm:active:bg-primary sm:active:text-primary-contrast",
  "sm:bg-primary-reverse": "sm:text-primary sm:bg-primary-contrast",
  "sm:focus:bg-primary-reverse": "sm:focus:text-primary sm:focus:bg-primary-contrast",
  "sm:hover:bg-primary-reverse": "sm:hover:text-primary sm:hover:bg-primary-contrast",
  "sm:active:bg-primary-reverse": "sm:active:text-primary sm:active:bg-primary-contrast",
  "sm:text-color-secondary": "sm:text-muted-color",
  "sm:focus:text-color-secondary": "sm:focus:text-muted-color",
  "sm:hover:text-color-secondary": "sm:hover:text-muted-color",
  "sm:active:text-color-secondary": "sm:active:text-muted-color",
  "sm:surface-ground": "sm:bg-surface-50 dark:sm:bg-surface-950",
  "sm:focus:surface-ground": "sm:focus:bg-surface-50 dark:sm:focus:bg-surface-950",
  "sm:hover:surface-ground": "sm:hover:bg-surface-50 dark:sm:hover:bg-surface-950",
  "sm:active:surface-ground": "sm:active:bg-surface-50 dark:sm:active:bg-surface-950",
  "sm:surface-section": "sm:bg-surface-0 dark:sm:bg-surface-950",
  "sm:focus:surface-section": "sm:focus:bg-surface-0 dark:sm:focus:bg-surface-950",
  "sm:hover:surface-section": "sm:hover:bg-surface-0 dark:sm:hover:bg-surface-950",
  "sm:active:surface-section": "sm:active:bg-surface-0 dark:sm:active:bg-surface-950",
  "sm:surface-card": "sm:bg-surface-0 dark:sm:bg-surface-900",
  "sm:focus:surface-card": "sm:focus:bg-surface-0 dark:sm:focus:bg-surface-900",
  "sm:hover:surface-card": "sm:hover:bg-surface-0 dark:sm:hover:bg-surface-900",
  "sm:active:surface-card": "sm:active:bg-surface-0 dark:sm:active:bg-surface-900",
  "sm:surface-overlay": "sm:bg-surface-0 dark:sm:bg-surface-900",
  "sm:focus:surface-overlay": "sm:focus:bg-surface-0 dark:sm:focus:bg-surface-900",
  "sm:hover:surface-overlay": "sm:hover:bg-surface-0 dark:sm:hover:bg-surface-900",
  "sm:active:surface-overlay": "sm:active:bg-surface-0 dark:sm:active:bg-surface-900",
  "sm:surface-hover": "sm:bg-emphasis",
  "sm:focus:surface-hover": "sm:focus:bg-emphasis",
  "sm:hover:surface-hover": "sm:hover:bg-emphasis",
  "sm:active:surface-hover": "sm:active:bg-emphasis",
  "sm:surface-border": "sm:border-surface",
  "sm:focus::surface-border": "sm:focus:border-surface",
  "sm:hover:surface-border": "sm:hover:border-surface",
  "sm:active:surface-border": "sm:active:border-surface",
  "md:bg-primary": "md:bg-primary md:text-primary-contrast",
  "md:focus:bg-primary": "md:focus:bg-primary md:focus:text-primary-contrast",
  "md:hover:bg-primary": "md:hover:bg-primary md:hover:text-primary-contrast",
  "md:active:bg-primary": "md:active:bg-primary md:active:text-primary-contrast",
  "md:bg-primary-reverse": "md:text-primary md:bg-primary-contrast",
  "md:focus:bg-primary-reverse": "md:focus:text-primary md:focus:bg-primary-contrast",
  "md:hover:bg-primary-reverse": "md:hover:text-primary md:hover:bg-primary-contrast",
  "md:active:bg-primary-reverse": "md:active:text-primary md:active:bg-primary-contrast",
  "md:text-color-secondary": "md:text-muted-color",
  "md:focus:text-color-secondary": "md:focus:text-muted-color",
  "md:hover:text-color-secondary": "md:hover:text-muted-color",
  "md:active:text-color-secondary": "md:active:text-muted-color",
  "md:surface-ground": "md:bg-surface-50 dark:md:bg-surface-950",
  "md:focus:surface-ground": "md:focus:bg-surface-50 dark:md:focus:bg-surface-950",
  "md:hover:surface-ground": "md:hover:bg-surface-50 dark:md:hover:bg-surface-950",
  "md:active:surface-ground": "md:active:bg-surface-50 dark:md:active:bg-surface-950",
  "md:surface-section": "md:bg-surface-0 dark:md:bg-surface-950",
  "md:focus:surface-section": "md:focus:bg-surface-0 dark:md:focus:bg-surface-950",
  "md:hover:surface-section": "md:hover:bg-surface-0 dark:md:hover:bg-surface-950",
  "md:active:surface-section": "md:active:bg-surface-0 dark:md:active:bg-surface-950",
  "md:surface-card": "md:bg-surface-0 dark:md:bg-surface-900",
  "md:focus:surface-card": "md:focus:bg-surface-0 dark:md:focus:bg-surface-900",
  "md:hover:surface-card": "md:hover:bg-surface-0 dark:md:hover:bg-surface-900",
  "md:active:surface-card": "md:active:bg-surface-0 dark:md:active:bg-surface-900",
  "md:surface-overlay": "md:bg-surface-0 dark:md:bg-surface-900",
  "md:focus:surface-overlay": "md:focus:bg-surface-0 dark:md:focus:bg-surface-900",
  "md:hover:surface-overlay": "md:hover:bg-surface-0 dark:md:hover:bg-surface-900",
  "md:active:surface-overlay": "md:active:bg-surface-0 dark:md:active:bg-surface-900",
  "md:surface-hover": "md:bg-emphasis",
  "md:focus:surface-hover": "md:focus:bg-emphasis",
  "md:hover:surface-hover": "md:hover:bg-emphasis",
  "md:active:surface-hover": "md:active:bg-emphasis",
  "md:surface-border": "md:border-surface",
  "md:focus::surface-border": "md:focus:border-surface",
  "md:hover:surface-border": "md:hover:border-surface",
  "md:active:surface-border": "md:active:border-surface",
  "lg:bg-primary": "lg:bg-primary lg:text-primary-contrast",
  "lg:focus:bg-primary": "lg:focus:bg-primary lg:focus:text-primary-contrast",
  "lg:hover:bg-primary": "lg:hover:bg-primary lg:hover:text-primary-contrast",
  "lg:active:bg-primary": "lg:active:bg-primary lg:active:text-primary-contrast",
  "lg:bg-primary-reverse": "lg:text-primary lg:bg-primary-contrast",
  "lg:focus:bg-primary-reverse": "lg:focus:text-primary lg:focus:bg-primary-contrast",
  "lg:hover:bg-primary-reverse": "lg:hover:text-primary lg:hover:bg-primary-contrast",
  "lg:active:bg-primary-reverse": "lg:active:text-primary lg:active:bg-primary-contrast",
  "lg:text-color-secondary": "lg:text-muted-color",
  "lg:focus:text-color-secondary": "lg:focus:text-muted-color",
  "lg:hover:text-color-secondary": "lg:hover:text-muted-color",
  "lg:active:text-color-secondary": "lg:active:text-muted-color",
  "lg:surface-ground": "lg:bg-surface-50 dark:lg:bg-surface-950",
  "lg:focus:surface-ground": "lg:focus:bg-surface-50 dark:lg:focus:bg-surface-950",
  "lg:hover:surface-ground": "lg:hover:bg-surface-50 dark:lg:hover:bg-surface-950",
  "lg:active:surface-ground": "lg:active:bg-surface-50 dark:lg:active:bg-surface-950",
  "lg:surface-section": "lg:bg-surface-0 dark:lg:bg-surface-950",
  "lg:focus:surface-section": "lg:focus:bg-surface-0 dark:lg:focus:bg-surface-950",
  "lg:hover:surface-section": "lg:hover:bg-surface-0 dark:lg:hover:bg-surface-950",
  "lg:active:surface-section": "lg:active:bg-surface-0 dark:lg:active:bg-surface-950",
  "lg:surface-card": "lg:bg-surface-0 dark:lg:bg-surface-900",
  "lg:focus:surface-card": "lg:focus:bg-surface-0 dark:lg:focus:bg-surface-900",
  "lg:hover:surface-card": "lg:hover:bg-surface-0 dark:lg:hover:bg-surface-900",
  "lg:active:surface-card": "lg:active:bg-surface-0 dark:lg:active:bg-surface-900",
  "lg:surface-overlay": "lg:bg-surface-0 dark:lg:bg-surface-900",
  "lg:focus:surface-overlay": "lg:focus:bg-surface-0 dark:lg:focus:bg-surface-900",
  "lg:hover:surface-overlay": "lg:hover:bg-surface-0 dark:lg:hover:bg-surface-900",
  "lg:active:surface-overlay": "lg:active:bg-surface-0 dark:lg:active:bg-surface-900",
  "lg:surface-hover": "lg:bg-emphasis",
  "lg:focus:surface-hover": "lg:focus:bg-emphasis",
  "lg:hover:surface-hover": "lg:hover:bg-emphasis",
  "lg:active:surface-hover": "lg:active:bg-emphasis",
  "lg:surface-border": "lg:border-surface",
  "lg:focus::surface-border": "lg:focus:border-surface",
  "lg:hover:surface-border": "lg:hover:border-surface",
  "lg:active:surface-border": "lg:active:border-surface",
  "xl:bg-primary": "xl:bg-primary xl:text-primary-contrast",
  "xl:focus:bg-primary": "xl:focus:bg-primary xl:focus:text-primary-contrast",
  "xl:hover:bg-primary": "xl:hover:bg-primary xl:hover:text-primary-contrast",
  "xl:active:bg-primary": "xl:active:bg-primary xl:active:text-primary-contrast",
  "xl:bg-primary-reverse": "xl:text-primary xl:bg-primary-contrast",
  "xl:focus:bg-primary-reverse": "xl:focus:text-primary xl:focus:bg-primary-contrast",
  "xl:hover:bg-primary-reverse": "xl:hover:text-primary xl:hover:bg-primary-contrast",
  "xl:active:bg-primary-reverse": "xl:active:text-primary xl:active:bg-primary-contrast",
  "xl:text-color-secondary": "xl:text-muted-color",
  "xl:focus:text-color-secondary": "xl:focus:text-muted-color",
  "xl:hover:text-color-secondary": "xl:hover:text-muted-color",
  "xl:active:text-color-secondary": "xl:active:text-muted-color",
  "xl:surface-ground": "xl:bg-surface-50 dark:xl:bg-surface-950",
  "xl:focus:surface-ground": "xl:focus:bg-surface-50 dark:xl:focus:bg-surface-950",
  "xl:hover:surface-ground": "xl:hover:bg-surface-50 dark:xl:hover:bg-surface-950",
  "xl:active:surface-ground": "xl:active:bg-surface-50 dark:xl:active:bg-surface-950",
  "xl:surface-section": "xl:bg-surface-0 dark:xl:bg-surface-950",
  "xl:focus:surface-section": "xl:focus:bg-surface-0 dark:xl:focus:bg-surface-950",
  "xl:hover:surface-section": "xl:hover:bg-surface-0 dark:xl:hover:bg-surface-950",
  "xl:active:surface-section": "xl:active:bg-surface-0 dark:xl:active:bg-surface-950",
  "xl:surface-card": "xl:bg-surface-0 dark:xl:bg-surface-900",
  "xl:focus:surface-card": "xl:focus:bg-surface-0 dark:xl:focus:bg-surface-900",
  "xl:hover:surface-card": "xl:hover:bg-surface-0 dark:xl:hover:bg-surface-900",
  "xl:active:surface-card": "xl:active:bg-surface-0 dark:xl:active:bg-surface-900",
  "xl:surface-overlay": "xl:bg-surface-0 dark:xl:bg-surface-900",
  "xl:focus:surface-overlay": "xl:focus:bg-surface-0 dark:xl:focus:bg-surface-900",
  "xl:hover:surface-overlay": "xl:hover:bg-surface-0 dark:xl:hover:bg-surface-900",
  "xl:active:surface-overlay": "xl:active:bg-surface-0 dark:xl:active:bg-surface-900",
  "xl:surface-hover": "xl:bg-emphasis",
  "xl:focus:surface-hover": "xl:focus:bg-emphasis",
  "xl:hover:surface-hover": "xl:hover:bg-emphasis",
  "xl:active:surface-hover": "xl:active:bg-emphasis",
  "xl:surface-border": "xl:border-surface",
  "xl:focus::surface-border": "xl:focus:border-surface",
  "xl:hover:surface-border": "xl:hover:border-surface",
  "xl:active:surface-border": "xl:active:border-surface",
  "text-overflow-clip": "text-clip",
  "text-overflow-ellipsis": "text-ellipsis",
  "sm:text-overflow-clip": "sm:text-clip",
  "sm:text-overflow-ellipsis": "sm:text-ellipsis",
  "md:text-overflow-clip": "md:text-clip",
  "md:text-overflow-ellipsis": "md:text-ellipsis",
  "lg:text-overflow-clip": "lg:text-clip",
  "lg:text-overflow-ellipsis": "lg:text-ellipsis",
  "xl:text-overflow-clip": "xl:text-clip",
  "xl:text-overflow-ellipsis": "xl:text-ellipsis",
  "font-italic": "italic",
  "line-height-1": "leading-none",
  "line-height-2": "leading-tight",
  "line-height-3": "leading-normal",
  "line-height-4": "leading-loose",
  "white-space-normal": "whitespace-normal",
  "white-space-nowrap": "whitespace-nowrap",
  "vertical-align-baseline": "align-baseline",
  "vertical-align-top": "align-top",
  "vertical-align-middle": "align-middle",
  "vertical-align-bottom": "align-bottom",
  "vertical-align-text-top": "align-text-top",
  "vertical-align-text-bottom": "align-text-bottom",
  "vertical-align-sub": "align-sub",
  "vertical-align-super": "align-super",
  "sm:vertical-align-baseline": "sm:align-baseline",
  "sm:vertical-align-top": "sm:align-top",
  "sm:vertical-align-middle": "sm:align-middle",
  "sm:vertical-align-bottom": "sm:align-bottom",
  "sm:vertical-align-text-top": "sm:align-text-top",
  "sm:vertical-align-text-bottom": "sm:align-text-bottom",
  "sm:vertical-align-sub": "sm:align-sub",
  "sm:vertical-align-super": "sm:align-super",
  "md:vertical-align-baseline": "md:align-baseline",
  "md:vertical-align-top": "md:align-top",
  "md:vertical-align-middle": "md:align-middle",
  "md:vertical-align-bottom": "md:align-bottom",
  "md:vertical-align-text-top": "md:align-text-top",
  "md:vertical-align-text-bottom": "md:align-text-bottom",
  "md:vertical-align-sub": "md:align-sub",
  "md:vertical-align-super": "md:align-super",
  "lg:vertical-align-baseline": "lg:align-baseline",
  "lg:vertical-align-top": "lg:align-top",
  "lg:vertical-align-middle": "lg:align-middle",
  "lg:vertical-align-bottom": "lg:align-bottom",
  "lg:vertical-align-text-top": "lg:align-text-top",
  "lg:vertical-align-text-bottom": "lg:align-text-bottom",
  "lg:vertical-align-sub": "lg:align-sub",
  "lg:vertical-align-super": "lg:align-super",
  "xl:vertical-align-baseline": "xl:align-baseline",
  "xl:vertical-align-top": "xl:align-top",
  "xl:vertical-align-middle": "xl:align-middle",
  "xl:vertical-align-bottom": "xl:align-bottom",
  "xl:vertical-align-text-top": "xl:align-text-top",
  "xl:vertical-align-text-bottom": "xl:align-text-bottom",
  "xl:vertical-align-sub": "xl:align-sub",
  "xl:vertical-align-super": "xl:align-super",
  "flex-column": "flex-col",
  "flex-column-reverse": "flex-col-reverse",
  "sm:flex-column": "sm:flex-col",
  "sm:flex-column-reverse": "sm:flex-col-reverse",
  "md:flex-column": "md:flex-col",
  "md:flex-column-reverse": "md:flex-col-reverse",
  "lg:flex-column": "lg:flex-col",
  "lg:flex-column-reverse": "lg:flex-col-reverse",
  "xl:flex-column": "xl:flex-col",
  "xl:flex-column-reverse": "xl:flex-col-reverse",
  "justify-content-start": "justify-start",
  "justify-content-end": "justify-end",
  "justify-content-center": "justify-center",
  "justify-content-between": "justify-between",
  "justify-content-around": "justify-around",
  "justify-content-evenly": "justify-evenly",
  "sm:justify-content-start": "sm:justify-start",
  "sm:justify-content-end": "sm:justify-end",
  "sm:justify-content-center": "sm:justify-center",
  "sm:justify-content-between": "sm:justify-between",
  "sm:justify-content-around": "sm:justify-around",
  "sm:justify-content-evenly": "sm:justify-evenly",
  "md:justify-content-start": "md:justify-start",
  "md:justify-content-end": "md:justify-end",
  "md:justify-content-center": "md:justify-center",
  "md:justify-content-between": "md:justify-between",
  "md:justify-content-around": "md:justify-around",
  "md:justify-content-evenly": "md:justify-evenly",
  "lg:justify-content-start": "lg:justify-start",
  "lg:justify-content-end": "lg:justify-end",
  "lg:justify-content-center": "lg:justify-center",
  "lg:justify-content-between": "lg:justify-between",
  "lg:justify-content-around": "lg:justify-around",
  "lg:justify-content-evenly": "lg:justify-evenly",
  "xl:justify-content-start": "xl:justify-start",
  "xl:justify-content-end": "xl:justify-end",
  "xl:justify-content-center": "xl:justify-center",
  "xl:justify-content-between": "xl:justify-between",
  "xl:justify-content-around": "xl:justify-around",
  "xl:justify-content-evenly": "xl:justify-evenly",
  "align-content-start": "content-start",
  "align-content-end": "content-end",
  "align-content-center": "content-center",
  "align-content-between": "content-between",
  "align-content-around": "content-around",
  "align-content-evenly": "content-evenly",
  "sm:align-content-start": "sm:content-start",
  "sm:align-content-end": "sm:content-end",
  "sm:align-content-center": "sm:content-center",
  "sm:align-content-between": "sm:content-between",
  "sm:align-content-around": "sm:content-around",
  "sm:align-content-evenly": "sm:content-evenly",
  "md:align-content-start": "md:content-start",
  "md:align-content-end": "md:content-end",
  "md:align-content-center": "md:content-center",
  "md:align-content-between": "md:content-between",
  "md:align-content-around": "md:content-around",
  "md:align-content-evenly": "md:content-evenly",
  "lg:align-content-start": "lg:content-start",
  "lg:align-content-end": "lg:content-end",
  "lg:align-content-center": "lg:content-center",
  "lg:align-content-between": "lg:content-between",
  "lg:align-content-around": "lg:content-around",
  "lg:align-content-evenly": "lg:content-evenly",
  "xl:align-content-start": "xl:content-start",
  "xl:align-content-end": "xl:content-end",
  "xl:align-content-center": "xl:content-center",
  "xl:align-content-between": "xl:content-between",
  "xl:align-content-around": "xl:content-around",
  "xl:align-content-evenly": "xl:content-evenly",
  "align-items-stretch": "items-stretch",
  "align-items-start": "items-start",
  "align-items-center": "items-center",
  "align-items-end": "items-end",
  "align-items-baseline": "items-baseline",
  "sm:align-items-stretch": "sm:items-stretch",
  "sm:align-items-start": "sm:items-start",
  "sm:align-items-center": "sm:items-center",
  "sm:align-items-end": "sm:items-end",
  "sm:align-items-baseline": "sm:items-baseline",
  "md:align-items-stretch": "md:items-stretch",
  "md:align-items-start": "md:items-start",
  "md:align-items-center": "md:items-center",
  "md:align-items-end": "md:items-end",
  "md:align-items-baseline": "md:items-baseline",
  "lg:align-items-stretch": "lg:items-stretch",
  "lg:align-items-start": "lg:items-start",
  "lg:align-items-center": "lg:items-center",
  "lg:align-items-end": "lg:items-end",
  "lg:align-items-baseline": "lg:items-baseline",
  "xl:align-items-stretch": "xl:items-stretch",
  "xl:align-items-start": "xl:items-start",
  "xl:align-items-center": "xl:items-center",
  "xl:align-items-end": "xl:items-end",
  "xl:align-items-baseline": "xl:items-baseline",
  "align-self-auto": "self-auto",
  "align-self-start": "self-start",
  "align-self-end": "self-end",
  "align-self-center": "self-center",
  "align-self-stretch": "self-stretch",
  "align-self-baseline": "self-baseline",
  "sm:align-self-auto": "sm:self-auto",
  "sm:align-self-start": "sm:self-start",
  "sm:align-self-end": "sm:self-end",
  "sm:align-self-center": "sm:self-center",
  "sm:align-self-stretch": "sm:self-stretch",
  "sm:align-self-baseline": "sm:self-baseline",
  "md:align-self-auto": "md:self-auto",
  "md:align-self-start": "md:self-start",
  "md:align-self-end": "md:self-end",
  "md:align-self-center": "md:self-center",
  "md:align-self-stretch": "md:self-stretch",
  "md:align-self-baseline": "md:self-baseline",
  "lg:align-self-auto": "lg:self-auto",
  "lg:align-self-start": "lg:self-start",
  "lg:align-self-end": "lg:self-end",
  "lg:align-self-center": "lg:self-center",
  "lg:align-self-stretch": "lg:self-stretch",
  "lg:align-self-baseline": "lg:self-baseline",
  "xl:align-self-auto": "xl:self-auto",
  "xl:align-self-start": "xl:self-start",
  "xl:align-self-end": "xl:self-end",
  "xl:align-self-center": "xl:self-center",
  "xl:align-self-stretch": "xl:self-stretch",
  "xl:align-self-baseline": "xl:self-baseline",
  "flex-order-0": "order-none",
  "flex-order-1": "order-1",
  "flex-order-2": "order-2",
  "flex-order-3": "order-3",
  "flex-order-4": "order-4",
  "flex-order-5": "order-5",
  "flex-order-6": "order-6",
  "sm:flex-order-0": "sm:order-none",
  "sm:flex-order-1": "sm:order-1",
  "sm:flex-order-2": "sm:order-2",
  "sm:flex-order-3": "sm:order-3",
  "sm:flex-order-4": "sm:order-4",
  "sm:flex-order-5": "sm:order-5",
  "sm:flex-order-6": "sm:order-6",
  "md:flex-order-0": "md:order-none",
  "md:flex-order-1": "md:order-1",
  "md:flex-order-2": "md:order-2",
  "md:flex-order-3": "md:order-3",
  "md:flex-order-4": "md:order-4",
  "md:flex-order-5": "md:order-5",
  "md:flex-order-6": "md:order-6",
  "lg:flex-order-0": "lg:order-none",
  "lg:flex-order-1": "lg:order-1",
  "lg:flex-order-2": "lg:order-2",
  "lg:flex-order-3": "lg:order-3",
  "lg:flex-order-4": "lg:order-4",
  "lg:flex-order-5": "lg:order-5",
  "lg:flex-order-6": "lg:order-6",
  "xl:flex-order-0": "xl:order-none",
  "xl:flex-order-1": "xl:order-1",
  "xl:flex-order-2": "xl:order-2",
  "xl:flex-order-3": "xl:order-3",
  "xl:flex-order-4": "xl:order-4",
  "xl:flex-order-5": "xl:order-5",
  "xl:flex-order-6": "xl:order-6",
  "flex-grow-0": "grow-0",
  "flex-grow-1": "grow",
  "sm:flex-grow-0": "sm:grow-0",
  "sm:flex-grow-1": "sm:grow",
  "md:flex-grow-0": "md:grow-0",
  "md:flex-grow-1": "md:grow",
  "lg:flex-grow-0": "lg:grow-0",
  "lg:flex-grow-1": "lg:grow",
  "xl:flex-grow-0": "xl:grow-0",
  "xl:flex-grow-1": "xl:grow",
  "flex-shrink-0": "shrink-0",
  "flex-shrink-1": "shrink",
  "sm:flex-shrink-0": "sm:shrink-0",
  "sm:flex-shrink-1": "sm:shrink",
  "md:flex-shrink-0": "md:shrink-0",
  "md:flex-shrink-1": "md:shrink",
  "lg:flex-shrink-0": "lg:shrink-0",
  "lg:flex-shrink-1": "lg:shrink",
  "xl:flex-shrink-0": "xl:shrink-0",
  "xl:flex-shrink-1": "xl:shrink",
  "gap-0": "gap-0",
  "gap-1": "gap-1",
  "gap-2": "gap-2",
  "gap-3": "gap-4",
  "gap-4": "gap-6",
  "gap-5": "gap-8",
  "gap-6": "gap-12",
  "gap-7": "gap-16",
  "gap-8": "gap-20",
  "row-gap-0": "gap-y-0",
  "row-gap-1": "gap-y-1",
  "row-gap-2": "gap-y-2",
  "row-gap-3": "gap-y-4",
  "row-gap-4": "gap-y-6",
  "row-gap-5": "gap-y-8",
  "row-gap-6": "gap-y-12",
  "row-gap-7": "gap-y-16",
  "row-gap-8": "gap-y-20",
  "column-gap-0": "gap-x-0",
  "column-gap-1": "gap-x-1",
  "column-gap-2": "gap-x-2",
  "column-gap-3": "gap-x-4",
  "column-gap-4": "gap-x-6",
  "column-gap-5": "gap-x-8",
  "column-gap-6": "gap-x-12",
  "column-gap-7": "gap-x-16",
  "column-gap-8": "gap-x-20",
  "sm:gap-0": "sm:gap-0",
  "sm:gap-1": "sm:gap-1",
  "sm:gap-2": "sm:gap-2",
  "sm:gap-3": "sm:gap-4",
  "sm:gap-4": "sm:gap-6",
  "sm:gap-5": "sm:gap-8",
  "sm:gap-6": "sm:gap-12",
  "sm:gap-7": "sm:gap-16",
  "sm:gap-8": "sm:gap-20",
  "sm:row-gap-0": "sm:gap-y-0",
  "sm:row-gap-1": "sm:gap-y-1",
  "sm:row-gap-2": "sm:gap-y-2",
  "sm:row-gap-3": "sm:gap-y-4",
  "sm:row-gap-4": "sm:gap-y-6",
  "sm:row-gap-5": "sm:gap-y-8",
  "sm:row-gap-6": "sm:gap-y-12",
  "sm:row-gap-7": "sm:gap-y-16",
  "sm:row-gap-8": "sm:gap-y-20",
  "sm:column-gap-0": "sm:gap-x-0",
  "sm:column-gap-1": "sm:gap-x-1",
  "sm:column-gap-2": "sm:gap-x-2",
  "sm:column-gap-3": "sm:gap-x-4",
  "sm:column-gap-4": "sm:gap-x-6",
  "sm:column-gap-5": "sm:gap-x-8",
  "sm:column-gap-6": "sm:gap-x-12",
  "sm:column-gap-7": "sm:gap-x-16",
  "sm:column-gap-8": "sm:gap-x-20",
  "md:gap-0": "md:gap-0",
  "md:gap-1": "md:gap-1",
  "md:gap-2": "md:gap-2",
  "md:gap-3": "md:gap-4",
  "md:gap-4": "md:gap-6",
  "md:gap-5": "md:gap-8",
  "md:gap-6": "md:gap-12",
  "md:gap-7": "md:gap-16",
  "md:gap-8": "md:gap-20",
  "md:row-gap-0": "md:gap-y-0",
  "md:row-gap-1": "md:gap-y-1",
  "md:row-gap-2": "md:gap-y-2",
  "md:row-gap-3": "md:gap-y-4",
  "md:row-gap-4": "md:gap-y-6",
  "md:row-gap-5": "md:gap-y-8",
  "md:row-gap-6": "md:gap-y-12",
  "md:row-gap-7": "md:gap-y-16",
  "md:row-gap-8": "md:gap-y-20",
  "md:column-gap-0": "md:gap-x-0",
  "md:column-gap-1": "md:gap-x-1",
  "md:column-gap-2": "md:gap-x-2",
  "md:column-gap-3": "md:gap-x-4",
  "md:column-gap-4": "md:gap-x-6",
  "md:column-gap-5": "md:gap-x-8",
  "md:column-gap-6": "md:gap-x-12",
  "md:column-gap-7": "md:gap-x-16",
  "md:column-gap-8": "md:gap-x-20",
  "lg:gap-0": "lg:gap-0",
  "lg:gap-1": "lg:gap-1",
  "lg:gap-2": "lg:gap-2",
  "lg:gap-3": "lg:gap-4",
  "lg:gap-4": "lg:gap-6",
  "lg:gap-5": "lg:gap-8",
  "lg:gap-6": "lg:gap-12",
  "lg:gap-7": "lg:gap-16",
  "lg:gap-8": "lg:gap-20",
  "lg:row-gap-0": "lg:gap-y-0",
  "lg:row-gap-1": "lg:gap-y-1",
  "lg:row-gap-2": "lg:gap-y-2",
  "lg:row-gap-3": "lg:gap-y-4",
  "lg:row-gap-4": "lg:gap-y-6",
  "lg:row-gap-5": "lg:gap-y-8",
  "lg:row-gap-6": "lg:gap-y-12",
  "lg:row-gap-7": "lg:gap-y-16",
  "lg:row-gap-8": "lg:gap-y-20",
  "lg:column-gap-0": "lg:gap-x-0",
  "lg:column-gap-1": "lg:gap-x-1",
  "lg:column-gap-2": "lg:gap-x-2",
  "lg:column-gap-3": "lg:gap-x-4",
  "lg:column-gap-4": "lg:gap-x-6",
  "lg:column-gap-5": "lg:gap-x-8",
  "lg:column-gap-6": "lg:gap-x-12",
  "lg:column-gap-7": "lg:gap-x-16",
  "lg:column-gap-8": "lg:gap-x-20",
  "xl:gap-0": "xl:gap-0",
  "xl:gap-1": "xl:gap-1",
  "xl:gap-2": "xl:gap-2",
  "xl:gap-3": "xl:gap-4",
  "xl:gap-4": "xl:gap-6",
  "xl:gap-5": "xl:gap-8",
  "xl:gap-6": "xl:gap-12",
  "xl:gap-7": "xl:gap-16",
  "xl:gap-8": "xl:gap-20",
  "xl:row-gap-0": "xl:gap-y-0",
  "xl:row-gap-1": "xl:gap-y-1",
  "xl:row-gap-2": "xl:gap-y-2",
  "xl:row-gap-3": "xl:gap-y-4",
  "xl:row-gap-4": "xl:gap-y-6",
  "xl:row-gap-5": "xl:gap-y-8",
  "xl:row-gap-6": "xl:gap-y-12",
  "xl:row-gap-7": "xl:gap-y-16",
  "xl:row-gap-8": "xl:gap-y-20",
  "xl:column-gap-0": "xl:gap-x-0",
  "xl:column-gap-1": "xl:gap-x-1",
  "xl:column-gap-2": "xl:gap-x-2",
  "xl:column-gap-3": "xl:gap-x-4",
  "xl:column-gap-4": "xl:gap-x-6",
  "xl:column-gap-5": "xl:gap-x-8",
  "xl:column-gap-6": "xl:gap-x-12",
  "xl:column-gap-7": "xl:gap-x-16",
  "xl:column-gap-8": "xl:gap-x-20",
  "p-0": "p-0",
  "p-1": "p-1",
  "p-2": "p-2",
  "p-3": "p-4",
  "p-4": "p-6",
  "p-5": "p-8",
  "p-6": "p-12",
  "p-7": "p-16",
  "p-8": "p-20",
  "pt-0": "pt-0",
  "pt-1": "pt-1",
  "pt-2": "pt-2",
  "pt-3": "pt-4",
  "pt-4": "pt-6",
  "pt-5": "pt-8",
  "pt-6": "pt-12",
  "pt-7": "pt-16",
  "pt-8": "pt-20",
  "pr-0": "pr-0",
  "pr-1": "pr-1",
  "pr-2": "pr-2",
  "pr-3": "pr-4",
  "pr-4": "pr-6",
  "pr-5": "pr-8",
  "pr-6": "pr-12",
  "pr-7": "pr-16",
  "pr-8": "pr-20",
  "pl-0": "pl-0",
  "pl-1": "pl-1",
  "pl-2": "pl-2",
  "pl-3": "pl-4",
  "pl-4": "pl-6",
  "pl-5": "pl-8",
  "pl-6": "pl-12",
  "pl-7": "pl-16",
  "pl-8": "pl-20",
  "pb-0": "pb-0",
  "pb-1": "pb-1",
  "pb-2": "pb-2",
  "pb-3": "pb-4",
  "pb-4": "pb-6",
  "pb-5": "pb-8",
  "pb-6": "pb-12",
  "pb-7": "pb-16",
  "pb-8": "pb-20",
  "px-0": "px-0",
  "px-1": "px-1",
  "px-2": "px-2",
  "px-3": "px-4",
  "px-4": "px-6",
  "px-5": "px-8",
  "px-6": "px-12",
  "px-7": "px-16",
  "px-8": "px-20",
  "py-0": "py-0",
  "py-1": "py-1",
  "py-2": "py-2",
  "py-3": "py-4",
  "py-4": "py-6",
  "py-5": "py-8",
  "py-6": "py-12",
  "py-7": "py-16",
  "py-8": "py-20",
  "sm:p-0": "sm:p-0",
  "sm:p-1": "sm:p-1",
  "sm:p-2": "sm:p-2",
  "sm:p-3": "sm:p-4",
  "sm:p-4": "sm:p-6",
  "sm:p-5": "sm:p-8",
  "sm:p-6": "sm:p-12",
  "sm:p-7": "sm:p-16",
  "sm:p-8": "sm:p-20",
  "sm:pt-0": "sm:pt-0",
  "sm:pt-1": "sm:pt-1",
  "sm:pt-2": "sm:pt-2",
  "sm:pt-3": "sm:pt-4",
  "sm:pt-4": "sm:pt-6",
  "sm:pt-5": "sm:pt-8",
  "sm:pt-6": "sm:pt-12",
  "sm:pt-7": "sm:pt-16",
  "sm:pt-8": "sm:pt-20",
  "sm:pr-0": "sm:pr-0",
  "sm:pr-1": "sm:pr-1",
  "sm:pr-2": "sm:pr-2",
  "sm:pr-3": "sm:pr-4",
  "sm:pr-4": "sm:pr-6",
  "sm:pr-5": "sm:pr-8",
  "sm:pr-6": "sm:pr-12",
  "sm:pr-7": "sm:pr-16",
  "sm:pr-8": "sm:pr-20",
  "sm:pl-0": "sm:pl-0",
  "sm:pl-1": "sm:pl-1",
  "sm:pl-2": "sm:pl-2",
  "sm:pl-3": "sm:pl-4",
  "sm:pl-4": "sm:pl-6",
  "sm:pl-5": "sm:pl-8",
  "sm:pl-6": "sm:pl-12",
  "sm:pl-7": "sm:pl-16",
  "sm:pl-8": "sm:pl-20",
  "sm:pb-0": "sm:pb-0",
  "sm:pb-1": "sm:pb-1",
  "sm:pb-2": "sm:pb-2",
  "sm:pb-3": "sm:pb-4",
  "sm:pb-4": "sm:pb-6",
  "sm:pb-5": "sm:pb-8",
  "sm:pb-6": "sm:pb-12",
  "sm:pb-7": "sm:pb-16",
  "sm:pb-8": "sm:pb-20",
  "sm:px-0": "sm:px-0",
  "sm:px-1": "sm:px-1",
  "sm:px-2": "sm:px-2",
  "sm:px-3": "sm:px-4",
  "sm:px-4": "sm:px-6",
  "sm:px-5": "sm:px-8",
  "sm:px-6": "sm:px-12",
  "sm:px-7": "sm:px-16",
  "sm:px-8": "sm:px-20",
  "sm:py-0": "sm:py-0",
  "sm:py-1": "sm:py-1",
  "sm:py-2": "sm:py-2",
  "sm:py-3": "sm:py-4",
  "sm:py-4": "sm:py-6",
  "sm:py-5": "sm:py-8",
  "sm:py-6": "sm:py-12",
  "sm:py-7": "sm:py-16",
  "sm:py-8": "sm:py-20",
  "md:p-0": "md:p-0",
  "md:p-1": "md:p-1",
  "md:p-2": "md:p-2",
  "md:p-3": "md:p-4",
  "md:p-4": "md:p-6",
  "md:p-5": "md:p-8",
  "md:p-6": "md:p-12",
  "md:p-7": "md:p-16",
  "md:p-8": "md:p-20",
  "md:pt-0": "md:pt-0",
  "md:pt-1": "md:pt-1",
  "md:pt-2": "md:pt-2",
  "md:pt-3": "md:pt-4",
  "md:pt-4": "md:pt-6",
  "md:pt-5": "md:pt-8",
  "md:pt-6": "md:pt-12",
  "md:pt-7": "md:pt-16",
  "md:pt-8": "md:pt-20",
  "md:pr-0": "md:pr-0",
  "md:pr-1": "md:pr-1",
  "md:pr-2": "md:pr-2",
  "md:pr-3": "md:pr-4",
  "md:pr-4": "md:pr-6",
  "md:pr-5": "md:pr-8",
  "md:pr-6": "md:pr-12",
  "md:pr-7": "md:pr-16",
  "md:pr-8": "md:pr-20",
  "md:pl-0": "md:pl-0",
  "md:pl-1": "md:pl-1",
  "md:pl-2": "md:pl-2",
  "md:pl-3": "md:pl-4",
  "md:pl-4": "md:pl-6",
  "md:pl-5": "md:pl-8",
  "md:pl-6": "md:pl-12",
  "md:pl-7": "md:pl-16",
  "md:pl-8": "md:pl-20",
  "md:pb-0": "md:pb-0",
  "md:pb-1": "md:pb-1",
  "md:pb-2": "md:pb-2",
  "md:pb-3": "md:pb-4",
  "md:pb-4": "md:pb-6",
  "md:pb-5": "md:pb-8",
  "md:pb-6": "md:pb-12",
  "md:pb-7": "md:pb-16",
  "md:pb-8": "md:pb-20",
  "md:px-0": "md:px-0",
  "md:px-1": "md:px-1",
  "md:px-2": "md:px-2",
  "md:px-3": "md:px-4",
  "md:px-4": "md:px-6",
  "md:px-5": "md:px-8",
  "md:px-6": "md:px-12",
  "md:px-7": "md:px-16",
  "md:px-8": "md:px-20",
  "md:py-0": "md:py-0",
  "md:py-1": "md:py-1",
  "md:py-2": "md:py-2",
  "md:py-3": "md:py-4",
  "md:py-4": "md:py-6",
  "md:py-5": "md:py-8",
  "md:py-6": "md:py-12",
  "md:py-7": "md:py-16",
  "md:py-8": "md:py-20",
  "lg:p-0": "lg:p-0",
  "lg:p-1": "lg:p-1",
  "lg:p-2": "lg:p-2",
  "lg:p-3": "lg:p-4",
  "lg:p-4": "lg:p-6",
  "lg:p-5": "lg:p-8",
  "lg:p-6": "lg:p-12",
  "lg:p-7": "lg:p-16",
  "lg:p-8": "lg:p-20",
  "lg:pt-0": "lg:pt-0",
  "lg:pt-1": "lg:pt-1",
  "lg:pt-2": "lg:pt-2",
  "lg:pt-3": "lg:pt-4",
  "lg:pt-4": "lg:pt-6",
  "lg:pt-5": "lg:pt-8",
  "lg:pt-6": "lg:pt-12",
  "lg:pt-7": "lg:pt-16",
  "lg:pt-8": "lg:pt-20",
  "lg:pr-0": "lg:pr-0",
  "lg:pr-1": "lg:pr-1",
  "lg:pr-2": "lg:pr-2",
  "lg:pr-3": "lg:pr-4",
  "lg:pr-4": "lg:pr-6",
  "lg:pr-5": "lg:pr-8",
  "lg:pr-6": "lg:pr-12",
  "lg:pr-7": "lg:pr-16",
  "lg:pr-8": "lg:pr-20",
  "lg:pl-0": "lg:pl-0",
  "lg:pl-1": "lg:pl-1",
  "lg:pl-2": "lg:pl-2",
  "lg:pl-3": "lg:pl-4",
  "lg:pl-4": "lg:pl-6",
  "lg:pl-5": "lg:pl-8",
  "lg:pl-6": "lg:pl-12",
  "lg:pl-7": "lg:pl-16",
  "lg:pl-8": "lg:pl-20",
  "lg:pb-0": "lg:pb-0",
  "lg:pb-1": "lg:pb-1",
  "lg:pb-2": "lg:pb-2",
  "lg:pb-3": "lg:pb-4",
  "lg:pb-4": "lg:pb-6",
  "lg:pb-5": "lg:pb-8",
  "lg:pb-6": "lg:pb-12",
  "lg:pb-7": "lg:pb-16",
  "lg:pb-8": "lg:pb-20",
  "lg:px-0": "lg:px-0",
  "lg:px-1": "lg:px-1",
  "lg:px-2": "lg:px-2",
  "lg:px-3": "lg:px-4",
  "lg:px-4": "lg:px-6",
  "lg:px-5": "lg:px-8",
  "lg:px-6": "lg:px-12",
  "lg:px-7": "lg:px-16",
  "lg:px-8": "lg:px-20",
  "lg:py-0": "lg:py-0",
  "lg:py-1": "lg:py-1",
  "lg:py-2": "lg:py-2",
  "lg:py-3": "lg:py-4",
  "lg:py-4": "lg:py-6",
  "lg:py-5": "lg:py-8",
  "lg:py-6": "lg:py-12",
  "lg:py-7": "lg:py-16",
  "lg:py-8": "lg:py-20",
  "xl:p-0": "xl:p-0",
  "xl:p-1": "xl:p-1",
  "xl:p-2": "xl:p-2",
  "xl:p-3": "xl:p-4",
  "xl:p-4": "xl:p-6",
  "xl:p-5": "xl:p-8",
  "xl:p-6": "xl:p-12",
  "xl:p-7": "xl:p-16",
  "xl:p-8": "xl:p-20",
  "xl:pt-0": "xl:pt-0",
  "xl:pt-1": "xl:pt-1",
  "xl:pt-2": "xl:pt-2",
  "xl:pt-3": "xl:pt-4",
  "xl:pt-4": "xl:pt-6",
  "xl:pt-5": "xl:pt-8",
  "xl:pt-6": "xl:pt-12",
  "xl:pt-7": "xl:pt-16",
  "xl:pt-8": "xl:pt-20",
  "xl:pr-0": "xl:pr-0",
  "xl:pr-1": "xl:pr-1",
  "xl:pr-2": "xl:pr-2",
  "xl:pr-3": "xl:pr-4",
  "xl:pr-4": "xl:pr-6",
  "xl:pr-5": "xl:pr-8",
  "xl:pr-6": "xl:pr-12",
  "xl:pr-7": "xl:pr-16",
  "xl:pr-8": "xl:pr-20",
  "xl:pl-0": "xl:pl-0",
  "xl:pl-1": "xl:pl-1",
  "xl:pl-2": "xl:pl-2",
  "xl:pl-3": "xl:pl-4",
  "xl:pl-4": "xl:pl-6",
  "xl:pl-5": "xl:pl-8",
  "xl:pl-6": "xl:pl-12",
  "xl:pl-7": "xl:pl-16",
  "xl:pl-8": "xl:pl-20",
  "xl:pb-0": "xl:pb-0",
  "xl:pb-1": "xl:pb-1",
  "xl:pb-2": "xl:pb-2",
  "xl:pb-3": "xl:pb-4",
  "xl:pb-4": "xl:pb-6",
  "xl:pb-5": "xl:pb-8",
  "xl:pb-6": "xl:pb-12",
  "xl:pb-7": "xl:pb-16",
  "xl:pb-8": "xl:pb-20",
  "xl:px-0": "xl:px-0",
  "xl:px-1": "xl:px-1",
  "xl:px-2": "xl:px-2",
  "xl:px-3": "xl:px-4",
  "xl:px-4": "xl:px-6",
  "xl:px-5": "xl:px-8",
  "xl:px-6": "xl:px-12",
  "xl:px-7": "xl:px-16",
  "xl:px-8": "xl:px-20",
  "xl:py-0": "xl:py-0",
  "xl:py-1": "xl:py-1",
  "xl:py-2": "xl:py-2",
  "xl:py-3": "xl:py-4",
  "xl:py-4": "xl:py-6",
  "xl:py-5": "xl:py-8",
  "xl:py-6": "xl:py-12",
  "xl:py-7": "xl:py-16",
  "xl:py-8": "xl:py-20",
  "m-0": "m-0",
  "m-1": "m-1",
  "m-2": "m-2",
  "m-3": "m-4",
  "m-4": "m-6",
  "m-5": "m-8",
  "m-6": "m-12",
  "m-7": "m-16",
  "m-8": "m-20",
  "-m-1": "-m-1",
  "-m-2": "-m-2",
  "-m-3": "-m-4",
  "-m-4": "-m-6",
  "-m-5": "-m-8",
  "-m-6": "-m-12",
  "-m-7": "-m-16",
  "-m-8": "-m-20",
  "m-auto": "m-auto",
  "mt-0": "mt-0",
  "mt-1": "mt-1",
  "mt-2": "mt-2",
  "mt-3": "mt-4",
  "mt-4": "mt-6",
  "mt-5": "mt-8",
  "mt-6": "mt-12",
  "mt-7": "mt-16",
  "mt-8": "mt-20",
  "-mt-1": "-mt-1",
  "-mt-2": "-mt-2",
  "-mt-3": "-mt-4",
  "-mt-4": "-mt-6",
  "-mt-5": "-mt-8",
  "-mt-6": "-mt-12",
  "-mt-7": "-mt-16",
  "-mt-8": "-mt-20",
  "mt-auto": "mt-auto",
  "mr-0": "mr-0",
  "mr-1": "mr-1",
  "mr-2": "mr-2",
  "mr-3": "mr-4",
  "mr-4": "mr-6",
  "mr-5": "mr-8",
  "mr-6": "mr-12",
  "mr-7": "mr-16",
  "mr-8": "mr-20",
  "-mr-1": "-mr-1",
  "-mr-2": "-mr-2",
  "-mr-3": "-mr-4",
  "-mr-4": "-mr-6",
  "-mr-5": "-mr-8",
  "-mr-6": "-mr-12",
  "-mr-7": "-mr-16",
  "-mr-8": "-mr-20",
  "mr-auto": "mr-auto",
  "ml-0": "ml-0",
  "ml-1": "ml-1",
  "ml-2": "ml-2",
  "ml-3": "ml-4",
  "ml-4": "ml-6",
  "ml-5": "ml-8",
  "ml-6": "ml-12",
  "ml-7": "ml-16",
  "ml-8": "ml-20",
  "-ml-1": "-ml-1",
  "-ml-2": "-ml-2",
  "-ml-3": "-ml-4",
  "-ml-4": "-ml-6",
  "-ml-5": "-ml-8",
  "-ml-6": "-ml-12",
  "-ml-7": "-ml-16",
  "-ml-8": "-ml-20",
  "ml-auto": "ml-auto",
  "mb-0": "mb-0",
  "mb-1": "mb-1",
  "mb-2": "mb-2",
  "mb-3": "mb-4",
  "mb-4": "mb-6",
  "mb-5": "mb-8",
  "mb-6": "mb-12",
  "mb-7": "mb-16",
  "mb-8": "mb-20",
  "-mb-1": "-mb-1",
  "-mb-2": "-mb-2",
  "-mb-3": "-mb-4",
  "-mb-4": "-mb-6",
  "-mb-5": "-mb-8",
  "-mb-6": "-mb-12",
  "-mb-7": "-mb-16",
  "-mb-8": "-mb-20",
  "mb-auto": "mb-auto",
  "mx-0": "mx-0",
  "mx-1": "mx-1",
  "mx-2": "mx-2",
  "mx-3": "mx-4",
  "mx-4": "mx-6",
  "mx-5": "mx-8",
  "mx-6": "mx-12",
  "mx-7": "mx-16",
  "mx-8": "mx-20",
  "-mx-1": "-mx-1",
  "-mx-2": "-mx-2",
  "-mx-3": "-mx-4",
  "-mx-4": "-mx-6",
  "-mx-5": "-mx-8",
  "-mx-6": "-mx-12",
  "-mx-7": "-mx-16",
  "-mx-8": "-mx-20",
  "mx-auto": "mx-auto",
  "my-0": "my-0",
  "my-1": "my-1",
  "my-2": "my-2",
  "my-3": "my-4",
  "my-4": "my-6",
  "my-5": "my-8",
  "my-6": "my-12",
  "my-7": "my-16",
  "my-8": "my-20",
  "-my-1": "-my-1",
  "-my-2": "-my-2",
  "-my-3": "-my-4",
  "-my-4": "-my-6",
  "-my-5": "-my-8",
  "-my-6": "-my-12",
  "-my-7": "-my-16",
  "-my-8": "-my-20",
  "my-auto": "my-auto",
  "sm:m-0": "sm:m-0",
  "sm:m-1": "sm:m-1",
  "sm:m-2": "sm:m-2",
  "sm:m-3": "sm:m-4",
  "sm:m-4": "sm:m-6",
  "sm:m-5": "sm:m-8",
  "sm:m-6": "sm:m-12",
  "sm:m-7": "sm:m-16",
  "sm:m-8": "sm:m-20",
  "sm:-m-1": "sm:-m-1",
  "sm:-m-2": "sm:-m-2",
  "sm:-m-3": "sm:-m-4",
  "sm:-m-4": "sm:-m-6",
  "sm:-m-5": "sm:-m-8",
  "sm:-m-6": "sm:-m-12",
  "sm:-m-7": "sm:-m-16",
  "sm:-m-8": "sm:-m-20",
  "sm:m-auto": "sm:m-auto",
  "sm:mt-0": "sm:mt-0",
  "sm:mt-1": "sm:mt-1",
  "sm:mt-2": "sm:mt-2",
  "sm:mt-3": "sm:mt-4",
  "sm:mt-4": "sm:mt-6",
  "sm:mt-5": "sm:mt-8",
  "sm:mt-6": "sm:mt-12",
  "sm:mt-7": "sm:mt-16",
  "sm:mt-8": "sm:mt-20",
  "sm:-mt-1": "sm:-mt-1",
  "sm:-mt-2": "sm:-mt-2",
  "sm:-mt-3": "sm:-mt-4",
  "sm:-mt-4": "sm:-mt-6",
  "sm:-mt-5": "sm:-mt-8",
  "sm:-mt-6": "sm:-mt-12",
  "sm:-mt-7": "sm:-mt-16",
  "sm:-mt-8": "sm:-mt-20",
  "sm:mt-auto": "sm:mt-auto",
  "sm:mr-0": "sm:mr-0",
  "sm:mr-1": "sm:mr-1",
  "sm:mr-2": "sm:mr-2",
  "sm:mr-3": "sm:mr-4",
  "sm:mr-4": "sm:mr-6",
  "sm:mr-5": "sm:mr-8",
  "sm:mr-6": "sm:mr-12",
  "sm:mr-7": "sm:mr-16",
  "sm:mr-8": "sm:mr-20",
  "sm:-mr-1": "sm:-mr-1",
  "sm:-mr-2": "sm:-mr-2",
  "sm:-mr-3": "sm:-mr-4",
  "sm:-mr-4": "sm:-mr-6",
  "sm:-mr-5": "sm:-mr-8",
  "sm:-mr-6": "sm:-mr-12",
  "sm:-mr-7": "sm:-mr-16",
  "sm:-mr-8": "sm:-mr-20",
  "sm:mr-auto": "sm:mr-auto",
  "sm:ml-0": "sm:ml-0",
  "sm:ml-1": "sm:ml-1",
  "sm:ml-2": "sm:ml-2",
  "sm:ml-3": "sm:ml-4",
  "sm:ml-4": "sm:ml-6",
  "sm:ml-5": "sm:ml-8",
  "sm:ml-6": "sm:ml-12",
  "sm:ml-7": "sm:ml-16",
  "sm:ml-8": "sm:ml-20",
  "sm:-ml-1": "sm:-ml-1",
  "sm:-ml-2": "sm:-ml-2",
  "sm:-ml-3": "sm:-ml-4",
  "sm:-ml-4": "sm:-ml-6",
  "sm:-ml-5": "sm:-ml-8",
  "sm:-ml-6": "sm:-ml-12",
  "sm:-ml-7": "sm:-ml-16",
  "sm:-ml-8": "sm:-ml-20",
  "sm:ml-auto": "sm:ml-auto",
  "sm:mb-0": "sm:mb-0",
  "sm:mb-1": "sm:mb-1",
  "sm:mb-2": "sm:mb-2",
  "sm:mb-3": "sm:mb-4",
  "sm:mb-4": "sm:mb-6",
  "sm:mb-5": "sm:mb-8",
  "sm:mb-6": "sm:mb-12",
  "sm:mb-7": "sm:mb-16",
  "sm:mb-8": "sm:mb-20",
  "sm:-mb-1": "sm:-mb-1",
  "sm:-mb-2": "sm:-mb-2",
  "sm:-mb-3": "sm:-mb-4",
  "sm:-mb-4": "sm:-mb-6",
  "sm:-mb-5": "sm:-mb-8",
  "sm:-mb-6": "sm:-mb-12",
  "sm:-mb-7": "sm:-mb-16",
  "sm:-mb-8": "sm:-mb-20",
  "sm:mb-auto": "sm:mb-auto",
  "sm:mx-0": "sm:mx-0",
  "sm:mx-1": "sm:mx-1",
  "sm:mx-2": "sm:mx-2",
  "sm:mx-3": "sm:mx-4",
  "sm:mx-4": "sm:mx-6",
  "sm:mx-5": "sm:mx-8",
  "sm:mx-6": "sm:mx-12",
  "sm:mx-7": "sm:mx-16",
  "sm:mx-8": "sm:mx-20",
  "sm:-mx-1": "sm:-mx-1",
  "sm:-mx-2": "sm:-mx-2",
  "sm:-mx-3": "sm:-mx-4",
  "sm:-mx-4": "sm:-mx-6",
  "sm:-mx-5": "sm:-mx-8",
  "sm:-mx-6": "sm:-mx-12",
  "sm:-mx-7": "sm:-mx-16",
  "sm:-mx-8": "sm:-mx-20",
  "sm:mx-auto": "sm:mx-auto",
  "sm:my-0": "sm:my-0",
  "sm:my-1": "sm:my-1",
  "sm:my-2": "sm:my-2",
  "sm:my-3": "sm:my-4",
  "sm:my-4": "sm:my-6",
  "sm:my-5": "sm:my-8",
  "sm:my-6": "sm:my-12",
  "sm:my-7": "sm:my-16",
  "sm:my-8": "sm:my-20",
  "sm:-my-1": "sm:-my-1",
  "sm:-my-2": "sm:-my-2",
  "sm:-my-3": "sm:-my-4",
  "sm:-my-4": "sm:-my-6",
  "sm:-my-5": "sm:-my-8",
  "sm:-my-6": "sm:-my-12",
  "sm:-my-7": "sm:-my-16",
  "sm:-my-8": "sm:-my-20",
  "sm:my-auto": "sm:my-auto",
  "md:m-0": "md:m-0",
  "md:m-1": "md:m-1",
  "md:m-2": "md:m-2",
  "md:m-3": "md:m-4",
  "md:m-4": "md:m-6",
  "md:m-5": "md:m-8",
  "md:m-6": "md:m-12",
  "md:m-7": "md:m-16",
  "md:m-8": "md:m-20",
  "md:-m-1": "md:-m-1",
  "md:-m-2": "md:-m-2",
  "md:-m-3": "md:-m-4",
  "md:-m-4": "md:-m-6",
  "md:-m-5": "md:-m-8",
  "md:-m-6": "md:-m-12",
  "md:-m-7": "md:-m-16",
  "md:-m-8": "md:-m-20",
  "md:m-auto": "md:m-auto",
  "md:mt-0": "md:mt-0",
  "md:mt-1": "md:mt-1",
  "md:mt-2": "md:mt-2",
  "md:mt-3": "md:mt-4",
  "md:mt-4": "md:mt-6",
  "md:mt-5": "md:mt-8",
  "md:mt-6": "md:mt-12",
  "md:mt-7": "md:mt-16",
  "md:mt-8": "md:mt-20",
  "md:-mt-1": "md:-mt-1",
  "md:-mt-2": "md:-mt-2",
  "md:-mt-3": "md:-mt-4",
  "md:-mt-4": "md:-mt-6",
  "md:-mt-5": "md:-mt-8",
  "md:-mt-6": "md:-mt-12",
  "md:-mt-7": "md:-mt-16",
  "md:-mt-8": "md:-mt-20",
  "md:mt-auto": "md:mt-auto",
  "md:mr-0": "md:mr-0",
  "md:mr-1": "md:mr-1",
  "md:mr-2": "md:mr-2",
  "md:mr-3": "md:mr-4",
  "md:mr-4": "md:mr-6",
  "md:mr-5": "md:mr-8",
  "md:mr-6": "md:mr-12",
  "md:mr-7": "md:mr-16",
  "md:mr-8": "md:mr-20",
  "md:-mr-1": "md:-mr-1",
  "md:-mr-2": "md:-mr-2",
  "md:-mr-3": "md:-mr-4",
  "md:-mr-4": "md:-mr-6",
  "md:-mr-5": "md:-mr-8",
  "md:-mr-6": "md:-mr-12",
  "md:-mr-7": "md:-mr-16",
  "md:-mr-8": "md:-mr-20",
  "md:mr-auto": "md:mr-auto",
  "md:ml-0": "md:ml-0",
  "md:ml-1": "md:ml-1",
  "md:ml-2": "md:ml-2",
  "md:ml-3": "md:ml-4",
  "md:ml-4": "md:ml-6",
  "md:ml-5": "md:ml-8",
  "md:ml-6": "md:ml-12",
  "md:ml-7": "md:ml-16",
  "md:ml-8": "md:ml-20",
  "md:-ml-1": "md:-ml-1",
  "md:-ml-2": "md:-ml-2",
  "md:-ml-3": "md:-ml-4",
  "md:-ml-4": "md:-ml-6",
  "md:-ml-5": "md:-ml-8",
  "md:-ml-6": "md:-ml-12",
  "md:-ml-7": "md:-ml-16",
  "md:-ml-8": "md:-ml-20",
  "md:ml-auto": "md:ml-auto",
  "md:mb-0": "md:mb-0",
  "md:mb-1": "md:mb-1",
  "md:mb-2": "md:mb-2",
  "md:mb-3": "md:mb-4",
  "md:mb-4": "md:mb-6",
  "md:mb-5": "md:mb-8",
  "md:mb-6": "md:mb-12",
  "md:mb-7": "md:mb-16",
  "md:mb-8": "md:mb-20",
  "md:-mb-1": "md:-mb-1",
  "md:-mb-2": "md:-mb-2",
  "md:-mb-3": "md:-mb-4",
  "md:-mb-4": "md:-mb-6",
  "md:-mb-5": "md:-mb-8",
  "md:-mb-6": "md:-mb-12",
  "md:-mb-7": "md:-mb-16",
  "md:-mb-8": "md:-mb-20",
  "md:mb-auto": "md:mb-auto",
  "md:mx-0": "md:mx-0",
  "md:mx-1": "md:mx-1",
  "md:mx-2": "md:mx-2",
  "md:mx-3": "md:mx-4",
  "md:mx-4": "md:mx-6",
  "md:mx-5": "md:mx-8",
  "md:mx-6": "md:mx-12",
  "md:mx-7": "md:mx-16",
  "md:mx-8": "md:mx-20",
  "md:-mx-1": "md:-mx-1",
  "md:-mx-2": "md:-mx-2",
  "md:-mx-3": "md:-mx-4",
  "md:-mx-4": "md:-mx-6",
  "md:-mx-5": "md:-mx-8",
  "md:-mx-6": "md:-mx-12",
  "md:-mx-7": "md:-mx-16",
  "md:-mx-8": "md:-mx-20",
  "md:mx-auto": "md:mx-auto",
  "md:my-0": "md:my-0",
  "md:my-1": "md:my-1",
  "md:my-2": "md:my-2",
  "md:my-3": "md:my-4",
  "md:my-4": "md:my-6",
  "md:my-5": "md:my-8",
  "md:my-6": "md:my-12",
  "md:my-7": "md:my-16",
  "md:my-8": "md:my-20",
  "md:-my-1": "md:-my-1",
  "md:-my-2": "md:-my-2",
  "md:-my-3": "md:-my-4",
  "md:-my-4": "md:-my-6",
  "md:-my-5": "md:-my-8",
  "md:-my-6": "md:-my-12",
  "md:-my-7": "md:-my-16",
  "md:-my-8": "md:-my-20",
  "md:my-auto": "md:my-auto",
  "lg:m-0": "lg:m-0",
  "lg:m-1": "lg:m-1",
  "lg:m-2": "lg:m-2",
  "lg:m-3": "lg:m-4",
  "lg:m-4": "lg:m-6",
  "lg:m-5": "lg:m-8",
  "lg:m-6": "lg:m-12",
  "lg:m-7": "lg:m-16",
  "lg:m-8": "lg:m-20",
  "lg:-m-1": "lg:-m-1",
  "lg:-m-2": "lg:-m-2",
  "lg:-m-3": "lg:-m-4",
  "lg:-m-4": "lg:-m-6",
  "lg:-m-5": "lg:-m-8",
  "lg:-m-6": "lg:-m-12",
  "lg:-m-7": "lg:-m-16",
  "lg:-m-8": "lg:-m-20",
  "lg:m-auto": "lg:m-auto",
  "lg:mt-0": "lg:mt-0",
  "lg:mt-1": "lg:mt-1",
  "lg:mt-2": "lg:mt-2",
  "lg:mt-3": "lg:mt-4",
  "lg:mt-4": "lg:mt-6",
  "lg:mt-5": "lg:mt-8",
  "lg:mt-6": "lg:mt-12",
  "lg:mt-7": "lg:mt-16",
  "lg:mt-8": "lg:mt-20",
  "lg:-mt-1": "lg:-mt-1",
  "lg:-mt-2": "lg:-mt-2",
  "lg:-mt-3": "lg:-mt-4",
  "lg:-mt-4": "lg:-mt-6",
  "lg:-mt-5": "lg:-mt-8",
  "lg:-mt-6": "lg:-mt-12",
  "lg:-mt-7": "lg:-mt-16",
  "lg:-mt-8": "lg:-mt-20",
  "lg:mt-auto": "lg:mt-auto",
  "lg:mr-0": "lg:mr-0",
  "lg:mr-1": "lg:mr-1",
  "lg:mr-2": "lg:mr-2",
  "lg:mr-3": "lg:mr-4",
  "lg:mr-4": "lg:mr-6",
  "lg:mr-5": "lg:mr-8",
  "lg:mr-6": "lg:mr-12",
  "lg:mr-7": "lg:mr-16",
  "lg:mr-8": "lg:mr-20",
  "lg:-mr-1": "lg:-mr-1",
  "lg:-mr-2": "lg:-mr-2",
  "lg:-mr-3": "lg:-mr-4",
  "lg:-mr-4": "lg:-mr-6",
  "lg:-mr-5": "lg:-mr-8",
  "lg:-mr-6": "lg:-mr-12",
  "lg:-mr-7": "lg:-mr-16",
  "lg:-mr-8": "lg:-mr-20",
  "lg:mr-auto": "lg:mr-auto",
  "lg:ml-0": "lg:ml-0",
  "lg:ml-1": "lg:ml-1",
  "lg:ml-2": "lg:ml-2",
  "lg:ml-3": "lg:ml-4",
  "lg:ml-4": "lg:ml-6",
  "lg:ml-5": "lg:ml-8",
  "lg:ml-6": "lg:ml-12",
  "lg:ml-7": "lg:ml-16",
  "lg:ml-8": "lg:ml-20",
  "lg:-ml-1": "lg:-ml-1",
  "lg:-ml-2": "lg:-ml-2",
  "lg:-ml-3": "lg:-ml-4",
  "lg:-ml-4": "lg:-ml-6",
  "lg:-ml-5": "lg:-ml-8",
  "lg:-ml-6": "lg:-ml-12",
  "lg:-ml-7": "lg:-ml-16",
  "lg:-ml-8": "lg:-ml-20",
  "lg:ml-auto": "lg:ml-auto",
  "lg:mb-0": "lg:mb-0",
  "lg:mb-1": "lg:mb-1",
  "lg:mb-2": "lg:mb-2",
  "lg:mb-3": "lg:mb-4",
  "lg:mb-4": "lg:mb-6",
  "lg:mb-5": "lg:mb-8",
  "lg:mb-6": "lg:mb-12",
  "lg:mb-7": "lg:mb-16",
  "lg:mb-8": "lg:mb-20",
  "lg:-mb-1": "lg:-mb-1",
  "lg:-mb-2": "lg:-mb-2",
  "lg:-mb-3": "lg:-mb-4",
  "lg:-mb-4": "lg:-mb-6",
  "lg:-mb-5": "lg:-mb-8",
  "lg:-mb-6": "lg:-mb-12",
  "lg:-mb-7": "lg:-mb-16",
  "lg:-mb-8": "lg:-mb-20",
  "lg:mb-auto": "lg:mb-auto",
  "lg:mx-0": "lg:mx-0",
  "lg:mx-1": "lg:mx-1",
  "lg:mx-2": "lg:mx-2",
  "lg:mx-3": "lg:mx-4",
  "lg:mx-4": "lg:mx-6",
  "lg:mx-5": "lg:mx-8",
  "lg:mx-6": "lg:mx-12",
  "lg:mx-7": "lg:mx-16",
  "lg:mx-8": "lg:mx-20",
  "lg:-mx-1": "lg:-mx-1",
  "lg:-mx-2": "lg:-mx-2",
  "lg:-mx-3": "lg:-mx-4",
  "lg:-mx-4": "lg:-mx-6",
  "lg:-mx-5": "lg:-mx-8",
  "lg:-mx-6": "lg:-mx-12",
  "lg:-mx-7": "lg:-mx-16",
  "lg:-mx-8": "lg:-mx-20",
  "lg:mx-auto": "lg:mx-auto",
  "lg:my-0": "lg:my-0",
  "lg:my-1": "lg:my-1",
  "lg:my-2": "lg:my-2",
  "lg:my-3": "lg:my-4",
  "lg:my-4": "lg:my-6",
  "lg:my-5": "lg:my-8",
  "lg:my-6": "lg:my-12",
  "lg:my-7": "lg:my-16",
  "lg:my-8": "lg:my-20",
  "lg:-my-1": "lg:-my-1",
  "lg:-my-2": "lg:-my-2",
  "lg:-my-3": "lg:-my-4",
  "lg:-my-4": "lg:-my-6",
  "lg:-my-5": "lg:-my-8",
  "lg:-my-6": "lg:-my-12",
  "lg:-my-7": "lg:-my-16",
  "lg:-my-8": "lg:-my-20",
  "lg:my-auto": "lg:my-auto",
  "xl:m-0": "xl:m-0",
  "xl:m-1": "xl:m-1",
  "xl:m-2": "xl:m-2",
  "xl:m-3": "xl:m-4",
  "xl:m-4": "xl:m-6",
  "xl:m-5": "xl:m-8",
  "xl:m-6": "xl:m-12",
  "xl:m-7": "xl:m-16",
  "xl:m-8": "xl:m-20",
  "xl:-m-1": "xl:-m-1",
  "xl:-m-2": "xl:-m-2",
  "xl:-m-3": "xl:-m-4",
  "xl:-m-4": "xl:-m-6",
  "xl:-m-5": "xl:-m-8",
  "xl:-m-6": "xl:-m-12",
  "xl:-m-7": "xl:-m-16",
  "xl:-m-8": "xl:-m-20",
  "xl:m-auto": "xl:m-auto",
  "xl:mt-0": "xl:mt-0",
  "xl:mt-1": "xl:mt-1",
  "xl:mt-2": "xl:mt-2",
  "xl:mt-3": "xl:mt-4",
  "xl:mt-4": "xl:mt-6",
  "xl:mt-5": "xl:mt-8",
  "xl:mt-6": "xl:mt-12",
  "xl:mt-7": "xl:mt-16",
  "xl:mt-8": "xl:mt-20",
  "xl:-mt-1": "xl:-mt-1",
  "xl:-mt-2": "xl:-mt-2",
  "xl:-mt-3": "xl:-mt-4",
  "xl:-mt-4": "xl:-mt-6",
  "xl:-mt-5": "xl:-mt-8",
  "xl:-mt-6": "xl:-mt-12",
  "xl:-mt-7": "xl:-mt-16",
  "xl:-mt-8": "xl:-mt-20",
  "xl:mt-auto": "xl:mt-auto",
  "xl:mr-0": "xl:mr-0",
  "xl:mr-1": "xl:mr-1",
  "xl:mr-2": "xl:mr-2",
  "xl:mr-3": "xl:mr-4",
  "xl:mr-4": "xl:mr-6",
  "xl:mr-5": "xl:mr-8",
  "xl:mr-6": "xl:mr-12",
  "xl:mr-7": "xl:mr-16",
  "xl:mr-8": "xl:mr-20",
  "xl:-mr-1": "xl:-mr-1",
  "xl:-mr-2": "xl:-mr-2",
  "xl:-mr-3": "xl:-mr-4",
  "xl:-mr-4": "xl:-mr-6",
  "xl:-mr-5": "xl:-mr-8",
  "xl:-mr-6": "xl:-mr-12",
  "xl:-mr-7": "xl:-mr-16",
  "xl:-mr-8": "xl:-mr-20",
  "xl:mr-auto": "xl:mr-auto",
  "xl:ml-0": "xl:ml-0",
  "xl:ml-1": "xl:ml-1",
  "xl:ml-2": "xl:ml-2",
  "xl:ml-3": "xl:ml-4",
  "xl:ml-4": "xl:ml-6",
  "xl:ml-5": "xl:ml-8",
  "xl:ml-6": "xl:ml-12",
  "xl:ml-7": "xl:ml-16",
  "xl:ml-8": "xl:ml-20",
  "xl:-ml-1": "xl:-ml-1",
  "xl:-ml-2": "xl:-ml-2",
  "xl:-ml-3": "xl:-ml-4",
  "xl:-ml-4": "xl:-ml-6",
  "xl:-ml-5": "xl:-ml-8",
  "xl:-ml-6": "xl:-ml-12",
  "xl:-ml-7": "xl:-ml-16",
  "xl:-ml-8": "xl:-ml-20",
  "xl:ml-auto": "xl:ml-auto",
  "xl:mb-0": "xl:mb-0",
  "xl:mb-1": "xl:mb-1",
  "xl:mb-2": "xl:mb-2",
  "xl:mb-3": "xl:mb-4",
  "xl:mb-4": "xl:mb-6",
  "xl:mb-5": "xl:mb-8",
  "xl:mb-6": "xl:mb-12",
  "xl:mb-7": "xl:mb-16",
  "xl:mb-8": "xl:mb-20",
  "xl:-mb-1": "xl:-mb-1",
  "xl:-mb-2": "xl:-mb-2",
  "xl:-mb-3": "xl:-mb-4",
  "xl:-mb-4": "xl:-mb-6",
  "xl:-mb-5": "xl:-mb-8",
  "xl:-mb-6": "xl:-mb-12",
  "xl:-mb-7": "xl:-mb-16",
  "xl:-mb-8": "xl:-mb-20",
  "xl:mb-auto": "xl:mb-auto",
  "xl:mx-0": "xl:mx-0",
  "xl:mx-1": "xl:mx-1",
  "xl:mx-2": "xl:mx-2",
  "xl:mx-3": "xl:mx-4",
  "xl:mx-4": "xl:mx-6",
  "xl:mx-5": "xl:mx-8",
  "xl:mx-6": "xl:mx-12",
  "xl:mx-7": "xl:mx-16",
  "xl:mx-8": "xl:mx-20",
  "xl:-mx-1": "xl:-mx-1",
  "xl:-mx-2": "xl:-mx-2",
  "xl:-mx-3": "xl:-mx-4",
  "xl:-mx-4": "xl:-mx-6",
  "xl:-mx-5": "xl:-mx-8",
  "xl:-mx-6": "xl:-mx-12",
  "xl:-mx-7": "xl:-mx-16",
  "xl:-mx-8": "xl:-mx-20",
  "xl:mx-auto": "xl:mx-auto",
  "xl:my-0": "xl:my-0",
  "xl:my-1": "xl:my-1",
  "xl:my-2": "xl:my-2",
  "xl:my-3": "xl:my-4",
  "xl:my-4": "xl:my-6",
  "xl:my-5": "xl:my-8",
  "xl:my-6": "xl:my-12",
  "xl:my-7": "xl:my-16",
  "xl:my-8": "xl:my-20",
  "xl:-my-1": "xl:-my-1",
  "xl:-my-2": "xl:-my-2",
  "xl:-my-3": "xl:-my-4",
  "xl:-my-4": "xl:-my-6",
  "xl:-my-5": "xl:-my-8",
  "xl:-my-6": "xl:-my-12",
  "xl:-my-7": "xl:-my-16",
  "xl:-my-8": "xl:-my-20",
  "xl:my-auto": "xl:my-auto",
  "shadow-none": "shadow-none",
  "shadow-1": "shadow-sm",
  "shadow-2": "shadow",
  "shadow-3": "shadow-md",
  "shadow-4": "shadow-lg",
  "shadow-5": "shadow-xl",
  "shadow-6": "shadow-2xl",
  "shadow-7": "shadow-2xl",
  "shadow-8": "shadow-2xl",
  "focus:shadow-none": "focus:shadow-none",
  "focus:shadow-1": "focus:shadow-sm",
  "focus:shadow-2": "focus:shadow",
  "focus:shadow-3": "focus:shadow-md",
  "focus:shadow-4": "focus:shadow-lg",
  "focus:shadow-5": "focus:shadow-xl",
  "focus:shadow-6": "focus:shadow-2xl",
  "focus:shadow-7": "focus:shadow-2xl",
  "focus:shadow-8": "focus:shadow-2xl",
  "hover:shadow-none": "hover:shadow-none",
  "hover:shadow-1": "hover:shadow-sm",
  "hover:shadow-2": "hover:shadow",
  "hover:shadow-3": "hover:shadow-md",
  "hover:shadow-4": "hover:shadow-lg",
  "hover:shadow-5": "hover:shadow-xl",
  "hover:shadow-6": "hover:shadow-2xl",
  "hover:shadow-7": "hover:shadow-2xl",
  "hover:shadow-8": "hover:shadow-2xl",
  "active:shadow-none": "active:shadow-none",
  "active:shadow-1": "active:shadow-sm",
  "active:shadow-2": "active:shadow",
  "active:shadow-3": "active:shadow-md",
  "active:shadow-4": "active:shadow-lg",
  "active:shadow-5": "active:shadow-xl",
  "active:shadow-6": "active:shadow-2xl",
  "active:shadow-7": "active:shadow-2xl",
  "active:shadow-8": "active:shadow-2xl",
  "sm:shadow-none": "sm:shadow-none",
  "sm:shadow-1": "sm:shadow-sm",
  "sm:shadow-2": "sm:shadow",
  "sm:shadow-3": "sm:shadow-md",
  "sm:shadow-4": "sm:shadow-lg",
  "sm:shadow-5": "sm:shadow-xl",
  "sm:shadow-6": "sm:shadow-2xl",
  "sm:shadow-7": "sm:shadow-2xl",
  "sm:shadow-8": "sm:shadow-2xl",
  "sm:focus:shadow-none": "sm:focus:shadow-none",
  "sm:focus:shadow-1": "sm:focus:shadow-sm",
  "sm:focus:shadow-2": "sm:focus:shadow",
  "sm:focus:shadow-3": "sm:focus:shadow-md",
  "sm:focus:shadow-4": "sm:focus:shadow-lg",
  "sm:focus:shadow-5": "sm:focus:shadow-xl",
  "sm:focus:shadow-6": "sm:focus:shadow-2xl",
  "sm:focus:shadow-7": "sm:focus:shadow-2xl",
  "sm:focus:shadow-8": "sm:focus:shadow-2xl",
  "sm:hover:shadow-none": "sm:hover:shadow-none",
  "sm:hover:shadow-1": "sm:hover:shadow-sm",
  "sm:hover:shadow-2": "sm:hover:shadow",
  "sm:hover:shadow-3": "sm:hover:shadow-md",
  "sm:hover:shadow-4": "sm:hover:shadow-lg",
  "sm:hover:shadow-5": "sm:hover:shadow-xl",
  "sm:hover:shadow-6": "sm:hover:shadow-2xl",
  "sm:hover:shadow-7": "sm:hover:shadow-2xl",
  "sm:hover:shadow-8": "sm:hover:shadow-2xl",
  "sm:active:shadow-none": "sm:active:shadow-none",
  "sm:active:shadow-1": "sm:active:shadow-sm",
  "sm:active:shadow-2": "sm:active:shadow",
  "sm:active:shadow-3": "sm:active:shadow-md",
  "sm:active:shadow-4": "sm:active:shadow-lg",
  "sm:active:shadow-5": "sm:active:shadow-xl",
  "sm:active:shadow-6": "sm:active:shadow-2xl",
  "sm:active:shadow-7": "sm:active:shadow-2xl",
  "sm:active:shadow-8": "sm:active:shadow-2xl",
  "md:shadow-none": "md:shadow-none",
  "md:shadow-1": "md:shadow-sm",
  "md:shadow-2": "md:shadow",
  "md:shadow-3": "md:shadow-md",
  "md:shadow-4": "md:shadow-lg",
  "md:shadow-5": "md:shadow-xl",
  "md:shadow-6": "md:shadow-2xl",
  "md:shadow-7": "md:shadow-2xl",
  "md:shadow-8": "md:shadow-2xl",
  "md:focus:shadow-none": "md:focus:shadow-none",
  "md:focus:shadow-1": "md:focus:shadow-sm",
  "md:focus:shadow-2": "md:focus:shadow",
  "md:focus:shadow-3": "md:focus:shadow-md",
  "md:focus:shadow-4": "md:focus:shadow-lg",
  "md:focus:shadow-5": "md:focus:shadow-xl",
  "md:focus:shadow-6": "md:focus:shadow-2xl",
  "md:focus:shadow-7": "md:focus:shadow-2xl",
  "md:focus:shadow-8": "md:focus:shadow-2xl",
  "md:hover:shadow-none": "md:hover:shadow-none",
  "md:hover:shadow-1": "md:hover:shadow-sm",
  "md:hover:shadow-2": "md:hover:shadow",
  "md:hover:shadow-3": "md:hover:shadow-md",
  "md:hover:shadow-4": "md:hover:shadow-lg",
  "md:hover:shadow-5": "md:hover:shadow-xl",
  "md:hover:shadow-6": "md:hover:shadow-2xl",
  "md:hover:shadow-7": "md:hover:shadow-2xl",
  "md:hover:shadow-8": "md:hover:shadow-2xl",
  "md:active:shadow-none": "md:active:shadow-none",
  "md:active:shadow-1": "md:active:shadow-sm",
  "md:active:shadow-2": "md:active:shadow",
  "md:active:shadow-3": "md:active:shadow-md",
  "md:active:shadow-4": "md:active:shadow-lg",
  "md:active:shadow-5": "md:active:shadow-xl",
  "md:active:shadow-6": "md:active:shadow-2xl",
  "md:active:shadow-7": "md:active:shadow-2xl",
  "md:active:shadow-8": "md:active:shadow-2xl",
  "lg:shadow-none": "lg:shadow-none",
  "lg:shadow-1": "lg:shadow-sm",
  "lg:shadow-2": "lg:shadow",
  "lg:shadow-3": "lg:shadow-md",
  "lg:shadow-4": "lg:shadow-lg",
  "lg:shadow-5": "lg:shadow-xl",
  "lg:shadow-6": "lg:shadow-2xl",
  "lg:shadow-7": "lg:shadow-2xl",
  "lg:shadow-8": "lg:shadow-2xl",
  "lg:focus:shadow-none": "lg:focus:shadow-none",
  "lg:focus:shadow-1": "lg:focus:shadow-sm",
  "lg:focus:shadow-2": "lg:focus:shadow",
  "lg:focus:shadow-3": "lg:focus:shadow-md",
  "lg:focus:shadow-4": "lg:focus:shadow-lg",
  "lg:focus:shadow-5": "lg:focus:shadow-xl",
  "lg:focus:shadow-6": "lg:focus:shadow-2xl",
  "lg:focus:shadow-7": "lg:focus:shadow-2xl",
  "lg:focus:shadow-8": "lg:focus:shadow-2xl",
  "lg:hover:shadow-none": "lg:hover:shadow-none",
  "lg:hover:shadow-1": "lg:hover:shadow-sm",
  "lg:hover:shadow-2": "lg:hover:shadow",
  "lg:hover:shadow-3": "lg:hover:shadow-md",
  "lg:hover:shadow-4": "lg:hover:shadow-lg",
  "lg:hover:shadow-5": "lg:hover:shadow-xl",
  "lg:hover:shadow-6": "lg:hover:shadow-2xl",
  "lg:hover:shadow-7": "lg:hover:shadow-2xl",
  "lg:hover:shadow-8": "lg:hover:shadow-2xl",
  "lg:active:shadow-none": "lg:active:shadow-none",
  "lg:active:shadow-1": "lg:active:shadow-sm",
  "lg:active:shadow-2": "lg:active:shadow",
  "lg:active:shadow-3": "lg:active:shadow-md",
  "lg:active:shadow-4": "lg:active:shadow-lg",
  "lg:active:shadow-5": "lg:active:shadow-xl",
  "lg:active:shadow-6": "lg:active:shadow-2xl",
  "lg:active:shadow-7": "lg:active:shadow-2xl",
  "lg:active:shadow-8": "lg:active:shadow-2xl",
  "xl:shadow-none": "xl:shadow-none",
  "xl:shadow-1": "xl:shadow-sm",
  "xl:shadow-2": "xl:shadow",
  "xl:shadow-3": "xl:shadow-md",
  "xl:shadow-4": "xl:shadow-lg",
  "xl:shadow-5": "xl:shadow-xl",
  "xl:shadow-6": "xl:shadow-2xl",
  "xl:shadow-7": "xl:shadow-2xl",
  "xl:shadow-8": "xl:shadow-2xl",
  "xl:focus:shadow-none": "xl:focus:shadow-none",
  "xl:focus:shadow-1": "xl:focus:shadow-sm",
  "xl:focus:shadow-2": "xl:focus:shadow",
  "xl:focus:shadow-3": "xl:focus:shadow-md",
  "xl:focus:shadow-4": "xl:focus:shadow-lg",
  "xl:focus:shadow-5": "xl:focus:shadow-xl",
  "xl:focus:shadow-6": "xl:focus:shadow-2xl",
  "xl:focus:shadow-7": "xl:focus:shadow-2xl",
  "xl:focus:shadow-8": "xl:focus:shadow-2xl",
  "xl:hover:shadow-none": "xl:hover:shadow-none",
  "xl:hover:shadow-1": "xl:hover:shadow-sm",
  "xl:hover:shadow-2": "xl:hover:shadow",
  "xl:hover:shadow-3": "xl:hover:shadow-md",
  "xl:hover:shadow-4": "xl:hover:shadow-lg",
  "xl:hover:shadow-5": "xl:hover:shadow-xl",
  "xl:hover:shadow-6": "xl:hover:shadow-2xl",
  "xl:hover:shadow-7": "xl:hover:shadow-2xl",
  "xl:hover:shadow-8": "xl:hover:shadow-2xl",
  "xl:active:shadow-none": "xl:active:shadow-none",
  "xl:active:shadow-1": "xl:active:shadow-sm",
  "xl:active:shadow-2": "xl:active:shadow",
  "xl:active:shadow-3": "xl:active:shadow-md",
  "xl:active:shadow-4": "xl:active:shadow-lg",
  "xl:active:shadow-5": "xl:active:shadow-xl",
  "xl:active:shadow-6": "xl:active:shadow-2xl",
  "xl:active:shadow-7": "xl:active:shadow-2xl",
  "xl:active:shadow-8": "xl:active:shadow-2xl",
  "border-none": "border-0",
  "border-1": "border",
  "border-2": "border-2",
  "border-3": "border-4",
  "border-top-none": "border-t-0",
  "border-top-1": "border-t",
  "border-top-2": "border-t-2",
  "border-top-3": "border-t-4",
  "border-right-none": "border-r-0",
  "border-right-1": "border-r",
  "border-right-2": "border-r-2",
  "border-right-3": "border-r-4",
  "border-left-none": "border-l-0",
  "border-left-1": "border-l",
  "border-left-2": "border-l-2",
  "border-left-3": "border-l-4",
  "border-bottom-none": "border-b-0",
  "border-bottom-1": "border-b",
  "border-bottom-2": "border-b-2",
  "border-bottom-3": "border-b-4",
  "border-x-none": "border-x-0",
  "border-x-1": "border-x",
  "border-x-2": "border-x-2",
  "border-x-3": "border-x-4",
  "border-y-none": "border-y-0",
  "border-y-1": "border-y",
  "border-y-2": "border-y-2",
  "border-y-3": "border-y-4",
  "sm:border-none": "sm:border-0",
  "sm:border-1": "sm:border",
  "sm:border-2": "sm:border-2",
  "sm:border-3": "sm:border-4",
  "sm:border-top-none": "sm:border-t-0",
  "sm:border-top-1": "sm:border-t",
  "sm:border-top-2": "sm:border-t-2",
  "sm:border-top-3": "sm:border-t-4",
  "sm:border-right-none": "sm:border-r-0",
  "sm:border-right-1": "sm:border-r",
  "sm:border-right-2": "sm:border-r-2",
  "sm:border-right-3": "sm:border-r-4",
  "sm:border-left-none": "sm:border-l-0",
  "sm:border-left-1": "sm:border-l",
  "sm:border-left-2": "sm:border-l-2",
  "sm:border-left-3": "sm:border-l-4",
  "sm:border-bottom-none": "sm:border-b-0",
  "sm:border-bottom-1": "sm:border-b",
  "sm:border-bottom-2": "sm:border-b-2",
  "sm:border-bottom-3": "sm:border-b-4",
  "sm:border-x-none": "sm:border-x-0",
  "sm:border-x-1": "sm:border-x",
  "sm:border-x-2": "sm:border-x-2",
  "sm:border-x-3": "sm:border-x-4",
  "sm:border-y-none": "sm:border-y-0",
  "sm:border-y-1": "sm:border-y",
  "sm:border-y-2": "sm:border-y-2",
  "sm:border-y-3": "sm:border-y-4",
  "md:border-none": "md:border-0",
  "md:border-1": "md:border",
  "md:border-2": "md:border-2",
  "md:border-3": "md:border-4",
  "md:border-top-none": "md:border-t-0",
  "md:border-top-1": "md:border-t",
  "md:border-top-2": "md:border-t-2",
  "md:border-top-3": "md:border-t-4",
  "md:border-right-none": "md:border-r-0",
  "md:border-right-1": "md:border-r",
  "md:border-right-2": "md:border-r-2",
  "md:border-right-3": "md:border-r-4",
  "md:border-left-none": "md:border-l-0",
  "md:border-left-1": "md:border-l",
  "md:border-left-2": "md:border-l-2",
  "md:border-left-3": "md:border-l-4",
  "md:border-bottom-none": "md:border-b-0",
  "md:border-bottom-1": "md:border-b",
  "md:border-bottom-2": "md:border-b-2",
  "md:border-bottom-3": "md:border-b-4",
  "md:border-x-none": "md:border-x-0",
  "md:border-x-1": "md:border-x",
  "md:border-x-2": "md:border-x-2",
  "md:border-x-3": "md:border-x-4",
  "md:border-y-none": "md:border-y-0",
  "md:border-y-1": "md:border-y",
  "md:border-y-2": "md:border-y-2",
  "md:border-y-3": "md:border-y-4",
  "lg:border-none": "lg:border-0",
  "lg:border-1": "lg:border",
  "lg:border-2": "lg:border-2",
  "lg:border-3": "lg:border-4",
  "lg:border-top-none": "lg:border-t-0",
  "lg:border-top-1": "lg:border-t",
  "lg:border-top-2": "lg:border-t-2",
  "lg:border-top-3": "lg:border-t-4",
  "lg:border-right-none": "lg:border-r-0",
  "lg:border-right-1": "lg:border-r",
  "lg:border-right-2": "lg:border-r-2",
  "lg:border-right-3": "lg:border-r-4",
  "lg:border-left-none": "lg:border-l-0",
  "lg:border-left-1": "lg:border-l",
  "lg:border-left-2": "lg:border-l-2",
  "lg:border-left-3": "lg:border-l-4",
  "lg:border-bottom-none": "lg:border-b-0",
  "lg:border-bottom-1": "lg:border-b",
  "lg:border-bottom-2": "lg:border-b-2",
  "lg:border-bottom-3": "lg:border-b-4",
  "lg:border-x-none": "lg:border-x-0",
  "lg:border-x-1": "lg:border-x",
  "lg:border-x-2": "lg:border-x-2",
  "lg:border-x-3": "lg:border-x-4",
  "lg:border-y-none": "lg:border-y-0",
  "lg:border-y-1": "lg:border-y",
  "lg:border-y-2": "lg:border-y-2",
  "lg:border-y-3": "lg:border-y-4",
  "xl:border-none": "xl:border-0",
  "xl:border-1": "xl:border",
  "xl:border-2": "xl:border-2",
  "xl:border-3": "xl:border-4",
  "xl:border-top-none": "xl:border-t-0",
  "xl:border-top-1": "xl:border-t",
  "xl:border-top-2": "xl:border-t-2",
  "xl:border-top-3": "xl:border-t-4",
  "xl:border-right-none": "xl:border-r-0",
  "xl:border-right-1": "xl:border-r",
  "xl:border-right-2": "xl:border-r-2",
  "xl:border-right-3": "xl:border-r-4",
  "xl:border-left-none": "xl:border-l-0",
  "xl:border-left-1": "xl:border-l",
  "xl:border-left-2": "xl:border-l-2",
  "xl:border-left-3": "xl:border-l-4",
  "xl:border-bottom-none": "xl:border-b-0",
  "xl:border-bottom-1": "xl:border-b",
  "xl:border-bottom-2": "xl:border-b-2",
  "xl:border-bottom-3": "xl:border-b-4",
  "xl:border-x-none": "xl:border-x-0",
  "xl:border-x-1": "xl:border-x",
  "xl:border-x-2": "xl:border-x-2",
  "xl:border-x-3": "xl:border-x-4",
  "xl:border-y-none": "xl:border-y-0",
  "xl:border-y-1": "xl:border-y",
  "xl:border-y-2": "xl:border-y-2",
  "xl:border-y-3": "xl:border-y-4",
  "border-noround": "rounded-none",
  "border-round": "rounded-border",
  "border-round-xs": "rounded-sm",
  "border-round-sm": "rounded",
  "border-round-md": "rounded-md",
  "border-round-lg": "rounded-lg",
  "border-round-xl": "rounded-xl",
  "border-round-2xl": "rounded-2xl",
  "border-round-3xl": "rounded-3xl",
  "border-circle": "rounded-full",
  "sm:border-noround": "sm:rounded-none",
  "sm:border-round": "sm:rounded-border",
  "sm:border-round-xs": "sm:rounded-sm",
  "sm:border-round-sm": "sm:rounded",
  "sm:border-round-md": "sm:rounded-md",
  "sm:border-round-lg": "sm:rounded-lg",
  "sm:border-round-xl": "sm:rounded-xl",
  "sm:border-round-2xl": "sm:rounded-2xl",
  "sm:border-round-3xl": "sm:rounded-3xl",
  "sm:border-circle": "sm:rounded-full",
  "md:border-noround": "md:rounded-none",
  "md:border-round": "md:rounded-border",
  "md:border-round-xs": "md:rounded-sm",
  "md:border-round-sm": "md:rounded",
  "md:border-round-md": "md:rounded-md",
  "md:border-round-lg": "md:rounded-lg",
  "md:border-round-xl": "md:rounded-xl",
  "md:border-round-2xl": "md:rounded-2xl",
  "md:border-round-3xl": "md:rounded-3xl",
  "md:border-circle": "md:rounded-full",
  "lg:border-noround": "lg:rounded-none",
  "lg:border-round": "lg:rounded-border",
  "lg:border-round-xs": "lg:rounded-sm",
  "lg:border-round-sm": "lg:rounded",
  "lg:border-round-md": "lg:rounded-md",
  "lg:border-round-lg": "lg:rounded-lg",
  "lg:border-round-xl": "lg:rounded-xl",
  "lg:border-round-2xl": "lg:rounded-2xl",
  "lg:border-round-3xl": "lg:rounded-3xl",
  "lg:border-circle": "lg:rounded-full",
  "xl:border-noround": "xl:rounded-none",
  "xl:border-round": "xl:rounded-border",
  "xl:border-round-xs": "xl:rounded-sm",
  "xl:border-round-sm": "xl:rounded",
  "xl:border-round-md": "xl:rounded-md",
  "xl:border-round-lg": "xl:rounded-lg",
  "xl:border-round-xl": "xl:rounded-xl",
  "xl:border-round-2xl": "xl:rounded-2xl",
  "xl:border-round-3xl": "xl:rounded-3xl",
  "xl:border-circle": "xl:rounded-full",
  "border-noround-left": "rounded-l-none",
  "border-noround-top": "rounded-t-none",
  "border-noround-right": "rounded-r-none",
  "border-noround-bottom": "rounded-b-none",
  "border-round-left": "rounded-l",
  "border-round-top": "rounded-t",
  "border-round-right": "rounded-r",
  "border-round-bottom": "rounded-b",
  "border-round-left-xs": "rounded-l-sm",
  "border-round-top-xs": "rounded-t-sm",
  "border-round-right-xs": "rounded-r-sm",
  "border-round-bottom-xs": "rounded-b-sm",
  "border-round-left-sm": "rounded-l",
  "border-round-top-sm": "rounded-t",
  "border-round-right-sm": "rounded-r",
  "border-round-bottom-sm": "rounded-b",
  "border-round-left-md": "rounded-l-md",
  "border-round-top-md": "rounded-t-md",
  "border-round-right-md": "rounded-r-md",
  "border-round-bottom-md": "rounded-b-md",
  "border-round-left-lg": "rounded-l-lg",
  "border-round-top-lg": "rounded-t-lg",
  "border-round-right-lg": "rounded-r-lg",
  "border-round-bottom-lg": "rounded-b-lg",
  "border-round-left-xl": "rounded-l-xl",
  "border-round-top-xl": "rounded-t-xl",
  "border-round-right-xl": "rounded-r-xl",
  "border-round-bottom-xl": "rounded-b-xl",
  "border-round-left-2xl": "rounded-l-2xl",
  "border-round-top-2xl": "rounded-t-2xl",
  "border-round-right-2xl": "rounded-r-2xl",
  "border-round-bottom-2xl": "rounded-b-2xl",
  "border-round-left-3xl": "rounded-l-3xl",
  "border-round-top-3xl": "rounded-t-3xl",
  "border-round-right-3xl": "rounded-r-3xl",
  "border-round-bottom-3xl": "rounded-b-3xl",
  "border-circle-left": "rounded-l-full",
  "border-circle-top": "rounded-t-full",
  "border-circle-right": "rounded-r-full",
  "border-circle-bottom": "rounded-b-full",
  "sm:border-noround-left": "sm:rounded-l-none",
  "sm:border-noround-top": "sm:rounded-t-none",
  "sm:border-noround-right": "sm:rounded-r-none",
  "sm:border-noround-bottom": "sm:rounded-b-none",
  "sm:border-round-left": "sm:rounded-l",
  "sm:border-round-top": "sm:rounded-t",
  "sm:border-round-right": "sm:rounded-r",
  "sm:border-round-bottom": "sm:rounded-b",
  "sm:border-round-left-xs": "sm:rounded-l-sm",
  "sm:border-round-top-xs": "sm:rounded-t-sm",
  "sm:border-round-right-xs": "sm:rounded-r-sm",
  "sm:border-round-bottom-xs": "sm:rounded-b-sm",
  "sm:border-round-left-sm": "sm:rounded-l",
  "sm:border-round-top-sm": "sm:rounded-t",
  "sm:border-round-right-sm": "sm:rounded-r",
  "sm:border-round-bottom-sm": "sm:rounded-b",
  "sm:border-round-left-md": "sm:rounded-l-md",
  "sm:border-round-top-md": "sm:rounded-t-md",
  "sm:border-round-right-md": "sm:rounded-r-md",
  "sm:border-round-bottom-md": "sm:rounded-b-md",
  "sm:border-round-left-lg": "sm:rounded-l-lg",
  "sm:border-round-top-lg": "sm:rounded-t-lg",
  "sm:border-round-right-lg": "sm:rounded-r-lg",
  "sm:border-round-bottom-lg": "sm:rounded-b-lg",
  "sm:border-round-left-xl": "sm:rounded-l-xl",
  "sm:border-round-top-xl": "sm:rounded-t-xl",
  "sm:border-round-right-xl": "sm:rounded-r-xl",
  "sm:border-round-bottom-xl": "sm:rounded-b-xl",
  "sm:border-round-left-2xl": "sm:rounded-l-2xl",
  "sm:border-round-top-2xl": "sm:rounded-t-2xl",
  "sm:border-round-right-2xl": "sm:rounded-r-2xl",
  "sm:border-round-bottom-2xl": "sm:rounded-b-2xl",
  "sm:border-round-left-3xl": "sm:rounded-l-3xl",
  "sm:border-round-top-3xl": "sm:rounded-t-3xl",
  "sm:border-round-right-3xl": "sm:rounded-r-3xl",
  "sm:border-round-bottom-3xl": "sm:rounded-b-3xl",
  "sm:border-circle-left": "sm:rounded-l-full",
  "sm:border-circle-top": "sm:rounded-t-full",
  "sm:border-circle-right": "sm:rounded-r-full",
  "sm:border-circle-bottom": "sm:rounded-b-full",
  "md:border-noround-left": "md:rounded-l-none",
  "md:border-noround-top": "md:rounded-t-none",
  "md:border-noround-right": "md:rounded-r-none",
  "md:border-noround-bottom": "md:rounded-b-none",
  "md:border-round-left": "md:rounded-l",
  "md:border-round-top": "md:rounded-t",
  "md:border-round-right": "md:rounded-r",
  "md:border-round-bottom": "md:rounded-b",
  "md:border-round-left-xs": "md:rounded-l-sm",
  "md:border-round-top-xs": "md:rounded-t-sm",
  "md:border-round-right-xs": "md:rounded-r-sm",
  "md:border-round-bottom-xs": "md:rounded-b-sm",
  "md:border-round-left-sm": "md:rounded-l",
  "md:border-round-top-sm": "md:rounded-t",
  "md:border-round-right-sm": "md:rounded-r",
  "md:border-round-bottom-sm": "md:rounded-b",
  "md:border-round-left-md": "md:rounded-l-md",
  "md:border-round-top-md": "md:rounded-t-md",
  "md:border-round-right-md": "md:rounded-r-md",
  "md:border-round-bottom-md": "md:rounded-b-md",
  "md:border-round-left-lg": "md:rounded-l-lg",
  "md:border-round-top-lg": "md:rounded-t-lg",
  "md:border-round-right-lg": "md:rounded-r-lg",
  "md:border-round-bottom-lg": "md:rounded-b-lg",
  "md:border-round-left-xl": "md:rounded-l-xl",
  "md:border-round-top-xl": "md:rounded-t-xl",
  "md:border-round-right-xl": "md:rounded-r-xl",
  "md:border-round-bottom-xl": "md:rounded-b-xl",
  "md:border-round-left-2xl": "md:rounded-l-2xl",
  "md:border-round-top-2xl": "md:rounded-t-2xl",
  "md:border-round-right-2xl": "md:rounded-r-2xl",
  "md:border-round-bottom-2xl": "md:rounded-b-2xl",
  "md:border-round-left-3xl": "md:rounded-l-3xl",
  "md:border-round-top-3xl": "md:rounded-t-3xl",
  "md:border-round-right-3xl": "md:rounded-r-3xl",
  "md:border-round-bottom-3xl": "md:rounded-b-3xl",
  "md:border-circle-left": "md:rounded-l-full",
  "md:border-circle-top": "md:rounded-t-full",
  "md:border-circle-right": "md:rounded-r-full",
  "md:border-circle-bottom": "md:rounded-b-full",
  "lg:border-noround-left": "lg:rounded-l-none",
  "lg:border-noround-top": "lg:rounded-t-none",
  "lg:border-noround-right": "lg:rounded-r-none",
  "lg:border-noround-bottom": "lg:rounded-b-none",
  "lg:border-round-left": "lg:rounded-l",
  "lg:border-round-top": "lg:rounded-t",
  "lg:border-round-right": "lg:rounded-r",
  "lg:border-round-bottom": "lg:rounded-b",
  "lg:border-round-left-xs": "lg:rounded-l-sm",
  "lg:border-round-top-xs": "lg:rounded-t-sm",
  "lg:border-round-right-xs": "lg:rounded-r-sm",
  "lg:border-round-bottom-xs": "lg:rounded-b-sm",
  "lg:border-round-left-sm": "lg:rounded-l",
  "lg:border-round-top-sm": "lg:rounded-t",
  "lg:border-round-right-sm": "lg:rounded-r",
  "lg:border-round-bottom-sm": "lg:rounded-b",
  "lg:border-round-left-md": "lg:rounded-l-md",
  "lg:border-round-top-md": "lg:rounded-t-md",
  "lg:border-round-right-md": "lg:rounded-r-md",
  "lg:border-round-bottom-md": "lg:rounded-b-md",
  "lg:border-round-left-lg": "lg:rounded-l-lg",
  "lg:border-round-top-lg": "lg:rounded-t-lg",
  "lg:border-round-right-lg": "lg:rounded-r-lg",
  "lg:border-round-bottom-lg": "lg:rounded-b-lg",
  "lg:border-round-left-xl": "lg:rounded-l-xl",
  "lg:border-round-top-xl": "lg:rounded-t-xl",
  "lg:border-round-right-xl": "lg:rounded-r-xl",
  "lg:border-round-bottom-xl": "lg:rounded-b-xl",
  "lg:border-round-left-2xl": "lg:rounded-l-2xl",
  "lg:border-round-top-2xl": "lg:rounded-t-2xl",
  "lg:border-round-right-2xl": "lg:rounded-r-2xl",
  "lg:border-round-bottom-2xl": "lg:rounded-b-2xl",
  "lg:border-round-left-3xl": "lg:rounded-l-3xl",
  "lg:border-round-top-3xl": "lg:rounded-t-3xl",
  "lg:border-round-right-3xl": "lg:rounded-r-3xl",
  "lg:border-round-bottom-3xl": "lg:rounded-b-3xl",
  "lg:border-circle-left": "lg:rounded-l-full",
  "lg:border-circle-top": "lg:rounded-t-full",
  "lg:border-circle-right": "lg:rounded-r-full",
  "lg:border-circle-bottom": "lg:rounded-b-full",
  "xl:border-noround-left": "xl:rounded-l-none",
  "xl:border-noround-top": "xl:rounded-t-none",
  "xl:border-noround-right": "xl:rounded-r-none",
  "xl:border-noround-bottom": "xl:rounded-b-none",
  "xl:border-round-left": "xl:rounded-l",
  "xl:border-round-top": "xl:rounded-t",
  "xl:border-round-right": "xl:rounded-r",
  "xl:border-round-bottom": "xl:rounded-b",
  "xl:border-round-left-xs": "xl:rounded-l-sm",
  "xl:border-round-top-xs": "xl:rounded-t-sm",
  "xl:border-round-right-xs": "xl:rounded-r-sm",
  "xl:border-round-bottom-xs": "xl:rounded-b-sm",
  "xl:border-round-left-sm": "xl:rounded-l",
  "xl:border-round-top-sm": "xl:rounded-t",
  "xl:border-round-right-sm": "xl:rounded-r",
  "xl:border-round-bottom-sm": "xl:rounded-b",
  "xl:border-round-left-md": "xl:rounded-l-md",
  "xl:border-round-top-md": "xl:rounded-t-md",
  "xl:border-round-right-md": "xl:rounded-r-md",
  "xl:border-round-bottom-md": "xl:rounded-b-md",
  "xl:border-round-left-lg": "xl:rounded-l-lg",
  "xl:border-round-top-lg": "xl:rounded-t-lg",
  "xl:border-round-right-lg": "xl:rounded-r-lg",
  "xl:border-round-bottom-lg": "xl:rounded-b-lg",
  "xl:border-round-left-xl": "xl:rounded-l-xl",
  "xl:border-round-top-xl": "xl:rounded-t-xl",
  "xl:border-round-right-xl": "xl:rounded-r-xl",
  "xl:border-round-bottom-xl": "xl:rounded-b-xl",
  "xl:border-round-left-2xl": "xl:rounded-l-2xl",
  "xl:border-round-top-2xl": "xl:rounded-t-2xl",
  "xl:border-round-right-2xl": "xl:rounded-r-2xl",
  "xl:border-round-bottom-2xl": "xl:rounded-b-2xl",
  "xl:border-round-left-3xl": "xl:rounded-l-3xl",
  "xl:border-round-top-3xl": "xl:rounded-t-3xl",
  "xl:border-round-right-3xl": "xl:rounded-r-3xl",
  "xl:border-round-bottom-3xl": "xl:rounded-b-3xl",
  "xl:border-circle-left": "xl:rounded-l-full",
  "xl:border-circle-top": "xl:rounded-t-full",
  "xl:border-circle-right": "xl:rounded-r-full",
  "xl:border-circle-bottom": "xl:rounded-b-full",
  "w-1": "w-1/12",
  "w-2": "w-2/12",
  "w-3": "w-3/12",
  "w-4": "w-4/12",
  "w-5": "w-5/12",
  "w-6": "w-6/12",
  "w-7": "w-7/12",
  "w-8": "w-8/12",
  "w-9": "w-9/12",
  "w-10": "w-10/12",
  "w-11": "w-11/12",
  "w-12": "w-full",
  "w-1rem": "w-4",
  "w-2rem": "w-8",
  "w-3rem": "w-12",
  "w-4rem": "w-16",
  "w-5rem": "w-20",
  "w-6rem": "w-24",
  "w-7rem": "w-28",
  "w-8rem": "w-32",
  "w-9rem": "w-36",
  "w-10rem": "w-40",
  "w-11rem": "w-44",
  "w-12rem": "w-48",
  "w-13rem": "w-52",
  "w-14rem": "w-56",
  "w-15rem": "w-60",
  "w-16rem": "w-64",
  "w-17rem": "w-[17rem]",
  "w-18rem": "w-72",
  "w-19rem": "w-[19rem]",
  "w-20rem": "w-80",
  "w-21rem": "w-[21rem]",
  "w-22rem": "w-[22rem]",
  "w-23rem": "w-[23rem]",
  "w-24rem": "w-96",
  "w-25rem": "w-[25rem]",
  "w-26rem": "w-[26rem]",
  "w-27rem": "w-[27rem]",
  "w-28rem": "w-[28rem]",
  "w-29rem": "w-[29rem]",
  "w-30rem": "w-[30rem]",
  "sm:w-1": "sm:w-1/12",
  "sm:w-2": "sm:w-2/12",
  "sm:w-3": "sm:w-3/12",
  "sm:w-4": "sm:w-4/12",
  "sm:w-5": "sm:w-5/12",
  "sm:w-6": "sm:w-6/12",
  "sm:w-7": "sm:w-7/12",
  "sm:w-8": "sm:w-8/12",
  "sm:w-9": "sm:w-9/12",
  "sm:w-10": "sm:w-10/12",
  "sm:w-11": "sm:w-11/12",
  "sm:w-12": "sm:w-full",
  "sm:w-1rem": "sm:w-4",
  "sm:w-2rem": "sm:w-8",
  "sm:w-3rem": "sm:w-12",
  "sm:w-4rem": "sm:w-16",
  "sm:w-5rem": "sm:w-20",
  "sm:w-6rem": "sm:w-24",
  "sm:w-7rem": "sm:w-28",
  "sm:w-8rem": "sm:w-32",
  "sm:w-9rem": "sm:w-36",
  "sm:w-10rem": "sm:w-40",
  "sm:w-11rem": "sm:w-44",
  "sm:w-12rem": "sm:w-48",
  "sm:w-13rem": "sm:w-52",
  "sm:w-14rem": "sm:w-56",
  "sm:w-15rem": "sm:w-60",
  "sm:w-16rem": "sm:w-64",
  "sm:w-17rem": "sm:w-[17rem]",
  "sm:w-18rem": "sm:w-72",
  "sm:w-19rem": "sm:w-[19rem]",
  "sm:w-20rem": "sm:w-80",
  "sm:w-21rem": "sm:w-[21rem]",
  "sm:w-22rem": "sm:w-[22rem]",
  "sm:w-23rem": "sm:w-[23rem]",
  "sm:w-24rem": "sm:w-96",
  "sm:w-25rem": "sm:w-[25rem]",
  "sm:w-26rem": "sm:w-[26rem]",
  "sm:w-27rem": "sm:w-[27rem]",
  "sm:w-28rem": "sm:w-[28rem]",
  "sm:w-29rem": "sm:w-[29rem]",
  "sm:w-30rem": "sm:w-[30rem]",
  "md:w-1": "md:w-1/12",
  "md:w-2": "md:w-2/12",
  "md:w-3": "md:w-3/12",
  "md:w-4": "md:w-4/12",
  "md:w-5": "md:w-5/12",
  "md:w-6": "md:w-6/12",
  "md:w-7": "md:w-7/12",
  "md:w-8": "md:w-8/12",
  "md:w-9": "md:w-9/12",
  "md:w-10": "md:w-10/12",
  "md:w-11": "md:w-11/12",
  "md:w-12": "md:w-full",
  "md:w-1rem": "md:w-4",
  "md:w-2rem": "md:w-8",
  "md:w-3rem": "md:w-12",
  "md:w-4rem": "md:w-16",
  "md:w-5rem": "md:w-20",
  "md:w-6rem": "md:w-24",
  "md:w-7rem": "md:w-28",
  "md:w-8rem": "md:w-32",
  "md:w-9rem": "md:w-36",
  "md:w-10rem": "md:w-40",
  "md:w-11rem": "md:w-44",
  "md:w-12rem": "md:w-48",
  "md:w-13rem": "md:w-52",
  "md:w-14rem": "md:w-56",
  "md:w-15rem": "md:w-60",
  "md:w-16rem": "md:w-64",
  "md:w-17rem": "md:w-[17rem]",
  "md:w-18rem": "md:w-72",
  "md:w-19rem": "md:w-[19rem]",
  "md:w-20rem": "md:w-80",
  "md:w-21rem": "md:w-[21rem]",
  "md:w-22rem": "md:w-[22rem]",
  "md:w-23rem": "md:w-[23rem]",
  "md:w-24rem": "md:w-96",
  "md:w-25rem": "md:w-[25rem]",
  "md:w-26rem": "md:w-[26rem]",
  "md:w-27rem": "md:w-[27rem]",
  "md:w-28rem": "md:w-[28rem]",
  "md:w-29rem": "md:w-[29rem]",
  "md:w-30rem": "md:w-[30rem]",
  "lg:w-1": "lg:w-1/12",
  "lg:w-2": "lg:w-2/12",
  "lg:w-3": "lg:w-3/12",
  "lg:w-4": "lg:w-4/12",
  "lg:w-5": "lg:w-5/12",
  "lg:w-6": "lg:w-6/12",
  "lg:w-7": "lg:w-7/12",
  "lg:w-8": "lg:w-8/12",
  "lg:w-9": "lg:w-9/12",
  "lg:w-10": "lg:w-10/12",
  "lg:w-11": "lg:w-11/12",
  "lg:w-12": "lg:w-full",
  "lg:w-1rem": "lg:w-4",
  "lg:w-2rem": "lg:w-8",
  "lg:w-3rem": "lg:w-12",
  "lg:w-4rem": "lg:w-16",
  "lg:w-5rem": "lg:w-20",
  "lg:w-6rem": "lg:w-24",
  "lg:w-7rem": "lg:w-28",
  "lg:w-8rem": "lg:w-32",
  "lg:w-9rem": "lg:w-36",
  "lg:w-10rem": "lg:w-40",
  "lg:w-11rem": "lg:w-44",
  "lg:w-12rem": "lg:w-48",
  "lg:w-13rem": "lg:w-52",
  "lg:w-14rem": "lg:w-56",
  "lg:w-15rem": "lg:w-60",
  "lg:w-16rem": "lg:w-64",
  "lg:w-17rem": "lg:w-[17rem]",
  "lg:w-18rem": "lg:w-72",
  "lg:w-19rem": "lg:w-[19rem]",
  "lg:w-20rem": "lg:w-80",
  "lg:w-21rem": "lg:w-[21rem]",
  "lg:w-22rem": "lg:w-[22rem]",
  "lg:w-23rem": "lg:w-[23rem]",
  "lg:w-24rem": "lg:w-96",
  "lg:w-25rem": "lg:w-[25rem]",
  "lg:w-26rem": "lg:w-[26rem]",
  "lg:w-27rem": "lg:w-[27rem]",
  "lg:w-28rem": "lg:w-[28rem]",
  "lg:w-29rem": "lg:w-[29rem]",
  "lg:w-30rem": "lg:w-[30rem]",
  "xl:w-1": "xl:w-1/12",
  "xl:w-2": "xl:w-2/12",
  "xl:w-3": "xl:w-3/12",
  "xl:w-4": "xl:w-4/12",
  "xl:w-5": "xl:w-5/12",
  "xl:w-6": "xl:w-6/12",
  "xl:w-7": "xl:w-7/12",
  "xl:w-8": "xl:w-8/12",
  "xl:w-9": "xl:w-9/12",
  "xl:w-10": "xl:w-10/12",
  "xl:w-11": "xl:w-11/12",
  "xl:w-12": "xl:w-full",
  "xl:w-1rem": "xl:w-4",
  "xl:w-2rem": "xl:w-8",
  "xl:w-3rem": "xl:w-12",
  "xl:w-4rem": "xl:w-16",
  "xl:w-5rem": "xl:w-20",
  "xl:w-6rem": "xl:w-24",
  "xl:w-7rem": "xl:w-28",
  "xl:w-8rem": "xl:w-32",
  "xl:w-9rem": "xl:w-36",
  "xl:w-10rem": "xl:w-40",
  "xl:w-11rem": "xl:w-44",
  "xl:w-12rem": "xl:w-48",
  "xl:w-13rem": "xl:w-52",
  "xl:w-14rem": "xl:w-56",
  "xl:w-15rem": "xl:w-60",
  "xl:w-16rem": "xl:w-64",
  "xl:w-17rem": "xl:w-[17rem]",
  "xl:w-18rem": "xl:w-72",
  "xl:w-19rem": "xl:w-[19rem]",
  "xl:w-20rem": "xl:w-80",
  "xl:w-21rem": "xl:w-[21rem]",
  "xl:w-22rem": "xl:w-[22rem]",
  "xl:w-23rem": "xl:w-[23rem]",
  "xl:w-24rem": "xl:w-96",
  "xl:w-25rem": "xl:w-[25rem]",
  "xl:w-26rem": "xl:w-[26rem]",
  "xl:w-27rem": "xl:w-[27rem]",
  "xl:w-28rem": "xl:w-[28rem]",
  "xl:w-29rem": "xl:w-[29rem]",
  "xl:w-30rem": "xl:w-[30rem]",
  "h-1rem": "h-4",
  "h-2rem": "h-8",
  "h-3rem": "h-12",
  "h-4rem": "h-16",
  "h-5rem": "h-20",
  "h-6rem": "h-24",
  "h-7rem": "h-28",
  "h-8rem": "h-32",
  "h-9rem": "h-36",
  "h-10rem": "h-40",
  "h-11rem": "h-44",
  "h-12rem": "h-48",
  "h-13rem": "h-52",
  "h-14rem": "h-56",
  "h-15rem": "h-60",
  "h-16rem": "h-64",
  "h-17rem": "h-[17rem]",
  "h-18rem": "h-72",
  "h-19rem": "h-[19rem]",
  "h-20rem": "h-80",
  "h-21rem": "h-[21rem]",
  "h-22rem": "h-[22rem]",
  "h-23rem": "h-[23rem]",
  "h-24rem": "h-96",
  "h-25rem": "h-[25rem]",
  "h-26rem": "h-[26rem]",
  "h-27rem": "h-[27rem]",
  "h-28rem": "h-[28rem]",
  "h-29rem": "h-[29rem]",
  "h-30rem": "h-[30rem]",
  "sm:h-1rem": "sm:h-4",
  "sm:h-2rem": "sm:h-8",
  "sm:h-3rem": "sm:h-12",
  "sm:h-4rem": "sm:h-16",
  "sm:h-5rem": "sm:h-20",
  "sm:h-6rem": "sm:h-24",
  "sm:h-7rem": "sm:h-28",
  "sm:h-8rem": "sm:h-32",
  "sm:h-9rem": "sm:h-36",
  "sm:h-10rem": "sm:h-40",
  "sm:h-11rem": "sm:h-44",
  "sm:h-12rem": "sm:h-48",
  "sm:h-13rem": "sm:h-52",
  "sm:h-14rem": "sm:h-56",
  "sm:h-15rem": "sm:h-60",
  "sm:h-16rem": "sm:h-64",
  "sm:h-17rem": "sm:h-[17rem]",
  "sm:h-18rem": "sm:h-72",
  "sm:h-19rem": "sm:h-[19rem]",
  "sm:h-20rem": "sm:h-80",
  "sm:h-21rem": "sm:h-[21rem]",
  "sm:h-22rem": "sm:h-[22rem]",
  "sm:h-23rem": "sm:h-[23rem]",
  "sm:h-24rem": "sm:h-96",
  "sm:h-25rem": "sm:h-[25rem]",
  "sm:h-26rem": "sm:h-[26rem]",
  "sm:h-27rem": "sm:h-[27rem]",
  "sm:h-28rem": "sm:h-[28rem]",
  "sm:h-29rem": "sm:h-[29rem]",
  "sm:h-30rem": "sm:h-[30rem]",
  "md:h-1rem": "md:h-4",
  "md:h-2rem": "md:h-8",
  "md:h-3rem": "md:h-12",
  "md:h-4rem": "md:h-16",
  "md:h-5rem": "md:h-20",
  "md:h-6rem": "md:h-24",
  "md:h-7rem": "md:h-28",
  "md:h-8rem": "md:h-32",
  "md:h-9rem": "md:h-36",
  "md:h-10rem": "md:h-40",
  "md:h-11rem": "md:h-44",
  "md:h-12rem": "md:h-48",
  "md:h-13rem": "md:h-52",
  "md:h-14rem": "md:h-56",
  "md:h-15rem": "md:h-60",
  "md:h-16rem": "md:h-64",
  "md:h-17rem": "md:h-[17rem]",
  "md:h-18rem": "md:h-72",
  "md:h-19rem": "md:h-[19rem]",
  "md:h-20rem": "md:h-80",
  "md:h-21rem": "md:h-[21rem]",
  "md:h-22rem": "md:h-[22rem]",
  "md:h-23rem": "md:h-[23rem]",
  "md:h-24rem": "md:h-96",
  "md:h-25rem": "md:h-[25rem]",
  "md:h-26rem": "md:h-[26rem]",
  "md:h-27rem": "md:h-[27rem]",
  "md:h-28rem": "md:h-[28rem]",
  "md:h-29rem": "md:h-[29rem]",
  "md:h-30rem": "md:h-[30rem]",
  "lg:h-1rem": "lg:h-4",
  "lg:h-2rem": "lg:h-8",
  "lg:h-3rem": "lg:h-12",
  "lg:h-4rem": "lg:h-16",
  "lg:h-5rem": "lg:h-20",
  "lg:h-6rem": "lg:h-24",
  "lg:h-7rem": "lg:h-28",
  "lg:h-8rem": "lg:h-32",
  "lg:h-9rem": "lg:h-36",
  "lg:h-10rem": "lg:h-40",
  "lg:h-11rem": "lg:h-44",
  "lg:h-12rem": "lg:h-48",
  "lg:h-13rem": "lg:h-52",
  "lg:h-14rem": "lg:h-56",
  "lg:h-15rem": "lg:h-60",
  "lg:h-16rem": "lg:h-64",
  "lg:h-17rem": "lg:h-[17rem]",
  "lg:h-18rem": "lg:h-72",
  "lg:h-19rem": "lg:h-[19rem]",
  "lg:h-20rem": "lg:h-80",
  "lg:h-21rem": "lg:h-[21rem]",
  "lg:h-22rem": "lg:h-[22rem]",
  "lg:h-23rem": "lg:h-[23rem]",
  "lg:h-24rem": "lg:h-96",
  "lg:h-25rem": "lg:h-[25rem]",
  "lg:h-26rem": "lg:h-[26rem]",
  "lg:h-27rem": "lg:h-[27rem]",
  "lg:h-28rem": "lg:h-[28rem]",
  "lg:h-29rem": "lg:h-[29rem]",
  "lg:h-30rem": "lg:h-[30rem]",
  "xl:h-1rem": "xl:h-4",
  "xl:h-2rem": "xl:h-8",
  "xl:h-3rem": "xl:h-12",
  "xl:h-4rem": "xl:h-16",
  "xl:h-5rem": "xl:h-20",
  "xl:h-6rem": "xl:h-24",
  "xl:h-7rem": "xl:h-28",
  "xl:h-8rem": "xl:h-32",
  "xl:h-9rem": "xl:h-36",
  "xl:h-10rem": "xl:h-40",
  "xl:h-11rem": "xl:h-44",
  "xl:h-12rem": "xl:h-48",
  "xl:h-13rem": "xl:h-52",
  "xl:h-14rem": "xl:h-56",
  "xl:h-15rem": "xl:h-60",
  "xl:h-16rem": "xl:h-64",
  "xl:h-17rem": "xl:h-[17rem]",
  "xl:h-18rem": "xl:h-72",
  "xl:h-19rem": "xl:h-[19rem]",
  "xl:h-20rem": "xl:h-80",
  "xl:h-21rem": "xl:h-[21rem]",
  "xl:h-22rem": "xl:h-[22rem]",
  "xl:h-23rem": "xl:h-[23rem]",
  "xl:h-24rem": "xl:h-96",
  "xl:h-25rem": "xl:h-[25rem]",
  "xl:h-26rem": "xl:h-[26rem]",
  "xl:h-27rem": "xl:h-[27rem]",
  "xl:h-28rem": "xl:h-[28rem]",
  "xl:h-29rem": "xl:h-[29rem]",
  "xl:h-30rem": "xl:h-[30rem]",
  "min-w-screen": "min-w-[100vw]",
  "sm:min-w-screen": "sm:min-w-[100vw]",
  "md:min-w-screen": "md:min-w-[100vw]",
  "lg:min-w-screen": "lg:min-w-[100vw]",
  "xl:min-w-screen": "xl:min-w-[100vw]",
  "max-w-screen": "max-w-[100vw]",
  "sm:max-w-screen": "sm:max-w-[100vw]",
  "md:max-w-screen": "md:max-w-[100vw]",
  "lg:max-w-screen": "lg:max-w-[100vw]",
  "xl:max-w-screen": "xl:max-w-[100vw]",
  "max-w-1rem": "max-w-4",
  "max-w-2rem": "max-w-8",
  "max-w-3rem": "max-w-12",
  "max-w-4rem": "max-w-16",
  "max-w-5rem": "max-w-20",
  "max-w-6rem": "max-w-24",
  "max-w-7rem": "max-w-28",
  "max-w-8rem": "max-w-32",
  "max-w-9rem": "max-w-36",
  "max-w-10rem": "max-w-40",
  "max-w-11rem": "max-w-44",
  "max-w-12rem": "max-w-48",
  "max-w-13rem": "max-w-52",
  "max-w-14rem": "max-w-56",
  "max-w-15rem": "max-w-60",
  "max-w-16rem": "max-w-64",
  "max-w-17rem": "max-w-[17rem]",
  "max-w-18rem": "max-w-72",
  "max-w-19rem": "max-w-[19rem]",
  "max-w-20rem": "max-w-80",
  "max-w-21rem": "max-w-[21rem]",
  "max-w-22rem": "max-w-[22rem]",
  "max-w-23rem": "max-w-[23rem]",
  "max-w-24rem": "max-w-96",
  "max-w-25rem": "max-w-[25rem]",
  "max-w-26rem": "max-w-[26rem]",
  "max-w-27rem": "max-w-[27rem]",
  "max-w-28rem": "max-w-[28rem]",
  "max-w-29rem": "max-w-[29rem]",
  "max-w-30rem": "max-w-[30rem]",
  "sm:max-w-1rem": "sm:max-w-4",
  "sm:max-w-2rem": "sm:max-w-8",
  "sm:max-w-3rem": "sm:max-w-12",
  "sm:max-w-4rem": "sm:max-w-16",
  "sm:max-w-5rem": "sm:max-w-20",
  "sm:max-w-6rem": "sm:max-w-24",
  "sm:max-w-7rem": "sm:max-w-28",
  "sm:max-w-8rem": "sm:max-w-32",
  "sm:max-w-9rem": "sm:max-w-36",
  "sm:max-w-10rem": "sm:max-w-40",
  "sm:max-w-11rem": "sm:max-w-44",
  "sm:max-w-12rem": "sm:max-w-48",
  "sm:max-w-13rem": "sm:max-w-52",
  "sm:max-w-14rem": "sm:max-w-56",
  "sm:max-w-15rem": "sm:max-w-60",
  "sm:max-w-16rem": "sm:max-w-64",
  "sm:max-w-17rem": "sm:max-w-[17rem]",
  "sm:max-w-18rem": "sm:max-w-72",
  "sm:max-w-19rem": "sm:max-w-[19rem]",
  "sm:max-w-20rem": "sm:max-w-80",
  "sm:max-w-21rem": "sm:max-w-[21rem]",
  "sm:max-w-22rem": "sm:max-w-[22rem]",
  "sm:max-w-23rem": "sm:max-w-[23rem]",
  "sm:max-w-24rem": "sm:max-w-96",
  "sm:max-w-25rem": "sm:max-w-[25rem]",
  "sm:max-w-26rem": "sm:max-w-[26rem]",
  "sm:max-w-27rem": "sm:max-w-[27rem]",
  "sm:max-w-28rem": "sm:max-w-[28rem]",
  "sm:max-w-29rem": "sm:max-w-[29rem]",
  "sm:max-w-30rem": "sm:max-w-[30rem]",
  "md:max-w-1rem": "md:max-w-4",
  "md:max-w-2rem": "md:max-w-8",
  "md:max-w-3rem": "md:max-w-12",
  "md:max-w-4rem": "md:max-w-16",
  "md:max-w-5rem": "md:max-w-20",
  "md:max-w-6rem": "md:max-w-24",
  "md:max-w-7rem": "md:max-w-28",
  "md:max-w-8rem": "md:max-w-32",
  "md:max-w-9rem": "md:max-w-36",
  "md:max-w-10rem": "md:max-w-40",
  "md:max-w-11rem": "md:max-w-44",
  "md:max-w-12rem": "md:max-w-48",
  "md:max-w-13rem": "md:max-w-52",
  "md:max-w-14rem": "md:max-w-56",
  "md:max-w-15rem": "md:max-w-60",
  "md:max-w-16rem": "md:max-w-64",
  "md:max-w-17rem": "md:max-w-[17rem]",
  "md:max-w-18rem": "md:max-w-72",
  "md:max-w-19rem": "md:max-w-[19rem]",
  "md:max-w-20rem": "md:max-w-80",
  "md:max-w-21rem": "md:max-w-[21rem]",
  "md:max-w-22rem": "md:max-w-[22rem]",
  "md:max-w-23rem": "md:max-w-[23rem]",
  "md:max-w-24rem": "md:max-w-96",
  "md:max-w-25rem": "md:max-w-[25rem]",
  "md:max-w-26rem": "md:max-w-[26rem]",
  "md:max-w-27rem": "md:max-w-[27rem]",
  "md:max-w-28rem": "md:max-w-[28rem]",
  "md:max-w-29rem": "md:max-w-[29rem]",
  "md:max-w-30rem": "md:max-w-[30rem]",
  "lg:max-w-1rem": "lg:max-w-4",
  "lg:max-w-2rem": "lg:max-w-8",
  "lg:max-w-3rem": "lg:max-w-12",
  "lg:max-w-4rem": "lg:max-w-16",
  "lg:max-w-5rem": "lg:max-w-20",
  "lg:max-w-6rem": "lg:max-w-24",
  "lg:max-w-7rem": "lg:max-w-28",
  "lg:max-w-8rem": "lg:max-w-32",
  "lg:max-w-9rem": "lg:max-w-36",
  "lg:max-w-10rem": "lg:max-w-40",
  "lg:max-w-11rem": "lg:max-w-44",
  "lg:max-w-12rem": "lg:max-w-48",
  "lg:max-w-13rem": "lg:max-w-52",
  "lg:max-w-14rem": "lg:max-w-56",
  "lg:max-w-15rem": "lg:max-w-60",
  "lg:max-w-16rem": "lg:max-w-64",
  "lg:max-w-17rem": "lg:max-w-[17rem]",
  "lg:max-w-18rem": "lg:max-w-72",
  "lg:max-w-19rem": "lg:max-w-[19rem]",
  "lg:max-w-20rem": "lg:max-w-80",
  "lg:max-w-21rem": "lg:max-w-[21rem]",
  "lg:max-w-22rem": "lg:max-w-[22rem]",
  "lg:max-w-23rem": "lg:max-w-[23rem]",
  "lg:max-w-24rem": "lg:max-w-96",
  "lg:max-w-25rem": "lg:max-w-[25rem]",
  "lg:max-w-26rem": "lg:max-w-[26rem]",
  "lg:max-w-27rem": "lg:max-w-[27rem]",
  "lg:max-w-28rem": "lg:max-w-[28rem]",
  "lg:max-w-29rem": "lg:max-w-[29rem]",
  "lg:max-w-30rem": "lg:max-w-[30rem]",
  "xl:max-w-1rem": "xl:max-w-4",
  "xl:max-w-2rem": "xl:max-w-8",
  "xl:max-w-3rem": "xl:max-w-12",
  "xl:max-w-4rem": "xl:max-w-16",
  "xl:max-w-5rem": "xl:max-w-20",
  "xl:max-w-6rem": "xl:max-w-24",
  "xl:max-w-7rem": "xl:max-w-28",
  "xl:max-w-8rem": "xl:max-w-32",
  "xl:max-w-9rem": "xl:max-w-36",
  "xl:max-w-10rem": "xl:max-w-40",
  "xl:max-w-11rem": "xl:max-w-44",
  "xl:max-w-12rem": "xl:max-w-48",
  "xl:max-w-13rem": "xl:max-w-52",
  "xl:max-w-14rem": "xl:max-w-56",
  "xl:max-w-15rem": "xl:max-w-60",
  "xl:max-w-16rem": "xl:max-w-64",
  "xl:max-w-17rem": "xl:max-w-[17rem]",
  "xl:max-w-18rem": "xl:max-w-72",
  "xl:max-w-19rem": "xl:max-w-[19rem]",
  "xl:max-w-20rem": "xl:max-w-80",
  "xl:max-w-21rem": "xl:max-w-[21rem]",
  "xl:max-w-22rem": "xl:max-w-[22rem]",
  "xl:max-w-23rem": "xl:max-w-[23rem]",
  "xl:max-w-24rem": "xl:max-w-96",
  "xl:max-w-25rem": "xl:max-w-[25rem]",
  "xl:max-w-26rem": "xl:max-w-[26rem]",
  "xl:max-w-27rem": "xl:max-w-[27rem]",
  "xl:max-w-28rem": "xl:max-w-[28rem]",
  "xl:max-w-29rem": "xl:max-w-[29rem]",
  "xl:max-w-30rem": "xl:max-w-[30rem]",
  "max-h-1rem": "max-h-4",
  "max-h-2rem": "max-h-8",
  "max-h-3rem": "max-h-12",
  "max-h-4rem": "max-h-16",
  "max-h-5rem": "max-h-20",
  "max-h-6rem": "max-h-24",
  "max-h-7rem": "max-h-28",
  "max-h-8rem": "max-h-32",
  "max-h-9rem": "max-h-36",
  "max-h-10rem": "max-h-40",
  "max-h-11rem": "max-h-44",
  "max-h-12rem": "max-h-48",
  "max-h-13rem": "max-h-52",
  "max-h-14rem": "max-h-56",
  "max-h-15rem": "max-h-60",
  "max-h-16rem": "max-h-64",
  "max-h-17rem": "max-h-[17rem]",
  "max-h-18rem": "max-h-72",
  "max-h-19rem": "max-h-[19rem]",
  "max-h-20rem": "max-h-80",
  "max-h-21rem": "max-h-[21rem]",
  "max-h-22rem": "max-h-[22rem]",
  "max-h-23rem": "max-h-[23rem]",
  "max-h-24rem": "max-h-96",
  "max-h-25rem": "max-h-[25rem]",
  "max-h-26rem": "max-h-[26rem]",
  "max-h-27rem": "max-h-[27rem]",
  "max-h-28rem": "max-h-[28rem]",
  "max-h-29rem": "max-h-[29rem]",
  "max-h-30rem": "max-h-[30rem]",
  "sm:max-h-1rem": "sm:max-h-4",
  "sm:max-h-2rem": "sm:max-h-8",
  "sm:max-h-3rem": "sm:max-h-12",
  "sm:max-h-4rem": "sm:max-h-16",
  "sm:max-h-5rem": "sm:max-h-20",
  "sm:max-h-6rem": "sm:max-h-24",
  "sm:max-h-7rem": "sm:max-h-28",
  "sm:max-h-8rem": "sm:max-h-32",
  "sm:max-h-9rem": "sm:max-h-36",
  "sm:max-h-10rem": "sm:max-h-40",
  "sm:max-h-11rem": "sm:max-h-44",
  "sm:max-h-12rem": "sm:max-h-48",
  "sm:max-h-13rem": "sm:max-h-52",
  "sm:max-h-14rem": "sm:max-h-56",
  "sm:max-h-15rem": "sm:max-h-60",
  "sm:max-h-16rem": "sm:max-h-64",
  "sm:max-h-17rem": "sm:max-h-[17rem]",
  "sm:max-h-18rem": "sm:max-h-72",
  "sm:max-h-19rem": "sm:max-h-[19rem]",
  "sm:max-h-20rem": "sm:max-h-80",
  "sm:max-h-21rem": "sm:max-h-[21rem]",
  "sm:max-h-22rem": "sm:max-h-[22rem]",
  "sm:max-h-23rem": "sm:max-h-[23rem]",
  "sm:max-h-24rem": "sm:max-h-96",
  "sm:max-h-25rem": "sm:max-h-[25rem]",
  "sm:max-h-26rem": "sm:max-h-[26rem]",
  "sm:max-h-27rem": "sm:max-h-[27rem]",
  "sm:max-h-28rem": "sm:max-h-[28rem]",
  "sm:max-h-29rem": "sm:max-h-[29rem]",
  "sm:max-h-30rem": "sm:max-h-[30rem]",
  "md:max-h-1rem": "md:max-h-4",
  "md:max-h-2rem": "md:max-h-8",
  "md:max-h-3rem": "md:max-h-12",
  "md:max-h-4rem": "md:max-h-16",
  "md:max-h-5rem": "md:max-h-20",
  "md:max-h-6rem": "md:max-h-24",
  "md:max-h-7rem": "md:max-h-28",
  "md:max-h-8rem": "md:max-h-32",
  "md:max-h-9rem": "md:max-h-36",
  "md:max-h-10rem": "md:max-h-40",
  "md:max-h-11rem": "md:max-h-44",
  "md:max-h-12rem": "md:max-h-48",
  "md:max-h-13rem": "md:max-h-52",
  "md:max-h-14rem": "md:max-h-56",
  "md:max-h-15rem": "md:max-h-60",
  "md:max-h-16rem": "md:max-h-64",
  "md:max-h-17rem": "md:max-h-[17rem]",
  "md:max-h-18rem": "md:max-h-72",
  "md:max-h-19rem": "md:max-h-[19rem]",
  "md:max-h-20rem": "md:max-h-80",
  "md:max-h-21rem": "md:max-h-[21rem]",
  "md:max-h-22rem": "md:max-h-[22rem]",
  "md:max-h-23rem": "md:max-h-[23rem]",
  "md:max-h-24rem": "md:max-h-96",
  "md:max-h-25rem": "md:max-h-[25rem]",
  "md:max-h-26rem": "md:max-h-[26rem]",
  "md:max-h-27rem": "md:max-h-[27rem]",
  "md:max-h-28rem": "md:max-h-[28rem]",
  "md:max-h-29rem": "md:max-h-[29rem]",
  "md:max-h-30rem": "md:max-h-[30rem]",
  "lg:max-h-1rem": "lg:max-h-4",
  "lg:max-h-2rem": "lg:max-h-8",
  "lg:max-h-3rem": "lg:max-h-12",
  "lg:max-h-4rem": "lg:max-h-16",
  "lg:max-h-5rem": "lg:max-h-20",
  "lg:max-h-6rem": "lg:max-h-24",
  "lg:max-h-7rem": "lg:max-h-28",
  "lg:max-h-8rem": "lg:max-h-32",
  "lg:max-h-9rem": "lg:max-h-36",
  "lg:max-h-10rem": "lg:max-h-40",
  "lg:max-h-11rem": "lg:max-h-44",
  "lg:max-h-12rem": "lg:max-h-48",
  "lg:max-h-13rem": "lg:max-h-52",
  "lg:max-h-14rem": "lg:max-h-56",
  "lg:max-h-15rem": "lg:max-h-60",
  "lg:max-h-16rem": "lg:max-h-64",
  "lg:max-h-17rem": "lg:max-h-[17rem]",
  "lg:max-h-18rem": "lg:max-h-72",
  "lg:max-h-19rem": "lg:max-h-[19rem]",
  "lg:max-h-20rem": "lg:max-h-80",
  "lg:max-h-21rem": "lg:max-h-[21rem]",
  "lg:max-h-22rem": "lg:max-h-[22rem]",
  "lg:max-h-23rem": "lg:max-h-[23rem]",
  "lg:max-h-24rem": "lg:max-h-96",
  "lg:max-h-25rem": "lg:max-h-[25rem]",
  "lg:max-h-26rem": "lg:max-h-[26rem]",
  "lg:max-h-27rem": "lg:max-h-[27rem]",
  "lg:max-h-28rem": "lg:max-h-[28rem]",
  "lg:max-h-29rem": "lg:max-h-[29rem]",
  "lg:max-h-30rem": "lg:max-h-[30rem]",
  "xl:max-h-1rem": "xl:max-h-4",
  "xl:max-h-2rem": "xl:max-h-8",
  "xl:max-h-3rem": "xl:max-h-12",
  "xl:max-h-4rem": "xl:max-h-16",
  "xl:max-h-5rem": "xl:max-h-20",
  "xl:max-h-6rem": "xl:max-h-24",
  "xl:max-h-7rem": "xl:max-h-28",
  "xl:max-h-8rem": "xl:max-h-32",
  "xl:max-h-9rem": "xl:max-h-36",
  "xl:max-h-10rem": "xl:max-h-40",
  "xl:max-h-11rem": "xl:max-h-44",
  "xl:max-h-12rem": "xl:max-h-48",
  "xl:max-h-13rem": "xl:max-h-52",
  "xl:max-h-14rem": "xl:max-h-56",
  "xl:max-h-15rem": "xl:max-h-60",
  "xl:max-h-16rem": "xl:max-h-64",
  "xl:max-h-17rem": "xl:max-h-[17rem]",
  "xl:max-h-18rem": "xl:max-h-72",
  "xl:max-h-19rem": "xl:max-h-[19rem]",
  "xl:max-h-20rem": "xl:max-h-80",
  "xl:max-h-21rem": "xl:max-h-[21rem]",
  "xl:max-h-22rem": "xl:max-h-[22rem]",
  "xl:max-h-23rem": "xl:max-h-[23rem]",
  "xl:max-h-24rem": "xl:max-h-96",
  "xl:max-h-25rem": "xl:max-h-[25rem]",
  "xl:max-h-26rem": "xl:max-h-[26rem]",
  "xl:max-h-27rem": "xl:max-h-[27rem]",
  "xl:max-h-28rem": "xl:max-h-[28rem]",
  "xl:max-h-29rem": "xl:max-h-[29rem]",
  "xl:max-h-30rem": "xl:max-h-[30rem]",
  "top-50": "top-1/2",
  "top-100": "top-full",
  "left-50": "left-1/2",
  "left-100": "left-full",
  "right-50": "right-1/2",
  "right-100": "right-full",
  "bottom-50": "bottom-1/2",
  "bottom-100": "bottom-full",
  "sm:top-50": "sm:top-1/2",
  "sm:top-100": "sm:top-full",
  "sm:left-50": "sm:left-1/2",
  "sm:left-100": "sm:left-full",
  "sm:right-50": "sm:right-1/2",
  "sm:right-100": "sm:right-full",
  "sm:bottom-50": "sm:bottom-1/2",
  "sm:bottom-100": "sm:bottom-full",
  "md:top-50": "md:top-1/2",
  "md:top-100": "md:top-full",
  "md:left-50": "md:left-1/2",
  "md:left-100": "md:left-full",
  "md:right-50": "md:right-1/2",
  "md:right-100": "md:right-full",
  "md:bottom-50": "md:bottom-1/2",
  "md:bottom-100": "md:bottom-full",
  "lg:top-50": "lg:top-1/2",
  "lg:top-100": "lg:top-full",
  "lg:left-50": "lg:left-1/2",
  "lg:left-100": "lg:left-full",
  "lg:right-50": "lg:right-1/2",
  "lg:right-100": "lg:right-full",
  "lg:bottom-50": "lg:bottom-1/2",
  "lg:bottom-100": "lg:bottom-full",
  "xl:top-50": "xl:top-1/2",
  "xl:top-100": "xl:top-full",
  "xl:left-50": "xl:left-1/2",
  "xl:left-100": "xl:left-full",
  "xl:right-50": "xl:right-1/2",
  "xl:right-100": "xl:right-full",
  "xl:bottom-50": "xl:bottom-1/2",
  "xl:bottom-100": "xl:bottom-full",
  "z-1": "z-10",
  "z-2": "z-20",
  "z-3": "z-30",
  "z-4": "z-40",
  "z-5": "z-50",
  "sm:z-1": "sm:z-10",
  "sm:z-2": "sm:z-20",
  "sm:z-3": "sm:z-30",
  "sm:z-4": "sm:z-40",
  "sm:z-5": "sm:z-50",
  "md:z-1": "md:z-10",
  "md:z-2": "md:z-20",
  "md:z-3": "md:z-30",
  "md:z-4": "md:z-40",
  "md:z-5": "md:z-50",
  "lg:z-1": "lg:z-10",
  "lg:z-2": "lg:z-20",
  "lg:z-3": "lg:z-30",
  "lg:z-4": "lg:z-40",
  "lg:z-5": "lg:z-50",
  "xl:z-1": "xl:z-10",
  "xl:z-2": "xl:z-20",
  "xl:z-3": "xl:z-30",
  "xl:z-4": "xl:z-40",
  "xl:z-5": "xl:z-50",
  "outline-none": "outline-0",
  reset: "",
  "transition-duration-100": "duration-100",
  "transition-duration-150": "duration-150",
  "transition-duration-200": "duration-200",
  "transition-duration-300": "duration-300",
  "transition-duration-400": "duration-[400ms]",
  "transition-duration-500": "duration-500",
  "transition-duration-1000": "duration-1000",
  "transition-duration-2000": "duration-[2000ms]",
  "transition-duration-3000": "duration-[3000ms]",
  "transition-linear": "ease-linear",
  "transition-ease-in": "ease-in",
  "transition-ease-out": "ease-out",
  "transition-ease-in-out": "ease-in-out",
  "transition-delay-100": "delay-100",
  "transition-delay-150": "delay-150",
  "transition-delay-200": "delay-200",
  "transition-delay-300": "delay-300",
  "transition-delay-400": "delay-[400ms]",
  "transition-delay-500": "delay-500",
  "transition-delay-1000": "delay-1000",
  "translate-x-100": "translate-x-full",
  "-translate-x-100": "-translate-x-full",
  "translate-y-100": "translate-y-full",
  "-translate-y-100": "-translate-y-full",
  "sm:translate-x-100": "sm:translate-x-full",
  "sm:-translate-x-100": "sm:-translate-x-full",
  "sm:translate-y-100": "sm:translate-y-full",
  "sm:-translate-y-100": "sm:-translate-y-full",
  "md:translate-x-100": "md:translate-x-full",
  "md:-translate-x-100": "md:-translate-x-full",
  "md:translate-y-100": "md:translate-y-full",
  "md:-translate-y-100": "md:-translate-y-full",
  "lg:translate-x-100": "lg:translate-x-full",
  "lg:-translate-x-100": "lg:-translate-x-full",
  "lg:translate-y-100": "lg:translate-y-full",
  "lg:-translate-y-100": "lg:-translate-y-full",
  "xl:translate-x-100": "xl:translate-x-full",
  "xl:-translate-x-100": "xl:-translate-x-full",
  "xl:translate-y-100": "xl:translate-y-full",
  "xl:-translate-y-100": "xl:-translate-y-full",
  fadein: "animate-fadein",
  fadeout: "animate-fadeout",
  slidedown: "animate-slidedown",
  slideup: "animate-slideup",
  scalein: "animate-scalein",
  fadeinleft: "animate-fadeinleft",
  fadeoutleft: "animate-fadeoutleft",
  fadeinright: "animate-fadeinright",
  fadeoutright: "animate-fadeoutright",
  fadeinup: "animate-fadeinup",
  fadeoutup: "animate-fadeoutup",
  fadeindown: "animate-fadeindown",
  fadeoutdown: "animate-fadeoutdown",
  "animate-width": "animate-width",
  flip: "animate-flip",
  flipup: "animate-flipup",
  flipleft: "animate-flipleft",
  flipright: "animate-flipright",
  zoomin: "animate-zoomin",
  zoomindown: "animate-zoomindown",
  zoominleft: "animate-zoominleft",
  zoominright: "animate-zoominright",
  zoominup: "animate-zoominup",
  "animation-duration-100": "animate-duration-100",
  "animation-duration-150": "animate-duration-150",
  "animation-duration-200": "animate-duration-200",
  "animation-duration-300": "animate-duration-300",
  "animation-duration-400": "animate-duration-400",
  "animation-duration-500": "animate-duration-500",
  "animation-duration-1000": "animate-duration-1000",
  "animation-duration-2000": "animate-duration-2000",
  "animation-duration-3000": "animate-duration-3000",
  "animation-delay-100": "animate-delay-100",
  "animation-delay-150": "animate-delay-150",
  "animation-delay-200": "animate-delay-200",
  "animation-delay-300": "animate-delay-300",
  "animation-delay-400": "animate-delay-400",
  "animation-delay-500": "animate-delay-500",
  "animation-delay-1000": "animate-delay-1000",
  "animation-iteration-1": "animate-once",
  "animation-iteration-2": "animate-twice",
  "animation-iteration-infinite": "animate-infinite",
  "animation-linear": "animate-ease-linear",
  "animation-ease-in": "animate-ease-in",
  "animation-ease-out": "animate-ease-out",
  "animation-ease-in-out": "animate-ease-in-out",
  "animation-fill-none": "animate-fill-none",
  "animation-fill-forwards": "animate-fill-forwards",
  "animation-fill-backwards": "animate-fill-backwards",
  "animation-fill-both": "animate-fill-both"
};

// src/utils/helpers/twConverter.ts
function preprocessHtml(htmlContent) {
  return htmlContent;
}
function directTranslateToTailwind(htmlContent, translationDict) {
  const stringPattern = /(["'`])((?:\\\1|(?:(?!\1)).)*)(\1)/g;
  const output = htmlContent.replace(
    stringPattern,
    (match, quoteStart, content, quoteEnd) => {
      const parts = content.split(" ");
      const translatedParts = parts.map((part) => {
        return translationDict[part] || part;
      });
      return `${quoteStart}${translatedParts.join(" ")}${quoteEnd}`;
    }
  );
  return output;
}
function processFolder(folderPath, translationDict) {
  if (folderPath.includes("node_modules")) {
    return;
  }
  fs6.readdir(folderPath, { withFileTypes: true }, (err, entries) => {
    if (err)
      throw err;
    entries.forEach((entry) => {
      console.log(entry.name);
      if (entry.isDirectory()) {
        processFolder(
          path5.join(folderPath, entry.name),
          translationDict
        );
      } else if (entry.name.endsWith(".vue") || entry.name.endsWith(".js") || entry.name.endsWith(".tsx") || entry.name.endsWith(".jsx") || entry.name.endsWith(".ts") || entry.name.endsWith(".html")) {
        const filePath = path5.join(folderPath, entry.name);
        fs6.readFile(filePath, "utf8", (err2, data) => {
          if (err2)
            throw err2;
          let vueContent = preprocessHtml(data);
          vueContent = directTranslateToTailwind(
            vueContent,
            translationDict
          );
          fs6.writeFile(filePath, vueContent, "utf8", (err3) => {
            if (err3)
              throw err3;
            console.log(`${filePath} has been processed.`);
          });
        });
      }
    });
  });
}
function loadTranslationDict(vueFolderPath) {
  processFolder(vueFolderPath, translationDict_default);
}
function startTranslation(vueFolderPath) {
  try {
    loadTranslationDict(vueFolderPath);
    console.log("\u2705 Translation completed.");
  } catch (err) {
    console.error(err);
  }
}

// src/utils/helpers/primeflex.ts
async function translateToTailwind() {
  const currentDirectoryAnswer = await inquirer5.prompt([
    {
      type: "confirm",
      name: "useCurrentDirectory",
      message: "Do you want to use the current directory?"
    }
  ]);
  let folderDirectory = "";
  if (currentDirectoryAnswer.useCurrentDirectory !== true) {
    const folderPathAnswer = await inquirer5.prompt([
      {
        type: "input",
        name: "folderPath",
        placeholder: "(press enter to use the current directory)",
        message: `What is the folder path?`
      }
    ]);
    folderDirectory = folderPathAnswer.folderPath;
  } else {
    folderDirectory = process.cwd();
  }
  await startTranslation(folderDirectory);
}

// src/utils/helpers/clt.ts
import { exec as exec5 } from "child_process";
var uninstall = async () => {
  await deleteCacheDirectory();
  await exec5(
    "npm uninstall prime-cmd && npm uninstall prime-cmd -g",
    (error, stdout, stderr) => {
      if (error) {
        console.error(`Error uninstalling nuxt-primevue: ${error}`);
        return;
      }
      console.log(stdout);
    }
  );
};

// src/index.ts
var program = new Command2();
var spinner4 = new spinner_default();
program.description("Our New CLI");
program.option("-v, --verbose", "verbose logging");
program.version("0.1.4", "--version", "output the current version");
program.addCommand(widgets);
program.command("pf2tw").description("Translate PrimeFlex classes to Tailwind CSS classes").action(async () => {
  await translateToTailwind();
});
program.command("uninstall").description("Uninstall PrimeCLT").action(async () => {
  await uninstall();
});
async function main() {
  await program.parseAsync();
}
main();
process.on("unhandledRejection", function(err) {
  const debug = program.opts().verbose;
  if (debug) {
    console.error(err.stack);
  }
  spinner4.spinnerError();
  spinner4.stopSpinner();
  program.error("", { exitCode: 1 });
});
//# sourceMappingURL=index.js.map
