import * as i0 from '@angular/core';
import { input, effect, Directive, NgModule } from '@angular/core';
import { cn } from '@primeuix/utils';

/**
 * PClass directive provides extends class binding functionality.
 * Supports strings, arrays, objects, and mixed combinations.
 * @group Components
 */
class ClassNames {
    el;
    renderer;
    /**
     * Class value(s) to be applied. Can be a string, array, object, or combination.
     * @group Props
     */
    pClass = input(...(ngDevMode ? [undefined, { debugName: "pClass" }] : []));
    initialClasses = '';
    isInitialized = false;
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        effect(() => {
            this.updateClasses();
        });
    }
    updateClasses() {
        if (this.el?.nativeElement) {
            // Store initial classes only once
            if (!this.isInitialized) {
                this.initialClasses = this.el.nativeElement.className;
                this.isInitialized = true;
            }
            // Combine initial classes with pClass
            const classString = cn(this.initialClasses, this.pClass());
            // Apply the class to the element
            if (classString) {
                this.renderer.setAttribute(this.el.nativeElement, 'class', classString);
            }
            else {
                this.renderer.removeAttribute(this.el.nativeElement, 'class');
            }
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.3.2", ngImport: i0, type: ClassNames, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "20.3.2", type: ClassNames, isStandalone: true, selector: "[pClass]", inputs: { pClass: { classPropertyName: "pClass", publicName: "pClass", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.3.2", ngImport: i0, type: ClassNames, decorators: [{
            type: Directive,
            args: [{
                    selector: '[pClass]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }] });
class ClassNamesModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.3.2", ngImport: i0, type: ClassNamesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "20.3.2", ngImport: i0, type: ClassNamesModule, imports: [ClassNames], exports: [ClassNames] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "20.3.2", ngImport: i0, type: ClassNamesModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.3.2", ngImport: i0, type: ClassNamesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ClassNames],
                    exports: [ClassNames]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ClassNames, ClassNamesModule };
//# sourceMappingURL=primeng-classnames.mjs.map
