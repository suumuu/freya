import * as i0 from '@angular/core';
import { ElementRef, Renderer2 } from '@angular/core';

/**
 * Represents the suitable value types of pClass directive.
 * @group Types
 */
type PClassValue = string | number | boolean | undefined | null | {
    [key: string]: boolean | undefined | null;
} | any;
/**
 * PClass directive provides extends class binding functionality.
 * Supports strings, arrays, objects, and mixed combinations.
 * @group Components
 */
declare class ClassNames {
    private el;
    private renderer;
    /**
     * Class value(s) to be applied. Can be a string, array, object, or combination.
     * @group Props
     */
    pClass: i0.InputSignal<any>;
    private initialClasses;
    private isInitialized;
    constructor(el: ElementRef, renderer: Renderer2);
    private updateClasses;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClassNames, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ClassNames, "[pClass]", never, { "pClass": { "alias": "pClass"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
declare class ClassNamesModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<ClassNamesModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<ClassNamesModule, never, [typeof ClassNames], [typeof ClassNames]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<ClassNamesModule>;
}

export { ClassNames, ClassNamesModule };
export type { PClassValue };
